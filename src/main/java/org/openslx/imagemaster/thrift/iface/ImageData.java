/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.imagemaster.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ImageData implements org.apache.thrift.TBase<ImageData, ImageData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageData");

  private static final org.apache.thrift.protocol.TField UUID_FIELD_DESC = new org.apache.thrift.protocol.TField("uuid", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IMAGE_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageVersion", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("imageName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("imageCreateTime", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField IMAGE_UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("imageUpdateTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField IMAGE_OWNER_FIELD_DESC = new org.apache.thrift.protocol.TField("imageOwner", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CONTENT_OPERATING_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("contentOperatingSystem", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STATUS_IS_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("statusIsValid", org.apache.thrift.protocol.TType.BOOL, (short)8);
  private static final org.apache.thrift.protocol.TField STATUS_IS_DELETED_FIELD_DESC = new org.apache.thrift.protocol.TField("statusIsDeleted", org.apache.thrift.protocol.TType.BOOL, (short)9);
  private static final org.apache.thrift.protocol.TField IMAGE_SHORT_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageShortDescription", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField IMAGE_LONG_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("imageLongDescription", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)12);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ImageDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ImageDataTupleSchemeFactory());
  }

  public String uuid; // required
  public int imageVersion; // required
  public String imageName; // required
  public long imageCreateTime; // required
  public long imageUpdateTime; // required
  public String imageOwner; // required
  public String contentOperatingSystem; // required
  public boolean statusIsValid; // required
  public boolean statusIsDeleted; // required
  public String imageShortDescription; // required
  public String imageLongDescription; // required
  public long fileSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    UUID((short)1, "uuid"),
    IMAGE_VERSION((short)2, "imageVersion"),
    IMAGE_NAME((short)3, "imageName"),
    IMAGE_CREATE_TIME((short)4, "imageCreateTime"),
    IMAGE_UPDATE_TIME((short)5, "imageUpdateTime"),
    IMAGE_OWNER((short)6, "imageOwner"),
    CONTENT_OPERATING_SYSTEM((short)7, "contentOperatingSystem"),
    STATUS_IS_VALID((short)8, "statusIsValid"),
    STATUS_IS_DELETED((short)9, "statusIsDeleted"),
    IMAGE_SHORT_DESCRIPTION((short)10, "imageShortDescription"),
    IMAGE_LONG_DESCRIPTION((short)11, "imageLongDescription"),
    FILE_SIZE((short)12, "fileSize");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // UUID
          return UUID;
        case 2: // IMAGE_VERSION
          return IMAGE_VERSION;
        case 3: // IMAGE_NAME
          return IMAGE_NAME;
        case 4: // IMAGE_CREATE_TIME
          return IMAGE_CREATE_TIME;
        case 5: // IMAGE_UPDATE_TIME
          return IMAGE_UPDATE_TIME;
        case 6: // IMAGE_OWNER
          return IMAGE_OWNER;
        case 7: // CONTENT_OPERATING_SYSTEM
          return CONTENT_OPERATING_SYSTEM;
        case 8: // STATUS_IS_VALID
          return STATUS_IS_VALID;
        case 9: // STATUS_IS_DELETED
          return STATUS_IS_DELETED;
        case 10: // IMAGE_SHORT_DESCRIPTION
          return IMAGE_SHORT_DESCRIPTION;
        case 11: // IMAGE_LONG_DESCRIPTION
          return IMAGE_LONG_DESCRIPTION;
        case 12: // FILE_SIZE
          return FILE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __IMAGEVERSION_ISSET_ID = 0;
  private static final int __IMAGECREATETIME_ISSET_ID = 1;
  private static final int __IMAGEUPDATETIME_ISSET_ID = 2;
  private static final int __STATUSISVALID_ISSET_ID = 3;
  private static final int __STATUSISDELETED_ISSET_ID = 4;
  private static final int __FILESIZE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.UUID, new org.apache.thrift.meta_data.FieldMetaData("uuid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.IMAGE_VERSION, new org.apache.thrift.meta_data.FieldMetaData("imageVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("imageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("imageCreateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Date")));
    tmpMap.put(_Fields.IMAGE_UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("imageUpdateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Date")));
    tmpMap.put(_Fields.IMAGE_OWNER, new org.apache.thrift.meta_data.FieldMetaData("imageOwner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CONTENT_OPERATING_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("contentOperatingSystem", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS_IS_VALID, new org.apache.thrift.meta_data.FieldMetaData("statusIsValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATUS_IS_DELETED, new org.apache.thrift.meta_data.FieldMetaData("statusIsDeleted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IMAGE_SHORT_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("imageShortDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_LONG_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("imageLongDescription", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageData.class, metaDataMap);
  }

  public ImageData() {
  }

  public ImageData(
    String uuid,
    int imageVersion,
    String imageName,
    long imageCreateTime,
    long imageUpdateTime,
    String imageOwner,
    String contentOperatingSystem,
    boolean statusIsValid,
    boolean statusIsDeleted,
    String imageShortDescription,
    String imageLongDescription,
    long fileSize)
  {
    this();
    this.uuid = uuid;
    this.imageVersion = imageVersion;
    setImageVersionIsSet(true);
    this.imageName = imageName;
    this.imageCreateTime = imageCreateTime;
    setImageCreateTimeIsSet(true);
    this.imageUpdateTime = imageUpdateTime;
    setImageUpdateTimeIsSet(true);
    this.imageOwner = imageOwner;
    this.contentOperatingSystem = contentOperatingSystem;
    this.statusIsValid = statusIsValid;
    setStatusIsValidIsSet(true);
    this.statusIsDeleted = statusIsDeleted;
    setStatusIsDeletedIsSet(true);
    this.imageShortDescription = imageShortDescription;
    this.imageLongDescription = imageLongDescription;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageData(ImageData other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUuid()) {
      this.uuid = other.uuid;
    }
    this.imageVersion = other.imageVersion;
    if (other.isSetImageName()) {
      this.imageName = other.imageName;
    }
    this.imageCreateTime = other.imageCreateTime;
    this.imageUpdateTime = other.imageUpdateTime;
    if (other.isSetImageOwner()) {
      this.imageOwner = other.imageOwner;
    }
    if (other.isSetContentOperatingSystem()) {
      this.contentOperatingSystem = other.contentOperatingSystem;
    }
    this.statusIsValid = other.statusIsValid;
    this.statusIsDeleted = other.statusIsDeleted;
    if (other.isSetImageShortDescription()) {
      this.imageShortDescription = other.imageShortDescription;
    }
    if (other.isSetImageLongDescription()) {
      this.imageLongDescription = other.imageLongDescription;
    }
    this.fileSize = other.fileSize;
  }

  public ImageData deepCopy() {
    return new ImageData(this);
  }

  @Override
  public void clear() {
    this.uuid = null;
    setImageVersionIsSet(false);
    this.imageVersion = 0;
    this.imageName = null;
    setImageCreateTimeIsSet(false);
    this.imageCreateTime = 0;
    setImageUpdateTimeIsSet(false);
    this.imageUpdateTime = 0;
    this.imageOwner = null;
    this.contentOperatingSystem = null;
    setStatusIsValidIsSet(false);
    this.statusIsValid = false;
    setStatusIsDeletedIsSet(false);
    this.statusIsDeleted = false;
    this.imageShortDescription = null;
    this.imageLongDescription = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
  }

  public String getUuid() {
    return this.uuid;
  }

  public ImageData setUuid(String uuid) {
    this.uuid = uuid;
    return this;
  }

  public void unsetUuid() {
    this.uuid = null;
  }

  /** Returns true if field uuid is set (has been assigned a value) and false otherwise */
  public boolean isSetUuid() {
    return this.uuid != null;
  }

  public void setUuidIsSet(boolean value) {
    if (!value) {
      this.uuid = null;
    }
  }

  public int getImageVersion() {
    return this.imageVersion;
  }

  public ImageData setImageVersion(int imageVersion) {
    this.imageVersion = imageVersion;
    setImageVersionIsSet(true);
    return this;
  }

  public void unsetImageVersion() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMAGEVERSION_ISSET_ID);
  }

  /** Returns true if field imageVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetImageVersion() {
    return EncodingUtils.testBit(__isset_bitfield, __IMAGEVERSION_ISSET_ID);
  }

  public void setImageVersionIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMAGEVERSION_ISSET_ID, value);
  }

  public String getImageName() {
    return this.imageName;
  }

  public ImageData setImageName(String imageName) {
    this.imageName = imageName;
    return this;
  }

  public void unsetImageName() {
    this.imageName = null;
  }

  /** Returns true if field imageName is set (has been assigned a value) and false otherwise */
  public boolean isSetImageName() {
    return this.imageName != null;
  }

  public void setImageNameIsSet(boolean value) {
    if (!value) {
      this.imageName = null;
    }
  }

  public long getImageCreateTime() {
    return this.imageCreateTime;
  }

  public ImageData setImageCreateTime(long imageCreateTime) {
    this.imageCreateTime = imageCreateTime;
    setImageCreateTimeIsSet(true);
    return this;
  }

  public void unsetImageCreateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMAGECREATETIME_ISSET_ID);
  }

  /** Returns true if field imageCreateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetImageCreateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __IMAGECREATETIME_ISSET_ID);
  }

  public void setImageCreateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMAGECREATETIME_ISSET_ID, value);
  }

  public long getImageUpdateTime() {
    return this.imageUpdateTime;
  }

  public ImageData setImageUpdateTime(long imageUpdateTime) {
    this.imageUpdateTime = imageUpdateTime;
    setImageUpdateTimeIsSet(true);
    return this;
  }

  public void unsetImageUpdateTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __IMAGEUPDATETIME_ISSET_ID);
  }

  /** Returns true if field imageUpdateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetImageUpdateTime() {
    return EncodingUtils.testBit(__isset_bitfield, __IMAGEUPDATETIME_ISSET_ID);
  }

  public void setImageUpdateTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __IMAGEUPDATETIME_ISSET_ID, value);
  }

  public String getImageOwner() {
    return this.imageOwner;
  }

  public ImageData setImageOwner(String imageOwner) {
    this.imageOwner = imageOwner;
    return this;
  }

  public void unsetImageOwner() {
    this.imageOwner = null;
  }

  /** Returns true if field imageOwner is set (has been assigned a value) and false otherwise */
  public boolean isSetImageOwner() {
    return this.imageOwner != null;
  }

  public void setImageOwnerIsSet(boolean value) {
    if (!value) {
      this.imageOwner = null;
    }
  }

  public String getContentOperatingSystem() {
    return this.contentOperatingSystem;
  }

  public ImageData setContentOperatingSystem(String contentOperatingSystem) {
    this.contentOperatingSystem = contentOperatingSystem;
    return this;
  }

  public void unsetContentOperatingSystem() {
    this.contentOperatingSystem = null;
  }

  /** Returns true if field contentOperatingSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetContentOperatingSystem() {
    return this.contentOperatingSystem != null;
  }

  public void setContentOperatingSystemIsSet(boolean value) {
    if (!value) {
      this.contentOperatingSystem = null;
    }
  }

  public boolean isStatusIsValid() {
    return this.statusIsValid;
  }

  public ImageData setStatusIsValid(boolean statusIsValid) {
    this.statusIsValid = statusIsValid;
    setStatusIsValidIsSet(true);
    return this;
  }

  public void unsetStatusIsValid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSISVALID_ISSET_ID);
  }

  /** Returns true if field statusIsValid is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusIsValid() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSISVALID_ISSET_ID);
  }

  public void setStatusIsValidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSISVALID_ISSET_ID, value);
  }

  public boolean isStatusIsDeleted() {
    return this.statusIsDeleted;
  }

  public ImageData setStatusIsDeleted(boolean statusIsDeleted) {
    this.statusIsDeleted = statusIsDeleted;
    setStatusIsDeletedIsSet(true);
    return this;
  }

  public void unsetStatusIsDeleted() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STATUSISDELETED_ISSET_ID);
  }

  /** Returns true if field statusIsDeleted is set (has been assigned a value) and false otherwise */
  public boolean isSetStatusIsDeleted() {
    return EncodingUtils.testBit(__isset_bitfield, __STATUSISDELETED_ISSET_ID);
  }

  public void setStatusIsDeletedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STATUSISDELETED_ISSET_ID, value);
  }

  public String getImageShortDescription() {
    return this.imageShortDescription;
  }

  public ImageData setImageShortDescription(String imageShortDescription) {
    this.imageShortDescription = imageShortDescription;
    return this;
  }

  public void unsetImageShortDescription() {
    this.imageShortDescription = null;
  }

  /** Returns true if field imageShortDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetImageShortDescription() {
    return this.imageShortDescription != null;
  }

  public void setImageShortDescriptionIsSet(boolean value) {
    if (!value) {
      this.imageShortDescription = null;
    }
  }

  public String getImageLongDescription() {
    return this.imageLongDescription;
  }

  public ImageData setImageLongDescription(String imageLongDescription) {
    this.imageLongDescription = imageLongDescription;
    return this;
  }

  public void unsetImageLongDescription() {
    this.imageLongDescription = null;
  }

  /** Returns true if field imageLongDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetImageLongDescription() {
    return this.imageLongDescription != null;
  }

  public void setImageLongDescriptionIsSet(boolean value) {
    if (!value) {
      this.imageLongDescription = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public ImageData setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case UUID:
      if (value == null) {
        unsetUuid();
      } else {
        setUuid((String)value);
      }
      break;

    case IMAGE_VERSION:
      if (value == null) {
        unsetImageVersion();
      } else {
        setImageVersion((Integer)value);
      }
      break;

    case IMAGE_NAME:
      if (value == null) {
        unsetImageName();
      } else {
        setImageName((String)value);
      }
      break;

    case IMAGE_CREATE_TIME:
      if (value == null) {
        unsetImageCreateTime();
      } else {
        setImageCreateTime((Long)value);
      }
      break;

    case IMAGE_UPDATE_TIME:
      if (value == null) {
        unsetImageUpdateTime();
      } else {
        setImageUpdateTime((Long)value);
      }
      break;

    case IMAGE_OWNER:
      if (value == null) {
        unsetImageOwner();
      } else {
        setImageOwner((String)value);
      }
      break;

    case CONTENT_OPERATING_SYSTEM:
      if (value == null) {
        unsetContentOperatingSystem();
      } else {
        setContentOperatingSystem((String)value);
      }
      break;

    case STATUS_IS_VALID:
      if (value == null) {
        unsetStatusIsValid();
      } else {
        setStatusIsValid((Boolean)value);
      }
      break;

    case STATUS_IS_DELETED:
      if (value == null) {
        unsetStatusIsDeleted();
      } else {
        setStatusIsDeleted((Boolean)value);
      }
      break;

    case IMAGE_SHORT_DESCRIPTION:
      if (value == null) {
        unsetImageShortDescription();
      } else {
        setImageShortDescription((String)value);
      }
      break;

    case IMAGE_LONG_DESCRIPTION:
      if (value == null) {
        unsetImageLongDescription();
      } else {
        setImageLongDescription((String)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case UUID:
      return getUuid();

    case IMAGE_VERSION:
      return Integer.valueOf(getImageVersion());

    case IMAGE_NAME:
      return getImageName();

    case IMAGE_CREATE_TIME:
      return Long.valueOf(getImageCreateTime());

    case IMAGE_UPDATE_TIME:
      return Long.valueOf(getImageUpdateTime());

    case IMAGE_OWNER:
      return getImageOwner();

    case CONTENT_OPERATING_SYSTEM:
      return getContentOperatingSystem();

    case STATUS_IS_VALID:
      return Boolean.valueOf(isStatusIsValid());

    case STATUS_IS_DELETED:
      return Boolean.valueOf(isStatusIsDeleted());

    case IMAGE_SHORT_DESCRIPTION:
      return getImageShortDescription();

    case IMAGE_LONG_DESCRIPTION:
      return getImageLongDescription();

    case FILE_SIZE:
      return Long.valueOf(getFileSize());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case UUID:
      return isSetUuid();
    case IMAGE_VERSION:
      return isSetImageVersion();
    case IMAGE_NAME:
      return isSetImageName();
    case IMAGE_CREATE_TIME:
      return isSetImageCreateTime();
    case IMAGE_UPDATE_TIME:
      return isSetImageUpdateTime();
    case IMAGE_OWNER:
      return isSetImageOwner();
    case CONTENT_OPERATING_SYSTEM:
      return isSetContentOperatingSystem();
    case STATUS_IS_VALID:
      return isSetStatusIsValid();
    case STATUS_IS_DELETED:
      return isSetStatusIsDeleted();
    case IMAGE_SHORT_DESCRIPTION:
      return isSetImageShortDescription();
    case IMAGE_LONG_DESCRIPTION:
      return isSetImageLongDescription();
    case FILE_SIZE:
      return isSetFileSize();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ImageData)
      return this.equals((ImageData)that);
    return false;
  }

  public boolean equals(ImageData that) {
    if (that == null)
      return false;

    boolean this_present_uuid = true && this.isSetUuid();
    boolean that_present_uuid = true && that.isSetUuid();
    if (this_present_uuid || that_present_uuid) {
      if (!(this_present_uuid && that_present_uuid))
        return false;
      if (!this.uuid.equals(that.uuid))
        return false;
    }

    boolean this_present_imageVersion = true;
    boolean that_present_imageVersion = true;
    if (this_present_imageVersion || that_present_imageVersion) {
      if (!(this_present_imageVersion && that_present_imageVersion))
        return false;
      if (this.imageVersion != that.imageVersion)
        return false;
    }

    boolean this_present_imageName = true && this.isSetImageName();
    boolean that_present_imageName = true && that.isSetImageName();
    if (this_present_imageName || that_present_imageName) {
      if (!(this_present_imageName && that_present_imageName))
        return false;
      if (!this.imageName.equals(that.imageName))
        return false;
    }

    boolean this_present_imageCreateTime = true;
    boolean that_present_imageCreateTime = true;
    if (this_present_imageCreateTime || that_present_imageCreateTime) {
      if (!(this_present_imageCreateTime && that_present_imageCreateTime))
        return false;
      if (this.imageCreateTime != that.imageCreateTime)
        return false;
    }

    boolean this_present_imageUpdateTime = true;
    boolean that_present_imageUpdateTime = true;
    if (this_present_imageUpdateTime || that_present_imageUpdateTime) {
      if (!(this_present_imageUpdateTime && that_present_imageUpdateTime))
        return false;
      if (this.imageUpdateTime != that.imageUpdateTime)
        return false;
    }

    boolean this_present_imageOwner = true && this.isSetImageOwner();
    boolean that_present_imageOwner = true && that.isSetImageOwner();
    if (this_present_imageOwner || that_present_imageOwner) {
      if (!(this_present_imageOwner && that_present_imageOwner))
        return false;
      if (!this.imageOwner.equals(that.imageOwner))
        return false;
    }

    boolean this_present_contentOperatingSystem = true && this.isSetContentOperatingSystem();
    boolean that_present_contentOperatingSystem = true && that.isSetContentOperatingSystem();
    if (this_present_contentOperatingSystem || that_present_contentOperatingSystem) {
      if (!(this_present_contentOperatingSystem && that_present_contentOperatingSystem))
        return false;
      if (!this.contentOperatingSystem.equals(that.contentOperatingSystem))
        return false;
    }

    boolean this_present_statusIsValid = true;
    boolean that_present_statusIsValid = true;
    if (this_present_statusIsValid || that_present_statusIsValid) {
      if (!(this_present_statusIsValid && that_present_statusIsValid))
        return false;
      if (this.statusIsValid != that.statusIsValid)
        return false;
    }

    boolean this_present_statusIsDeleted = true;
    boolean that_present_statusIsDeleted = true;
    if (this_present_statusIsDeleted || that_present_statusIsDeleted) {
      if (!(this_present_statusIsDeleted && that_present_statusIsDeleted))
        return false;
      if (this.statusIsDeleted != that.statusIsDeleted)
        return false;
    }

    boolean this_present_imageShortDescription = true && this.isSetImageShortDescription();
    boolean that_present_imageShortDescription = true && that.isSetImageShortDescription();
    if (this_present_imageShortDescription || that_present_imageShortDescription) {
      if (!(this_present_imageShortDescription && that_present_imageShortDescription))
        return false;
      if (!this.imageShortDescription.equals(that.imageShortDescription))
        return false;
    }

    boolean this_present_imageLongDescription = true && this.isSetImageLongDescription();
    boolean that_present_imageLongDescription = true && that.isSetImageLongDescription();
    if (this_present_imageLongDescription || that_present_imageLongDescription) {
      if (!(this_present_imageLongDescription && that_present_imageLongDescription))
        return false;
      if (!this.imageLongDescription.equals(that.imageLongDescription))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(ImageData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    ImageData typedOther = (ImageData)other;

    lastComparison = Boolean.valueOf(isSetUuid()).compareTo(typedOther.isSetUuid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUuid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uuid, typedOther.uuid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageVersion()).compareTo(typedOther.isSetImageVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageVersion, typedOther.imageVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageName()).compareTo(typedOther.isSetImageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageName, typedOther.imageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageCreateTime()).compareTo(typedOther.isSetImageCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageCreateTime, typedOther.imageCreateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageUpdateTime()).compareTo(typedOther.isSetImageUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageUpdateTime, typedOther.imageUpdateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageOwner()).compareTo(typedOther.isSetImageOwner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageOwner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageOwner, typedOther.imageOwner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetContentOperatingSystem()).compareTo(typedOther.isSetContentOperatingSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContentOperatingSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contentOperatingSystem, typedOther.contentOperatingSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusIsValid()).compareTo(typedOther.isSetStatusIsValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusIsValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusIsValid, typedOther.statusIsValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatusIsDeleted()).compareTo(typedOther.isSetStatusIsDeleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatusIsDeleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.statusIsDeleted, typedOther.statusIsDeleted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageShortDescription()).compareTo(typedOther.isSetImageShortDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageShortDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageShortDescription, typedOther.imageShortDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageLongDescription()).compareTo(typedOther.isSetImageLongDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageLongDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageLongDescription, typedOther.imageLongDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFileSize()).compareTo(typedOther.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, typedOther.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ImageData(");
    boolean first = true;

    sb.append("uuid:");
    if (this.uuid == null) {
      sb.append("null");
    } else {
      sb.append(this.uuid);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageVersion:");
    sb.append(this.imageVersion);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageName:");
    if (this.imageName == null) {
      sb.append("null");
    } else {
      sb.append(this.imageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageCreateTime:");
    sb.append(this.imageCreateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageUpdateTime:");
    sb.append(this.imageUpdateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageOwner:");
    if (this.imageOwner == null) {
      sb.append("null");
    } else {
      sb.append(this.imageOwner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("contentOperatingSystem:");
    if (this.contentOperatingSystem == null) {
      sb.append("null");
    } else {
      sb.append(this.contentOperatingSystem);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusIsValid:");
    sb.append(this.statusIsValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusIsDeleted:");
    sb.append(this.statusIsDeleted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageShortDescription:");
    if (this.imageShortDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.imageShortDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageLongDescription:");
    if (this.imageLongDescription == null) {
      sb.append("null");
    } else {
      sb.append(this.imageLongDescription);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageDataStandardSchemeFactory implements SchemeFactory {
    public ImageDataStandardScheme getScheme() {
      return new ImageDataStandardScheme();
    }
  }

  private static class ImageDataStandardScheme extends StandardScheme<ImageData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // UUID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uuid = iprot.readString();
              struct.setUuidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IMAGE_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.imageVersion = iprot.readI32();
              struct.setImageVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageName = iprot.readString();
              struct.setImageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.imageCreateTime = iprot.readI64();
              struct.setImageCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IMAGE_UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.imageUpdateTime = iprot.readI64();
              struct.setImageUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IMAGE_OWNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageOwner = iprot.readString();
              struct.setImageOwnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CONTENT_OPERATING_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.contentOperatingSystem = iprot.readString();
              struct.setContentOperatingSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STATUS_IS_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusIsValid = iprot.readBool();
              struct.setStatusIsValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STATUS_IS_DELETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.statusIsDeleted = iprot.readBool();
              struct.setStatusIsDeletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // IMAGE_SHORT_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageShortDescription = iprot.readString();
              struct.setImageShortDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // IMAGE_LONG_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageLongDescription = iprot.readString();
              struct.setImageLongDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.uuid != null) {
        oprot.writeFieldBegin(UUID_FIELD_DESC);
        oprot.writeString(struct.uuid);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMAGE_VERSION_FIELD_DESC);
      oprot.writeI32(struct.imageVersion);
      oprot.writeFieldEnd();
      if (struct.imageName != null) {
        oprot.writeFieldBegin(IMAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.imageName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IMAGE_CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.imageCreateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IMAGE_UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.imageUpdateTime);
      oprot.writeFieldEnd();
      if (struct.imageOwner != null) {
        oprot.writeFieldBegin(IMAGE_OWNER_FIELD_DESC);
        oprot.writeString(struct.imageOwner);
        oprot.writeFieldEnd();
      }
      if (struct.contentOperatingSystem != null) {
        oprot.writeFieldBegin(CONTENT_OPERATING_SYSTEM_FIELD_DESC);
        oprot.writeString(struct.contentOperatingSystem);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(STATUS_IS_VALID_FIELD_DESC);
      oprot.writeBool(struct.statusIsValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(STATUS_IS_DELETED_FIELD_DESC);
      oprot.writeBool(struct.statusIsDeleted);
      oprot.writeFieldEnd();
      if (struct.imageShortDescription != null) {
        oprot.writeFieldBegin(IMAGE_SHORT_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.imageShortDescription);
        oprot.writeFieldEnd();
      }
      if (struct.imageLongDescription != null) {
        oprot.writeFieldBegin(IMAGE_LONG_DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.imageLongDescription);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fileSize);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageDataTupleSchemeFactory implements SchemeFactory {
    public ImageDataTupleScheme getScheme() {
      return new ImageDataTupleScheme();
    }
  }

  private static class ImageDataTupleScheme extends TupleScheme<ImageData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUuid()) {
        optionals.set(0);
      }
      if (struct.isSetImageVersion()) {
        optionals.set(1);
      }
      if (struct.isSetImageName()) {
        optionals.set(2);
      }
      if (struct.isSetImageCreateTime()) {
        optionals.set(3);
      }
      if (struct.isSetImageUpdateTime()) {
        optionals.set(4);
      }
      if (struct.isSetImageOwner()) {
        optionals.set(5);
      }
      if (struct.isSetContentOperatingSystem()) {
        optionals.set(6);
      }
      if (struct.isSetStatusIsValid()) {
        optionals.set(7);
      }
      if (struct.isSetStatusIsDeleted()) {
        optionals.set(8);
      }
      if (struct.isSetImageShortDescription()) {
        optionals.set(9);
      }
      if (struct.isSetImageLongDescription()) {
        optionals.set(10);
      }
      if (struct.isSetFileSize()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetUuid()) {
        oprot.writeString(struct.uuid);
      }
      if (struct.isSetImageVersion()) {
        oprot.writeI32(struct.imageVersion);
      }
      if (struct.isSetImageName()) {
        oprot.writeString(struct.imageName);
      }
      if (struct.isSetImageCreateTime()) {
        oprot.writeI64(struct.imageCreateTime);
      }
      if (struct.isSetImageUpdateTime()) {
        oprot.writeI64(struct.imageUpdateTime);
      }
      if (struct.isSetImageOwner()) {
        oprot.writeString(struct.imageOwner);
      }
      if (struct.isSetContentOperatingSystem()) {
        oprot.writeString(struct.contentOperatingSystem);
      }
      if (struct.isSetStatusIsValid()) {
        oprot.writeBool(struct.statusIsValid);
      }
      if (struct.isSetStatusIsDeleted()) {
        oprot.writeBool(struct.statusIsDeleted);
      }
      if (struct.isSetImageShortDescription()) {
        oprot.writeString(struct.imageShortDescription);
      }
      if (struct.isSetImageLongDescription()) {
        oprot.writeString(struct.imageLongDescription);
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.fileSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.uuid = iprot.readString();
        struct.setUuidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.imageVersion = iprot.readI32();
        struct.setImageVersionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageName = iprot.readString();
        struct.setImageNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imageCreateTime = iprot.readI64();
        struct.setImageCreateTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.imageUpdateTime = iprot.readI64();
        struct.setImageUpdateTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.imageOwner = iprot.readString();
        struct.setImageOwnerIsSet(true);
      }
      if (incoming.get(6)) {
        struct.contentOperatingSystem = iprot.readString();
        struct.setContentOperatingSystemIsSet(true);
      }
      if (incoming.get(7)) {
        struct.statusIsValid = iprot.readBool();
        struct.setStatusIsValidIsSet(true);
      }
      if (incoming.get(8)) {
        struct.statusIsDeleted = iprot.readBool();
        struct.setStatusIsDeletedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.imageShortDescription = iprot.readString();
        struct.setImageShortDescriptionIsSet(true);
      }
      if (incoming.get(10)) {
        struct.imageLongDescription = iprot.readString();
        struct.setImageLongDescriptionIsSet(true);
      }
      if (incoming.get(11)) {
        struct.fileSize = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
    }
  }

}

