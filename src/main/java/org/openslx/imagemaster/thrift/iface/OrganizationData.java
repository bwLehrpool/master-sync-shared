/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.imagemaster.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class OrganizationData implements org.apache.thrift.TBase<OrganizationData, OrganizationData._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OrganizationData");

  private static final org.apache.thrift.protocol.TField ORGANIZATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("organizationId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ECP_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("ecpUrl", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SUFFIX_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("suffixList", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OrganizationDataStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OrganizationDataTupleSchemeFactory());
  }

  public String organizationId; // required
  public String displayName; // required
  public String ecpUrl; // required
  public List<String> suffixList; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ORGANIZATION_ID((short)1, "organizationId"),
    DISPLAY_NAME((short)2, "displayName"),
    ECP_URL((short)3, "ecpUrl"),
    SUFFIX_LIST((short)4, "suffixList");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORGANIZATION_ID
          return ORGANIZATION_ID;
        case 2: // DISPLAY_NAME
          return DISPLAY_NAME;
        case 3: // ECP_URL
          return ECP_URL;
        case 4: // SUFFIX_LIST
          return SUFFIX_LIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORGANIZATION_ID, new org.apache.thrift.meta_data.FieldMetaData("organizationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("displayName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ECP_URL, new org.apache.thrift.meta_data.FieldMetaData("ecpUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUFFIX_LIST, new org.apache.thrift.meta_data.FieldMetaData("suffixList", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OrganizationData.class, metaDataMap);
  }

  public OrganizationData() {
  }

  public OrganizationData(
    String organizationId,
    String displayName,
    String ecpUrl,
    List<String> suffixList)
  {
    this();
    this.organizationId = organizationId;
    this.displayName = displayName;
    this.ecpUrl = ecpUrl;
    this.suffixList = suffixList;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OrganizationData(OrganizationData other) {
    if (other.isSetOrganizationId()) {
      this.organizationId = other.organizationId;
    }
    if (other.isSetDisplayName()) {
      this.displayName = other.displayName;
    }
    if (other.isSetEcpUrl()) {
      this.ecpUrl = other.ecpUrl;
    }
    if (other.isSetSuffixList()) {
      List<String> __this__suffixList = new ArrayList<String>();
      for (String other_element : other.suffixList) {
        __this__suffixList.add(other_element);
      }
      this.suffixList = __this__suffixList;
    }
  }

  public OrganizationData deepCopy() {
    return new OrganizationData(this);
  }

  @Override
  public void clear() {
    this.organizationId = null;
    this.displayName = null;
    this.ecpUrl = null;
    this.suffixList = null;
  }

  public String getOrganizationId() {
    return this.organizationId;
  }

  public OrganizationData setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  public void unsetOrganizationId() {
    this.organizationId = null;
  }

  /** Returns true if field organizationId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrganizationId() {
    return this.organizationId != null;
  }

  public void setOrganizationIdIsSet(boolean value) {
    if (!value) {
      this.organizationId = null;
    }
  }

  public String getDisplayName() {
    return this.displayName;
  }

  public OrganizationData setDisplayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  public void unsetDisplayName() {
    this.displayName = null;
  }

  /** Returns true if field displayName is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayName() {
    return this.displayName != null;
  }

  public void setDisplayNameIsSet(boolean value) {
    if (!value) {
      this.displayName = null;
    }
  }

  public String getEcpUrl() {
    return this.ecpUrl;
  }

  public OrganizationData setEcpUrl(String ecpUrl) {
    this.ecpUrl = ecpUrl;
    return this;
  }

  public void unsetEcpUrl() {
    this.ecpUrl = null;
  }

  /** Returns true if field ecpUrl is set (has been assigned a value) and false otherwise */
  public boolean isSetEcpUrl() {
    return this.ecpUrl != null;
  }

  public void setEcpUrlIsSet(boolean value) {
    if (!value) {
      this.ecpUrl = null;
    }
  }

  public int getSuffixListSize() {
    return (this.suffixList == null) ? 0 : this.suffixList.size();
  }

  public java.util.Iterator<String> getSuffixListIterator() {
    return (this.suffixList == null) ? null : this.suffixList.iterator();
  }

  public void addToSuffixList(String elem) {
    if (this.suffixList == null) {
      this.suffixList = new ArrayList<String>();
    }
    this.suffixList.add(elem);
  }

  public List<String> getSuffixList() {
    return this.suffixList;
  }

  public OrganizationData setSuffixList(List<String> suffixList) {
    this.suffixList = suffixList;
    return this;
  }

  public void unsetSuffixList() {
    this.suffixList = null;
  }

  /** Returns true if field suffixList is set (has been assigned a value) and false otherwise */
  public boolean isSetSuffixList() {
    return this.suffixList != null;
  }

  public void setSuffixListIsSet(boolean value) {
    if (!value) {
      this.suffixList = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ORGANIZATION_ID:
      if (value == null) {
        unsetOrganizationId();
      } else {
        setOrganizationId((String)value);
      }
      break;

    case DISPLAY_NAME:
      if (value == null) {
        unsetDisplayName();
      } else {
        setDisplayName((String)value);
      }
      break;

    case ECP_URL:
      if (value == null) {
        unsetEcpUrl();
      } else {
        setEcpUrl((String)value);
      }
      break;

    case SUFFIX_LIST:
      if (value == null) {
        unsetSuffixList();
      } else {
        setSuffixList((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ORGANIZATION_ID:
      return getOrganizationId();

    case DISPLAY_NAME:
      return getDisplayName();

    case ECP_URL:
      return getEcpUrl();

    case SUFFIX_LIST:
      return getSuffixList();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ORGANIZATION_ID:
      return isSetOrganizationId();
    case DISPLAY_NAME:
      return isSetDisplayName();
    case ECP_URL:
      return isSetEcpUrl();
    case SUFFIX_LIST:
      return isSetSuffixList();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof OrganizationData)
      return this.equals((OrganizationData)that);
    return false;
  }

  public boolean equals(OrganizationData that) {
    if (that == null)
      return false;

    boolean this_present_organizationId = true && this.isSetOrganizationId();
    boolean that_present_organizationId = true && that.isSetOrganizationId();
    if (this_present_organizationId || that_present_organizationId) {
      if (!(this_present_organizationId && that_present_organizationId))
        return false;
      if (!this.organizationId.equals(that.organizationId))
        return false;
    }

    boolean this_present_displayName = true && this.isSetDisplayName();
    boolean that_present_displayName = true && that.isSetDisplayName();
    if (this_present_displayName || that_present_displayName) {
      if (!(this_present_displayName && that_present_displayName))
        return false;
      if (!this.displayName.equals(that.displayName))
        return false;
    }

    boolean this_present_ecpUrl = true && this.isSetEcpUrl();
    boolean that_present_ecpUrl = true && that.isSetEcpUrl();
    if (this_present_ecpUrl || that_present_ecpUrl) {
      if (!(this_present_ecpUrl && that_present_ecpUrl))
        return false;
      if (!this.ecpUrl.equals(that.ecpUrl))
        return false;
    }

    boolean this_present_suffixList = true && this.isSetSuffixList();
    boolean that_present_suffixList = true && that.isSetSuffixList();
    if (this_present_suffixList || that_present_suffixList) {
      if (!(this_present_suffixList && that_present_suffixList))
        return false;
      if (!this.suffixList.equals(that.suffixList))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(OrganizationData other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    OrganizationData typedOther = (OrganizationData)other;

    lastComparison = Boolean.valueOf(isSetOrganizationId()).compareTo(typedOther.isSetOrganizationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrganizationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.organizationId, typedOther.organizationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDisplayName()).compareTo(typedOther.isSetDisplayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayName, typedOther.displayName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEcpUrl()).compareTo(typedOther.isSetEcpUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEcpUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ecpUrl, typedOther.ecpUrl);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuffixList()).compareTo(typedOther.isSetSuffixList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuffixList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.suffixList, typedOther.suffixList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("OrganizationData(");
    boolean first = true;

    sb.append("organizationId:");
    if (this.organizationId == null) {
      sb.append("null");
    } else {
      sb.append(this.organizationId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("displayName:");
    if (this.displayName == null) {
      sb.append("null");
    } else {
      sb.append(this.displayName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ecpUrl:");
    if (this.ecpUrl == null) {
      sb.append("null");
    } else {
      sb.append(this.ecpUrl);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("suffixList:");
    if (this.suffixList == null) {
      sb.append("null");
    } else {
      sb.append(this.suffixList);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OrganizationDataStandardSchemeFactory implements SchemeFactory {
    public OrganizationDataStandardScheme getScheme() {
      return new OrganizationDataStandardScheme();
    }
  }

  private static class OrganizationDataStandardScheme extends StandardScheme<OrganizationData> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OrganizationData struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORGANIZATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.organizationId = iprot.readString();
              struct.setOrganizationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DISPLAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayName = iprot.readString();
              struct.setDisplayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ECP_URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ecpUrl = iprot.readString();
              struct.setEcpUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SUFFIX_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.suffixList = new ArrayList<String>(_list0.size);
                for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                {
                  String _elem2; // required
                  _elem2 = iprot.readString();
                  struct.suffixList.add(_elem2);
                }
                iprot.readListEnd();
              }
              struct.setSuffixListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OrganizationData struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.organizationId != null) {
        oprot.writeFieldBegin(ORGANIZATION_ID_FIELD_DESC);
        oprot.writeString(struct.organizationId);
        oprot.writeFieldEnd();
      }
      if (struct.displayName != null) {
        oprot.writeFieldBegin(DISPLAY_NAME_FIELD_DESC);
        oprot.writeString(struct.displayName);
        oprot.writeFieldEnd();
      }
      if (struct.ecpUrl != null) {
        oprot.writeFieldBegin(ECP_URL_FIELD_DESC);
        oprot.writeString(struct.ecpUrl);
        oprot.writeFieldEnd();
      }
      if (struct.suffixList != null) {
        oprot.writeFieldBegin(SUFFIX_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.suffixList.size()));
          for (String _iter3 : struct.suffixList)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OrganizationDataTupleSchemeFactory implements SchemeFactory {
    public OrganizationDataTupleScheme getScheme() {
      return new OrganizationDataTupleScheme();
    }
  }

  private static class OrganizationDataTupleScheme extends TupleScheme<OrganizationData> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OrganizationData struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOrganizationId()) {
        optionals.set(0);
      }
      if (struct.isSetDisplayName()) {
        optionals.set(1);
      }
      if (struct.isSetEcpUrl()) {
        optionals.set(2);
      }
      if (struct.isSetSuffixList()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOrganizationId()) {
        oprot.writeString(struct.organizationId);
      }
      if (struct.isSetDisplayName()) {
        oprot.writeString(struct.displayName);
      }
      if (struct.isSetEcpUrl()) {
        oprot.writeString(struct.ecpUrl);
      }
      if (struct.isSetSuffixList()) {
        {
          oprot.writeI32(struct.suffixList.size());
          for (String _iter4 : struct.suffixList)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OrganizationData struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.organizationId = iprot.readString();
        struct.setOrganizationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.displayName = iprot.readString();
        struct.setDisplayNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ecpUrl = iprot.readString();
        struct.setEcpUrlIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.suffixList = new ArrayList<String>(_list5.size);
          for (int _i6 = 0; _i6 < _list5.size; ++_i6)
          {
            String _elem7; // required
            _elem7 = iprot.readString();
            struct.suffixList.add(_elem7);
          }
        }
        struct.setSuffixListIsSet(true);
      }
    }
  }

}

