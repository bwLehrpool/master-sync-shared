/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class TransferStatus implements org.apache.thrift.TBase<TransferStatus, TransferStatus._Fields>, java.io.Serializable, Cloneable, Comparable<TransferStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferStatus");

  private static final org.apache.thrift.protocol.TField BLOCK_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("blockStatus", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransferStatusStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransferStatusTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer blockStatus; // required
  /**
   * 
   * @see TransferState
   */
  public @org.apache.thrift.annotation.Nullable TransferState state; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    BLOCK_STATUS((short)1, "blockStatus"),
    /**
     * 
     * @see TransferState
     */
    STATE((short)2, "state");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLOCK_STATUS
          return BLOCK_STATUS;
        case 2: // STATE
          return STATE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLOCK_STATUS, new org.apache.thrift.meta_data.FieldMetaData("blockStatus", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TransferState.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferStatus.class, metaDataMap);
  }

  public TransferStatus() {
  }

  public TransferStatus(
    java.nio.ByteBuffer blockStatus,
    TransferState state)
  {
    this();
    this.blockStatus = org.apache.thrift.TBaseHelper.copyBinary(blockStatus);
    this.state = state;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransferStatus(TransferStatus other) {
    if (other.isSetBlockStatus()) {
      this.blockStatus = org.apache.thrift.TBaseHelper.copyBinary(other.blockStatus);
    }
    if (other.isSetState()) {
      this.state = other.state;
    }
  }

  public TransferStatus deepCopy() {
    return new TransferStatus(this);
  }

  @Override
  public void clear() {
    this.blockStatus = null;
    this.state = null;
  }

  public byte[] getBlockStatus() {
    setBlockStatus(org.apache.thrift.TBaseHelper.rightSize(blockStatus));
    return blockStatus == null ? null : blockStatus.array();
  }

  public java.nio.ByteBuffer bufferForBlockStatus() {
    return org.apache.thrift.TBaseHelper.copyBinary(blockStatus);
  }

  public TransferStatus setBlockStatus(byte[] blockStatus) {
    this.blockStatus = blockStatus == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(blockStatus.clone());
    return this;
  }

  public TransferStatus setBlockStatus(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer blockStatus) {
    this.blockStatus = org.apache.thrift.TBaseHelper.copyBinary(blockStatus);
    return this;
  }

  public void unsetBlockStatus() {
    this.blockStatus = null;
  }

  /** Returns true if field blockStatus is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockStatus() {
    return this.blockStatus != null;
  }

  public void setBlockStatusIsSet(boolean value) {
    if (!value) {
      this.blockStatus = null;
    }
  }

  /**
   * 
   * @see TransferState
   */
  @org.apache.thrift.annotation.Nullable
  public TransferState getState() {
    return this.state;
  }

  /**
   * 
   * @see TransferState
   */
  public TransferStatus setState(@org.apache.thrift.annotation.Nullable TransferState state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case BLOCK_STATUS:
      if (value == null) {
        unsetBlockStatus();
      } else {
        if (value instanceof byte[]) {
          setBlockStatus((byte[])value);
        } else {
          setBlockStatus((java.nio.ByteBuffer)value);
        }
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((TransferState)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BLOCK_STATUS:
      return getBlockStatus();

    case STATE:
      return getState();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BLOCK_STATUS:
      return isSetBlockStatus();
    case STATE:
      return isSetState();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TransferStatus)
      return this.equals((TransferStatus)that);
    return false;
  }

  public boolean equals(TransferStatus that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_blockStatus = true && this.isSetBlockStatus();
    boolean that_present_blockStatus = true && that.isSetBlockStatus();
    if (this_present_blockStatus || that_present_blockStatus) {
      if (!(this_present_blockStatus && that_present_blockStatus))
        return false;
      if (!this.blockStatus.equals(that.blockStatus))
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBlockStatus()) ? 131071 : 524287);
    if (isSetBlockStatus())
      hashCode = hashCode * 8191 + blockStatus.hashCode();

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TransferStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetBlockStatus(), other.isSetBlockStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockStatus, other.blockStatus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TransferStatus(");
    boolean first = true;

    sb.append("blockStatus:");
    if (this.blockStatus == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.blockStatus, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransferStatusStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransferStatusStandardScheme getScheme() {
      return new TransferStatusStandardScheme();
    }
  }

  private static class TransferStatusStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransferStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransferStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLOCK_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blockStatus = iprot.readBinary();
              struct.setBlockStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.state = org.openslx.bwlp.thrift.iface.TransferState.findByValue(iprot.readI32());
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransferStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.blockStatus != null) {
        oprot.writeFieldBegin(BLOCK_STATUS_FIELD_DESC);
        oprot.writeBinary(struct.blockStatus);
        oprot.writeFieldEnd();
      }
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransferStatusTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransferStatusTupleScheme getScheme() {
      return new TransferStatusTupleScheme();
    }
  }

  private static class TransferStatusTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransferStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransferStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBlockStatus()) {
        optionals.set(0);
      }
      if (struct.isSetState()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetBlockStatus()) {
        oprot.writeBinary(struct.blockStatus);
      }
      if (struct.isSetState()) {
        oprot.writeI32(struct.state.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransferStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.blockStatus = iprot.readBinary();
        struct.setBlockStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.state = org.openslx.bwlp.thrift.iface.TransferState.findByValue(iprot.readI32());
        struct.setStateIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

