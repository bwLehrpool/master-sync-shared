/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class Location implements org.apache.thrift.TBase<Location, Location._Fields>, java.io.Serializable, Cloneable, Comparable<Location> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Location");

  private static final org.apache.thrift.protocol.TField LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("locationId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField LOCATION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("locationName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_LOCATION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parentLocationId", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LocationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LocationTupleSchemeFactory();

  public int locationId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String locationName; // required
  public int parentLocationId; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LOCATION_ID((short)1, "locationId"),
    LOCATION_NAME((short)2, "locationName"),
    PARENT_LOCATION_ID((short)3, "parentLocationId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LOCATION_ID
          return LOCATION_ID;
        case 2: // LOCATION_NAME
          return LOCATION_NAME;
        case 3: // PARENT_LOCATION_ID
          return PARENT_LOCATION_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOCATIONID_ISSET_ID = 0;
  private static final int __PARENTLOCATIONID_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("locationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCATION_NAME, new org.apache.thrift.meta_data.FieldMetaData("locationName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PARENT_LOCATION_ID, new org.apache.thrift.meta_data.FieldMetaData("parentLocationId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Location.class, metaDataMap);
  }

  public Location() {
  }

  public Location(
    int locationId,
    java.lang.String locationName,
    int parentLocationId)
  {
    this();
    this.locationId = locationId;
    setLocationIdIsSet(true);
    this.locationName = locationName;
    this.parentLocationId = parentLocationId;
    setParentLocationIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Location(Location other) {
    __isset_bitfield = other.__isset_bitfield;
    this.locationId = other.locationId;
    if (other.isSetLocationName()) {
      this.locationName = other.locationName;
    }
    this.parentLocationId = other.parentLocationId;
  }

  public Location deepCopy() {
    return new Location(this);
  }

  @Override
  public void clear() {
    setLocationIdIsSet(false);
    this.locationId = 0;
    this.locationName = null;
    setParentLocationIdIsSet(false);
    this.parentLocationId = 0;
  }

  public int getLocationId() {
    return this.locationId;
  }

  public Location setLocationId(int locationId) {
    this.locationId = locationId;
    setLocationIdIsSet(true);
    return this;
  }

  public void unsetLocationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  /** Returns true if field locationId is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCATIONID_ISSET_ID);
  }

  public void setLocationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCATIONID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLocationName() {
    return this.locationName;
  }

  public Location setLocationName(@org.apache.thrift.annotation.Nullable java.lang.String locationName) {
    this.locationName = locationName;
    return this;
  }

  public void unsetLocationName() {
    this.locationName = null;
  }

  /** Returns true if field locationName is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationName() {
    return this.locationName != null;
  }

  public void setLocationNameIsSet(boolean value) {
    if (!value) {
      this.locationName = null;
    }
  }

  public int getParentLocationId() {
    return this.parentLocationId;
  }

  public Location setParentLocationId(int parentLocationId) {
    this.parentLocationId = parentLocationId;
    setParentLocationIdIsSet(true);
    return this;
  }

  public void unsetParentLocationId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENTLOCATIONID_ISSET_ID);
  }

  /** Returns true if field parentLocationId is set (has been assigned a value) and false otherwise */
  public boolean isSetParentLocationId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENTLOCATIONID_ISSET_ID);
  }

  public void setParentLocationIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENTLOCATIONID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LOCATION_ID:
      if (value == null) {
        unsetLocationId();
      } else {
        setLocationId((java.lang.Integer)value);
      }
      break;

    case LOCATION_NAME:
      if (value == null) {
        unsetLocationName();
      } else {
        setLocationName((java.lang.String)value);
      }
      break;

    case PARENT_LOCATION_ID:
      if (value == null) {
        unsetParentLocationId();
      } else {
        setParentLocationId((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LOCATION_ID:
      return getLocationId();

    case LOCATION_NAME:
      return getLocationName();

    case PARENT_LOCATION_ID:
      return getParentLocationId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LOCATION_ID:
      return isSetLocationId();
    case LOCATION_NAME:
      return isSetLocationName();
    case PARENT_LOCATION_ID:
      return isSetParentLocationId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Location)
      return this.equals((Location)that);
    return false;
  }

  public boolean equals(Location that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_locationId = true;
    boolean that_present_locationId = true;
    if (this_present_locationId || that_present_locationId) {
      if (!(this_present_locationId && that_present_locationId))
        return false;
      if (this.locationId != that.locationId)
        return false;
    }

    boolean this_present_locationName = true && this.isSetLocationName();
    boolean that_present_locationName = true && that.isSetLocationName();
    if (this_present_locationName || that_present_locationName) {
      if (!(this_present_locationName && that_present_locationName))
        return false;
      if (!this.locationName.equals(that.locationName))
        return false;
    }

    boolean this_present_parentLocationId = true;
    boolean that_present_parentLocationId = true;
    if (this_present_parentLocationId || that_present_parentLocationId) {
      if (!(this_present_parentLocationId && that_present_parentLocationId))
        return false;
      if (this.parentLocationId != that.parentLocationId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + locationId;

    hashCode = hashCode * 8191 + ((isSetLocationName()) ? 131071 : 524287);
    if (isSetLocationName())
      hashCode = hashCode * 8191 + locationName.hashCode();

    hashCode = hashCode * 8191 + parentLocationId;

    return hashCode;
  }

  @Override
  public int compareTo(Location other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLocationId(), other.isSetLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationId, other.locationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocationName(), other.isSetLocationName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationName, other.locationName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetParentLocationId(), other.isSetParentLocationId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParentLocationId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parentLocationId, other.parentLocationId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Location(");
    boolean first = true;

    sb.append("locationId:");
    sb.append(this.locationId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("locationName:");
    if (this.locationName == null) {
      sb.append("null");
    } else {
      sb.append(this.locationName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("parentLocationId:");
    sb.append(this.parentLocationId);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LocationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LocationStandardScheme getScheme() {
      return new LocationStandardScheme();
    }
  }

  private static class LocationStandardScheme extends org.apache.thrift.scheme.StandardScheme<Location> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Location struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.locationId = iprot.readI32();
              struct.setLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOCATION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.locationName = iprot.readString();
              struct.setLocationNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_LOCATION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.parentLocationId = iprot.readI32();
              struct.setParentLocationIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Location struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(LOCATION_ID_FIELD_DESC);
      oprot.writeI32(struct.locationId);
      oprot.writeFieldEnd();
      if (struct.locationName != null) {
        oprot.writeFieldBegin(LOCATION_NAME_FIELD_DESC);
        oprot.writeString(struct.locationName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PARENT_LOCATION_ID_FIELD_DESC);
      oprot.writeI32(struct.parentLocationId);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LocationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LocationTupleScheme getScheme() {
      return new LocationTupleScheme();
    }
  }

  private static class LocationTupleScheme extends org.apache.thrift.scheme.TupleScheme<Location> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Location struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLocationId()) {
        optionals.set(0);
      }
      if (struct.isSetLocationName()) {
        optionals.set(1);
      }
      if (struct.isSetParentLocationId()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetLocationId()) {
        oprot.writeI32(struct.locationId);
      }
      if (struct.isSetLocationName()) {
        oprot.writeString(struct.locationName);
      }
      if (struct.isSetParentLocationId()) {
        oprot.writeI32(struct.parentLocationId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Location struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.locationId = iprot.readI32();
        struct.setLocationIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.locationName = iprot.readString();
        struct.setLocationNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parentLocationId = iprot.readI32();
        struct.setParentLocationIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

