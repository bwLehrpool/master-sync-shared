/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class NetShare implements org.apache.thrift.TBase<NetShare, NetShare._Fields>, java.io.Serializable, Cloneable, Comparable<NetShare> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NetShare");

  private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("path", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DISPLAYNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("displayname", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MOUNTPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("mountpoint", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("password", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHARE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shareId", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new NetShareStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new NetShareTupleSchemeFactory();

  /**
   * 
   * @see NetShareAuth
   */
  public @org.apache.thrift.annotation.Nullable NetShareAuth auth; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String path; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String displayname; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String mountpoint; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String username; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String password; // optional
  public int shareId; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 
     * @see NetShareAuth
     */
    AUTH((short)4, "auth"),
    PATH((short)1, "path"),
    DISPLAYNAME((short)5, "displayname"),
    MOUNTPOINT((short)6, "mountpoint"),
    USERNAME((short)2, "username"),
    PASSWORD((short)3, "password"),
    SHARE_ID((short)7, "shareId");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 4: // AUTH
          return AUTH;
        case 1: // PATH
          return PATH;
        case 5: // DISPLAYNAME
          return DISPLAYNAME;
        case 6: // MOUNTPOINT
          return MOUNTPOINT;
        case 2: // USERNAME
          return USERNAME;
        case 3: // PASSWORD
          return PASSWORD;
        case 7: // SHARE_ID
          return SHARE_ID;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SHAREID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DISPLAYNAME,_Fields.MOUNTPOINT,_Fields.USERNAME,_Fields.PASSWORD,_Fields.SHARE_ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, NetShareAuth.class)));
    tmpMap.put(_Fields.PATH, new org.apache.thrift.meta_data.FieldMetaData("path", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DISPLAYNAME, new org.apache.thrift.meta_data.FieldMetaData("displayname", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MOUNTPOINT, new org.apache.thrift.meta_data.FieldMetaData("mountpoint", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("password", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARE_ID, new org.apache.thrift.meta_data.FieldMetaData("shareId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NetShare.class, metaDataMap);
  }

  public NetShare() {
  }

  public NetShare(
    NetShareAuth auth,
    java.lang.String path)
  {
    this();
    this.auth = auth;
    this.path = path;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NetShare(NetShare other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAuth()) {
      this.auth = other.auth;
    }
    if (other.isSetPath()) {
      this.path = other.path;
    }
    if (other.isSetDisplayname()) {
      this.displayname = other.displayname;
    }
    if (other.isSetMountpoint()) {
      this.mountpoint = other.mountpoint;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetPassword()) {
      this.password = other.password;
    }
    this.shareId = other.shareId;
  }

  public NetShare deepCopy() {
    return new NetShare(this);
  }

  @Override
  public void clear() {
    this.auth = null;
    this.path = null;
    this.displayname = null;
    this.mountpoint = null;
    this.username = null;
    this.password = null;
    setShareIdIsSet(false);
    this.shareId = 0;
  }

  /**
   * 
   * @see NetShareAuth
   */
  @org.apache.thrift.annotation.Nullable
  public NetShareAuth getAuth() {
    return this.auth;
  }

  /**
   * 
   * @see NetShareAuth
   */
  public NetShare setAuth(@org.apache.thrift.annotation.Nullable NetShareAuth auth) {
    this.auth = auth;
    return this;
  }

  public void unsetAuth() {
    this.auth = null;
  }

  /** Returns true if field auth is set (has been assigned a value) and false otherwise */
  public boolean isSetAuth() {
    return this.auth != null;
  }

  public void setAuthIsSet(boolean value) {
    if (!value) {
      this.auth = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPath() {
    return this.path;
  }

  public NetShare setPath(@org.apache.thrift.annotation.Nullable java.lang.String path) {
    this.path = path;
    return this;
  }

  public void unsetPath() {
    this.path = null;
  }

  /** Returns true if field path is set (has been assigned a value) and false otherwise */
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDisplayname() {
    return this.displayname;
  }

  public NetShare setDisplayname(@org.apache.thrift.annotation.Nullable java.lang.String displayname) {
    this.displayname = displayname;
    return this;
  }

  public void unsetDisplayname() {
    this.displayname = null;
  }

  /** Returns true if field displayname is set (has been assigned a value) and false otherwise */
  public boolean isSetDisplayname() {
    return this.displayname != null;
  }

  public void setDisplaynameIsSet(boolean value) {
    if (!value) {
      this.displayname = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getMountpoint() {
    return this.mountpoint;
  }

  public NetShare setMountpoint(@org.apache.thrift.annotation.Nullable java.lang.String mountpoint) {
    this.mountpoint = mountpoint;
    return this;
  }

  public void unsetMountpoint() {
    this.mountpoint = null;
  }

  /** Returns true if field mountpoint is set (has been assigned a value) and false otherwise */
  public boolean isSetMountpoint() {
    return this.mountpoint != null;
  }

  public void setMountpointIsSet(boolean value) {
    if (!value) {
      this.mountpoint = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public NetShare setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getPassword() {
    return this.password;
  }

  public NetShare setPassword(@org.apache.thrift.annotation.Nullable java.lang.String password) {
    this.password = password;
    return this;
  }

  public void unsetPassword() {
    this.password = null;
  }

  /** Returns true if field password is set (has been assigned a value) and false otherwise */
  public boolean isSetPassword() {
    return this.password != null;
  }

  public void setPasswordIsSet(boolean value) {
    if (!value) {
      this.password = null;
    }
  }

  public int getShareId() {
    return this.shareId;
  }

  public NetShare setShareId(int shareId) {
    this.shareId = shareId;
    setShareIdIsSet(true);
    return this;
  }

  public void unsetShareId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHAREID_ISSET_ID);
  }

  /** Returns true if field shareId is set (has been assigned a value) and false otherwise */
  public boolean isSetShareId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHAREID_ISSET_ID);
  }

  public void setShareIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHAREID_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case AUTH:
      if (value == null) {
        unsetAuth();
      } else {
        setAuth((NetShareAuth)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((java.lang.String)value);
      }
      break;

    case DISPLAYNAME:
      if (value == null) {
        unsetDisplayname();
      } else {
        setDisplayname((java.lang.String)value);
      }
      break;

    case MOUNTPOINT:
      if (value == null) {
        unsetMountpoint();
      } else {
        setMountpoint((java.lang.String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case PASSWORD:
      if (value == null) {
        unsetPassword();
      } else {
        setPassword((java.lang.String)value);
      }
      break;

    case SHARE_ID:
      if (value == null) {
        unsetShareId();
      } else {
        setShareId((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case AUTH:
      return getAuth();

    case PATH:
      return getPath();

    case DISPLAYNAME:
      return getDisplayname();

    case MOUNTPOINT:
      return getMountpoint();

    case USERNAME:
      return getUsername();

    case PASSWORD:
      return getPassword();

    case SHARE_ID:
      return getShareId();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case AUTH:
      return isSetAuth();
    case PATH:
      return isSetPath();
    case DISPLAYNAME:
      return isSetDisplayname();
    case MOUNTPOINT:
      return isSetMountpoint();
    case USERNAME:
      return isSetUsername();
    case PASSWORD:
      return isSetPassword();
    case SHARE_ID:
      return isSetShareId();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof NetShare)
      return this.equals((NetShare)that);
    return false;
  }

  public boolean equals(NetShare that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_auth = true && this.isSetAuth();
    boolean that_present_auth = true && that.isSetAuth();
    if (this_present_auth || that_present_auth) {
      if (!(this_present_auth && that_present_auth))
        return false;
      if (!this.auth.equals(that.auth))
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_displayname = true && this.isSetDisplayname();
    boolean that_present_displayname = true && that.isSetDisplayname();
    if (this_present_displayname || that_present_displayname) {
      if (!(this_present_displayname && that_present_displayname))
        return false;
      if (!this.displayname.equals(that.displayname))
        return false;
    }

    boolean this_present_mountpoint = true && this.isSetMountpoint();
    boolean that_present_mountpoint = true && that.isSetMountpoint();
    if (this_present_mountpoint || that_present_mountpoint) {
      if (!(this_present_mountpoint && that_present_mountpoint))
        return false;
      if (!this.mountpoint.equals(that.mountpoint))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_password = true && this.isSetPassword();
    boolean that_present_password = true && that.isSetPassword();
    if (this_present_password || that_present_password) {
      if (!(this_present_password && that_present_password))
        return false;
      if (!this.password.equals(that.password))
        return false;
    }

    boolean this_present_shareId = true && this.isSetShareId();
    boolean that_present_shareId = true && that.isSetShareId();
    if (this_present_shareId || that_present_shareId) {
      if (!(this_present_shareId && that_present_shareId))
        return false;
      if (this.shareId != that.shareId)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
    if (isSetAuth())
      hashCode = hashCode * 8191 + auth.getValue();

    hashCode = hashCode * 8191 + ((isSetPath()) ? 131071 : 524287);
    if (isSetPath())
      hashCode = hashCode * 8191 + path.hashCode();

    hashCode = hashCode * 8191 + ((isSetDisplayname()) ? 131071 : 524287);
    if (isSetDisplayname())
      hashCode = hashCode * 8191 + displayname.hashCode();

    hashCode = hashCode * 8191 + ((isSetMountpoint()) ? 131071 : 524287);
    if (isSetMountpoint())
      hashCode = hashCode * 8191 + mountpoint.hashCode();

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassword()) ? 131071 : 524287);
    if (isSetPassword())
      hashCode = hashCode * 8191 + password.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareId()) ? 131071 : 524287);
    if (isSetShareId())
      hashCode = hashCode * 8191 + shareId;

    return hashCode;
  }

  @Override
  public int compareTo(NetShare other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetAuth(), other.isSetAuth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAuth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPath(), other.isSetPath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path, other.path);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDisplayname(), other.isSetDisplayname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDisplayname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.displayname, other.displayname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMountpoint(), other.isSetMountpoint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMountpoint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mountpoint, other.mountpoint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPassword(), other.isSetPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.password, other.password);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShareId(), other.isSetShareId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareId, other.shareId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("NetShare(");
    boolean first = true;

    sb.append("auth:");
    if (this.auth == null) {
      sb.append("null");
    } else {
      sb.append(this.auth);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (isSetDisplayname()) {
      if (!first) sb.append(", ");
      sb.append("displayname:");
      if (this.displayname == null) {
        sb.append("null");
      } else {
        sb.append(this.displayname);
      }
      first = false;
    }
    if (isSetMountpoint()) {
      if (!first) sb.append(", ");
      sb.append("mountpoint:");
      if (this.mountpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.mountpoint);
      }
      first = false;
    }
    if (isSetUsername()) {
      if (!first) sb.append(", ");
      sb.append("username:");
      if (this.username == null) {
        sb.append("null");
      } else {
        sb.append(this.username);
      }
      first = false;
    }
    if (isSetPassword()) {
      if (!first) sb.append(", ");
      sb.append("password:");
      if (this.password == null) {
        sb.append("null");
      } else {
        sb.append(this.password);
      }
      first = false;
    }
    if (isSetShareId()) {
      if (!first) sb.append(", ");
      sb.append("shareId:");
      sb.append(this.shareId);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NetShareStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NetShareStandardScheme getScheme() {
      return new NetShareStandardScheme();
    }
  }

  private static class NetShareStandardScheme extends org.apache.thrift.scheme.StandardScheme<NetShare> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NetShare struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 4: // AUTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.auth = org.openslx.bwlp.thrift.iface.NetShareAuth.findByValue(iprot.readI32());
              struct.setAuthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 1: // PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.path = iprot.readString();
              struct.setPathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DISPLAYNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.displayname = iprot.readString();
              struct.setDisplaynameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MOUNTPOINT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mountpoint = iprot.readString();
              struct.setMountpointIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.password = iprot.readString();
              struct.setPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareId = iprot.readI32();
              struct.setShareIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NetShare struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.path != null) {
        oprot.writeFieldBegin(PATH_FIELD_DESC);
        oprot.writeString(struct.path);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        if (struct.isSetUsername()) {
          oprot.writeFieldBegin(USERNAME_FIELD_DESC);
          oprot.writeString(struct.username);
          oprot.writeFieldEnd();
        }
      }
      if (struct.password != null) {
        if (struct.isSetPassword()) {
          oprot.writeFieldBegin(PASSWORD_FIELD_DESC);
          oprot.writeString(struct.password);
          oprot.writeFieldEnd();
        }
      }
      if (struct.auth != null) {
        oprot.writeFieldBegin(AUTH_FIELD_DESC);
        oprot.writeI32(struct.auth.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.displayname != null) {
        if (struct.isSetDisplayname()) {
          oprot.writeFieldBegin(DISPLAYNAME_FIELD_DESC);
          oprot.writeString(struct.displayname);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mountpoint != null) {
        if (struct.isSetMountpoint()) {
          oprot.writeFieldBegin(MOUNTPOINT_FIELD_DESC);
          oprot.writeString(struct.mountpoint);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetShareId()) {
        oprot.writeFieldBegin(SHARE_ID_FIELD_DESC);
        oprot.writeI32(struct.shareId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NetShareTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public NetShareTupleScheme getScheme() {
      return new NetShareTupleScheme();
    }
  }

  private static class NetShareTupleScheme extends org.apache.thrift.scheme.TupleScheme<NetShare> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NetShare struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAuth()) {
        optionals.set(0);
      }
      if (struct.isSetPath()) {
        optionals.set(1);
      }
      if (struct.isSetDisplayname()) {
        optionals.set(2);
      }
      if (struct.isSetMountpoint()) {
        optionals.set(3);
      }
      if (struct.isSetUsername()) {
        optionals.set(4);
      }
      if (struct.isSetPassword()) {
        optionals.set(5);
      }
      if (struct.isSetShareId()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetAuth()) {
        oprot.writeI32(struct.auth.getValue());
      }
      if (struct.isSetPath()) {
        oprot.writeString(struct.path);
      }
      if (struct.isSetDisplayname()) {
        oprot.writeString(struct.displayname);
      }
      if (struct.isSetMountpoint()) {
        oprot.writeString(struct.mountpoint);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
      if (struct.isSetPassword()) {
        oprot.writeString(struct.password);
      }
      if (struct.isSetShareId()) {
        oprot.writeI32(struct.shareId);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NetShare struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.auth = org.openslx.bwlp.thrift.iface.NetShareAuth.findByValue(iprot.readI32());
        struct.setAuthIsSet(true);
      }
      if (incoming.get(1)) {
        struct.path = iprot.readString();
        struct.setPathIsSet(true);
      }
      if (incoming.get(2)) {
        struct.displayname = iprot.readString();
        struct.setDisplaynameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.mountpoint = iprot.readString();
        struct.setMountpointIsSet(true);
      }
      if (incoming.get(4)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.password = iprot.readString();
        struct.setPasswordIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shareId = iprot.readI32();
        struct.setShareIdIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

