/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class ImageDetailsRead implements org.apache.thrift.TBase<ImageDetailsRead, ImageDetailsRead._Fields>, java.io.Serializable, Cloneable, Comparable<ImageDetailsRead> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageDetailsRead");

  private static final org.apache.thrift.protocol.TField IMAGE_BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageBaseId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LATEST_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("latestVersionId", org.apache.thrift.protocol.TType.STRING, (short)17);
  private static final org.apache.thrift.protocol.TField VERSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("versions", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("imageName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("tags", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField OS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("osId", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField VIRT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField UPDATER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("updaterId", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField SHARE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareMode", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField IS_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("isTemplate", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField DEFAULT_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)16);
  private static final org.apache.thrift.protocol.TField USER_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageDetailsReadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageDetailsReadTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String imageBaseId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String latestVersionId; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<ImageVersionDetails> versions; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String imageName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tags; // required
  public int osId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String virtId; // required
  public long createTime; // required
  public long updateTime; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ownerId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String updaterId; // required
  /**
   * 
   * @see ShareMode
   */
  public @org.apache.thrift.annotation.Nullable ShareMode shareMode; // required
  public boolean isTemplate; // required
  public @org.apache.thrift.annotation.Nullable ImagePermissions defaultPermissions; // required
  public @org.apache.thrift.annotation.Nullable ImagePermissions userPermissions; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMAGE_BASE_ID((short)1, "imageBaseId"),
    LATEST_VERSION_ID((short)17, "latestVersionId"),
    VERSIONS((short)3, "versions"),
    IMAGE_NAME((short)4, "imageName"),
    DESCRIPTION((short)5, "description"),
    TAGS((short)6, "tags"),
    OS_ID((short)8, "osId"),
    VIRT_ID((short)9, "virtId"),
    CREATE_TIME((short)10, "createTime"),
    UPDATE_TIME((short)11, "updateTime"),
    OWNER_ID((short)12, "ownerId"),
    UPDATER_ID((short)13, "updaterId"),
    /**
     * 
     * @see ShareMode
     */
    SHARE_MODE((short)14, "shareMode"),
    IS_TEMPLATE((short)15, "isTemplate"),
    DEFAULT_PERMISSIONS((short)16, "defaultPermissions"),
    USER_PERMISSIONS((short)18, "userPermissions");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMAGE_BASE_ID
          return IMAGE_BASE_ID;
        case 17: // LATEST_VERSION_ID
          return LATEST_VERSION_ID;
        case 3: // VERSIONS
          return VERSIONS;
        case 4: // IMAGE_NAME
          return IMAGE_NAME;
        case 5: // DESCRIPTION
          return DESCRIPTION;
        case 6: // TAGS
          return TAGS;
        case 8: // OS_ID
          return OS_ID;
        case 9: // VIRT_ID
          return VIRT_ID;
        case 10: // CREATE_TIME
          return CREATE_TIME;
        case 11: // UPDATE_TIME
          return UPDATE_TIME;
        case 12: // OWNER_ID
          return OWNER_ID;
        case 13: // UPDATER_ID
          return UPDATER_ID;
        case 14: // SHARE_MODE
          return SHARE_MODE;
        case 15: // IS_TEMPLATE
          return IS_TEMPLATE;
        case 16: // DEFAULT_PERMISSIONS
          return DEFAULT_PERMISSIONS;
        case 18: // USER_PERMISSIONS
          return USER_PERMISSIONS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OSID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __ISTEMPLATE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_PERMISSIONS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMAGE_BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("imageBaseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.LATEST_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("latestVersionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.VERSIONS, new org.apache.thrift.meta_data.FieldMetaData("versions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImageVersionDetails.class))));
    tmpMap.put(_Fields.IMAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("imageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TAGS, new org.apache.thrift.meta_data.FieldMetaData("tags", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.OS_ID, new org.apache.thrift.meta_data.FieldMetaData("osId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIRT_ID, new org.apache.thrift.meta_data.FieldMetaData("virtId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.UPDATER_ID, new org.apache.thrift.meta_data.FieldMetaData("updaterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.SHARE_MODE, new org.apache.thrift.meta_data.FieldMetaData("shareMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ShareMode.class)));
    tmpMap.put(_Fields.IS_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("isTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("defaultPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePermissions.class)));
    tmpMap.put(_Fields.USER_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("userPermissions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePermissions.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageDetailsRead.class, metaDataMap);
  }

  public ImageDetailsRead() {
  }

  public ImageDetailsRead(
    java.lang.String imageBaseId,
    java.lang.String latestVersionId,
    java.util.List<ImageVersionDetails> versions,
    java.lang.String imageName,
    java.lang.String description,
    java.util.List<java.lang.String> tags,
    int osId,
    java.lang.String virtId,
    long createTime,
    long updateTime,
    java.lang.String ownerId,
    java.lang.String updaterId,
    ShareMode shareMode,
    boolean isTemplate,
    ImagePermissions defaultPermissions)
  {
    this();
    this.imageBaseId = imageBaseId;
    this.latestVersionId = latestVersionId;
    this.versions = versions;
    this.imageName = imageName;
    this.description = description;
    this.tags = tags;
    this.osId = osId;
    setOsIdIsSet(true);
    this.virtId = virtId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.ownerId = ownerId;
    this.updaterId = updaterId;
    this.shareMode = shareMode;
    this.isTemplate = isTemplate;
    setIsTemplateIsSet(true);
    this.defaultPermissions = defaultPermissions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageDetailsRead(ImageDetailsRead other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImageBaseId()) {
      this.imageBaseId = other.imageBaseId;
    }
    if (other.isSetLatestVersionId()) {
      this.latestVersionId = other.latestVersionId;
    }
    if (other.isSetVersions()) {
      java.util.List<ImageVersionDetails> __this__versions = new java.util.ArrayList<ImageVersionDetails>(other.versions.size());
      for (ImageVersionDetails other_element : other.versions) {
        __this__versions.add(new ImageVersionDetails(other_element));
      }
      this.versions = __this__versions;
    }
    if (other.isSetImageName()) {
      this.imageName = other.imageName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetTags()) {
      java.util.List<java.lang.String> __this__tags = new java.util.ArrayList<java.lang.String>(other.tags);
      this.tags = __this__tags;
    }
    this.osId = other.osId;
    if (other.isSetVirtId()) {
      this.virtId = other.virtId;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    if (other.isSetOwnerId()) {
      this.ownerId = other.ownerId;
    }
    if (other.isSetUpdaterId()) {
      this.updaterId = other.updaterId;
    }
    if (other.isSetShareMode()) {
      this.shareMode = other.shareMode;
    }
    this.isTemplate = other.isTemplate;
    if (other.isSetDefaultPermissions()) {
      this.defaultPermissions = new ImagePermissions(other.defaultPermissions);
    }
    if (other.isSetUserPermissions()) {
      this.userPermissions = new ImagePermissions(other.userPermissions);
    }
  }

  public ImageDetailsRead deepCopy() {
    return new ImageDetailsRead(this);
  }

  @Override
  public void clear() {
    this.imageBaseId = null;
    this.latestVersionId = null;
    this.versions = null;
    this.imageName = null;
    this.description = null;
    this.tags = null;
    setOsIdIsSet(false);
    this.osId = 0;
    this.virtId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    this.ownerId = null;
    this.updaterId = null;
    this.shareMode = null;
    setIsTemplateIsSet(false);
    this.isTemplate = false;
    this.defaultPermissions = null;
    this.userPermissions = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageBaseId() {
    return this.imageBaseId;
  }

  public ImageDetailsRead setImageBaseId(@org.apache.thrift.annotation.Nullable java.lang.String imageBaseId) {
    this.imageBaseId = imageBaseId;
    return this;
  }

  public void unsetImageBaseId() {
    this.imageBaseId = null;
  }

  /** Returns true if field imageBaseId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageBaseId() {
    return this.imageBaseId != null;
  }

  public void setImageBaseIdIsSet(boolean value) {
    if (!value) {
      this.imageBaseId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLatestVersionId() {
    return this.latestVersionId;
  }

  public ImageDetailsRead setLatestVersionId(@org.apache.thrift.annotation.Nullable java.lang.String latestVersionId) {
    this.latestVersionId = latestVersionId;
    return this;
  }

  public void unsetLatestVersionId() {
    this.latestVersionId = null;
  }

  /** Returns true if field latestVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestVersionId() {
    return this.latestVersionId != null;
  }

  public void setLatestVersionIdIsSet(boolean value) {
    if (!value) {
      this.latestVersionId = null;
    }
  }

  public int getVersionsSize() {
    return (this.versions == null) ? 0 : this.versions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<ImageVersionDetails> getVersionsIterator() {
    return (this.versions == null) ? null : this.versions.iterator();
  }

  public void addToVersions(ImageVersionDetails elem) {
    if (this.versions == null) {
      this.versions = new java.util.ArrayList<ImageVersionDetails>();
    }
    this.versions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<ImageVersionDetails> getVersions() {
    return this.versions;
  }

  public ImageDetailsRead setVersions(@org.apache.thrift.annotation.Nullable java.util.List<ImageVersionDetails> versions) {
    this.versions = versions;
    return this;
  }

  public void unsetVersions() {
    this.versions = null;
  }

  /** Returns true if field versions is set (has been assigned a value) and false otherwise */
  public boolean isSetVersions() {
    return this.versions != null;
  }

  public void setVersionsIsSet(boolean value) {
    if (!value) {
      this.versions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageName() {
    return this.imageName;
  }

  public ImageDetailsRead setImageName(@org.apache.thrift.annotation.Nullable java.lang.String imageName) {
    this.imageName = imageName;
    return this;
  }

  public void unsetImageName() {
    this.imageName = null;
  }

  /** Returns true if field imageName is set (has been assigned a value) and false otherwise */
  public boolean isSetImageName() {
    return this.imageName != null;
  }

  public void setImageNameIsSet(boolean value) {
    if (!value) {
      this.imageName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public ImageDetailsRead setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getTagsIterator() {
    return (this.tags == null) ? null : this.tags.iterator();
  }

  public void addToTags(java.lang.String elem) {
    if (this.tags == null) {
      this.tags = new java.util.ArrayList<java.lang.String>();
    }
    this.tags.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getTags() {
    return this.tags;
  }

  public ImageDetailsRead setTags(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> tags) {
    this.tags = tags;
    return this;
  }

  public void unsetTags() {
    this.tags = null;
  }

  /** Returns true if field tags is set (has been assigned a value) and false otherwise */
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getOsId() {
    return this.osId;
  }

  public ImageDetailsRead setOsId(int osId) {
    this.osId = osId;
    setOsIdIsSet(true);
    return this;
  }

  public void unsetOsId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  /** Returns true if field osId is set (has been assigned a value) and false otherwise */
  public boolean isSetOsId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  public void setOsIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OSID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVirtId() {
    return this.virtId;
  }

  public ImageDetailsRead setVirtId(@org.apache.thrift.annotation.Nullable java.lang.String virtId) {
    this.virtId = virtId;
    return this;
  }

  public void unsetVirtId() {
    this.virtId = null;
  }

  /** Returns true if field virtId is set (has been assigned a value) and false otherwise */
  public boolean isSetVirtId() {
    return this.virtId != null;
  }

  public void setVirtIdIsSet(boolean value) {
    if (!value) {
      this.virtId = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ImageDetailsRead setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public ImageDetailsRead setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOwnerId() {
    return this.ownerId;
  }

  public ImageDetailsRead setOwnerId(@org.apache.thrift.annotation.Nullable java.lang.String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  public void unsetOwnerId() {
    this.ownerId = null;
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return this.ownerId != null;
  }

  public void setOwnerIdIsSet(boolean value) {
    if (!value) {
      this.ownerId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUpdaterId() {
    return this.updaterId;
  }

  public ImageDetailsRead setUpdaterId(@org.apache.thrift.annotation.Nullable java.lang.String updaterId) {
    this.updaterId = updaterId;
    return this;
  }

  public void unsetUpdaterId() {
    this.updaterId = null;
  }

  /** Returns true if field updaterId is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdaterId() {
    return this.updaterId != null;
  }

  public void setUpdaterIdIsSet(boolean value) {
    if (!value) {
      this.updaterId = null;
    }
  }

  /**
   * 
   * @see ShareMode
   */
  @org.apache.thrift.annotation.Nullable
  public ShareMode getShareMode() {
    return this.shareMode;
  }

  /**
   * 
   * @see ShareMode
   */
  public ImageDetailsRead setShareMode(@org.apache.thrift.annotation.Nullable ShareMode shareMode) {
    this.shareMode = shareMode;
    return this;
  }

  public void unsetShareMode() {
    this.shareMode = null;
  }

  /** Returns true if field shareMode is set (has been assigned a value) and false otherwise */
  public boolean isSetShareMode() {
    return this.shareMode != null;
  }

  public void setShareModeIsSet(boolean value) {
    if (!value) {
      this.shareMode = null;
    }
  }

  public boolean isIsTemplate() {
    return this.isTemplate;
  }

  public ImageDetailsRead setIsTemplate(boolean isTemplate) {
    this.isTemplate = isTemplate;
    setIsTemplateIsSet(true);
    return this;
  }

  public void unsetIsTemplate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID);
  }

  /** Returns true if field isTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTemplate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID);
  }

  public void setIsTemplateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public ImagePermissions getDefaultPermissions() {
    return this.defaultPermissions;
  }

  public ImageDetailsRead setDefaultPermissions(@org.apache.thrift.annotation.Nullable ImagePermissions defaultPermissions) {
    this.defaultPermissions = defaultPermissions;
    return this;
  }

  public void unsetDefaultPermissions() {
    this.defaultPermissions = null;
  }

  /** Returns true if field defaultPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultPermissions() {
    return this.defaultPermissions != null;
  }

  public void setDefaultPermissionsIsSet(boolean value) {
    if (!value) {
      this.defaultPermissions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ImagePermissions getUserPermissions() {
    return this.userPermissions;
  }

  public ImageDetailsRead setUserPermissions(@org.apache.thrift.annotation.Nullable ImagePermissions userPermissions) {
    this.userPermissions = userPermissions;
    return this;
  }

  public void unsetUserPermissions() {
    this.userPermissions = null;
  }

  /** Returns true if field userPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPermissions() {
    return this.userPermissions != null;
  }

  public void setUserPermissionsIsSet(boolean value) {
    if (!value) {
      this.userPermissions = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IMAGE_BASE_ID:
      if (value == null) {
        unsetImageBaseId();
      } else {
        setImageBaseId((java.lang.String)value);
      }
      break;

    case LATEST_VERSION_ID:
      if (value == null) {
        unsetLatestVersionId();
      } else {
        setLatestVersionId((java.lang.String)value);
      }
      break;

    case VERSIONS:
      if (value == null) {
        unsetVersions();
      } else {
        setVersions((java.util.List<ImageVersionDetails>)value);
      }
      break;

    case IMAGE_NAME:
      if (value == null) {
        unsetImageName();
      } else {
        setImageName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((java.util.List<java.lang.String>)value);
      }
      break;

    case OS_ID:
      if (value == null) {
        unsetOsId();
      } else {
        setOsId((java.lang.Integer)value);
      }
      break;

    case VIRT_ID:
      if (value == null) {
        unsetVirtId();
      } else {
        setVirtId((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.Long)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((java.lang.String)value);
      }
      break;

    case UPDATER_ID:
      if (value == null) {
        unsetUpdaterId();
      } else {
        setUpdaterId((java.lang.String)value);
      }
      break;

    case SHARE_MODE:
      if (value == null) {
        unsetShareMode();
      } else {
        setShareMode((ShareMode)value);
      }
      break;

    case IS_TEMPLATE:
      if (value == null) {
        unsetIsTemplate();
      } else {
        setIsTemplate((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_PERMISSIONS:
      if (value == null) {
        unsetDefaultPermissions();
      } else {
        setDefaultPermissions((ImagePermissions)value);
      }
      break;

    case USER_PERMISSIONS:
      if (value == null) {
        unsetUserPermissions();
      } else {
        setUserPermissions((ImagePermissions)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMAGE_BASE_ID:
      return getImageBaseId();

    case LATEST_VERSION_ID:
      return getLatestVersionId();

    case VERSIONS:
      return getVersions();

    case IMAGE_NAME:
      return getImageName();

    case DESCRIPTION:
      return getDescription();

    case TAGS:
      return getTags();

    case OS_ID:
      return getOsId();

    case VIRT_ID:
      return getVirtId();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case OWNER_ID:
      return getOwnerId();

    case UPDATER_ID:
      return getUpdaterId();

    case SHARE_MODE:
      return getShareMode();

    case IS_TEMPLATE:
      return isIsTemplate();

    case DEFAULT_PERMISSIONS:
      return getDefaultPermissions();

    case USER_PERMISSIONS:
      return getUserPermissions();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMAGE_BASE_ID:
      return isSetImageBaseId();
    case LATEST_VERSION_ID:
      return isSetLatestVersionId();
    case VERSIONS:
      return isSetVersions();
    case IMAGE_NAME:
      return isSetImageName();
    case DESCRIPTION:
      return isSetDescription();
    case TAGS:
      return isSetTags();
    case OS_ID:
      return isSetOsId();
    case VIRT_ID:
      return isSetVirtId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case OWNER_ID:
      return isSetOwnerId();
    case UPDATER_ID:
      return isSetUpdaterId();
    case SHARE_MODE:
      return isSetShareMode();
    case IS_TEMPLATE:
      return isSetIsTemplate();
    case DEFAULT_PERMISSIONS:
      return isSetDefaultPermissions();
    case USER_PERMISSIONS:
      return isSetUserPermissions();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ImageDetailsRead)
      return this.equals((ImageDetailsRead)that);
    return false;
  }

  public boolean equals(ImageDetailsRead that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_imageBaseId = true && this.isSetImageBaseId();
    boolean that_present_imageBaseId = true && that.isSetImageBaseId();
    if (this_present_imageBaseId || that_present_imageBaseId) {
      if (!(this_present_imageBaseId && that_present_imageBaseId))
        return false;
      if (!this.imageBaseId.equals(that.imageBaseId))
        return false;
    }

    boolean this_present_latestVersionId = true && this.isSetLatestVersionId();
    boolean that_present_latestVersionId = true && that.isSetLatestVersionId();
    if (this_present_latestVersionId || that_present_latestVersionId) {
      if (!(this_present_latestVersionId && that_present_latestVersionId))
        return false;
      if (!this.latestVersionId.equals(that.latestVersionId))
        return false;
    }

    boolean this_present_versions = true && this.isSetVersions();
    boolean that_present_versions = true && that.isSetVersions();
    if (this_present_versions || that_present_versions) {
      if (!(this_present_versions && that_present_versions))
        return false;
      if (!this.versions.equals(that.versions))
        return false;
    }

    boolean this_present_imageName = true && this.isSetImageName();
    boolean that_present_imageName = true && that.isSetImageName();
    if (this_present_imageName || that_present_imageName) {
      if (!(this_present_imageName && that_present_imageName))
        return false;
      if (!this.imageName.equals(that.imageName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_osId = true;
    boolean that_present_osId = true;
    if (this_present_osId || that_present_osId) {
      if (!(this_present_osId && that_present_osId))
        return false;
      if (this.osId != that.osId)
        return false;
    }

    boolean this_present_virtId = true && this.isSetVirtId();
    boolean that_present_virtId = true && that.isSetVirtId();
    if (this_present_virtId || that_present_virtId) {
      if (!(this_present_virtId && that_present_virtId))
        return false;
      if (!this.virtId.equals(that.virtId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_ownerId = true && this.isSetOwnerId();
    boolean that_present_ownerId = true && that.isSetOwnerId();
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (!this.ownerId.equals(that.ownerId))
        return false;
    }

    boolean this_present_updaterId = true && this.isSetUpdaterId();
    boolean that_present_updaterId = true && that.isSetUpdaterId();
    if (this_present_updaterId || that_present_updaterId) {
      if (!(this_present_updaterId && that_present_updaterId))
        return false;
      if (!this.updaterId.equals(that.updaterId))
        return false;
    }

    boolean this_present_shareMode = true && this.isSetShareMode();
    boolean that_present_shareMode = true && that.isSetShareMode();
    if (this_present_shareMode || that_present_shareMode) {
      if (!(this_present_shareMode && that_present_shareMode))
        return false;
      if (!this.shareMode.equals(that.shareMode))
        return false;
    }

    boolean this_present_isTemplate = true;
    boolean that_present_isTemplate = true;
    if (this_present_isTemplate || that_present_isTemplate) {
      if (!(this_present_isTemplate && that_present_isTemplate))
        return false;
      if (this.isTemplate != that.isTemplate)
        return false;
    }

    boolean this_present_defaultPermissions = true && this.isSetDefaultPermissions();
    boolean that_present_defaultPermissions = true && that.isSetDefaultPermissions();
    if (this_present_defaultPermissions || that_present_defaultPermissions) {
      if (!(this_present_defaultPermissions && that_present_defaultPermissions))
        return false;
      if (!this.defaultPermissions.equals(that.defaultPermissions))
        return false;
    }

    boolean this_present_userPermissions = true && this.isSetUserPermissions();
    boolean that_present_userPermissions = true && that.isSetUserPermissions();
    if (this_present_userPermissions || that_present_userPermissions) {
      if (!(this_present_userPermissions && that_present_userPermissions))
        return false;
      if (!this.userPermissions.equals(that.userPermissions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImageBaseId()) ? 131071 : 524287);
    if (isSetImageBaseId())
      hashCode = hashCode * 8191 + imageBaseId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLatestVersionId()) ? 131071 : 524287);
    if (isSetLatestVersionId())
      hashCode = hashCode * 8191 + latestVersionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersions()) ? 131071 : 524287);
    if (isSetVersions())
      hashCode = hashCode * 8191 + versions.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageName()) ? 131071 : 524287);
    if (isSetImageName())
      hashCode = hashCode * 8191 + imageName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetTags()) ? 131071 : 524287);
    if (isSetTags())
      hashCode = hashCode * 8191 + tags.hashCode();

    hashCode = hashCode * 8191 + osId;

    hashCode = hashCode * 8191 + ((isSetVirtId()) ? 131071 : 524287);
    if (isSetVirtId())
      hashCode = hashCode * 8191 + virtId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateTime);

    hashCode = hashCode * 8191 + ((isSetOwnerId()) ? 131071 : 524287);
    if (isSetOwnerId())
      hashCode = hashCode * 8191 + ownerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUpdaterId()) ? 131071 : 524287);
    if (isSetUpdaterId())
      hashCode = hashCode * 8191 + updaterId.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareMode()) ? 131071 : 524287);
    if (isSetShareMode())
      hashCode = hashCode * 8191 + shareMode.getValue();

    hashCode = hashCode * 8191 + ((isTemplate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefaultPermissions()) ? 131071 : 524287);
    if (isSetDefaultPermissions())
      hashCode = hashCode * 8191 + defaultPermissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserPermissions()) ? 131071 : 524287);
    if (isSetUserPermissions())
      hashCode = hashCode * 8191 + userPermissions.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ImageDetailsRead other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetImageBaseId(), other.isSetImageBaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageBaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageBaseId, other.imageBaseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLatestVersionId(), other.isSetLatestVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestVersionId, other.latestVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersions(), other.isSetVersions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versions, other.versions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetImageName(), other.isSetImageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageName, other.imageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTags(), other.isSetTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tags, other.tags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOsId(), other.isSetOsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osId, other.osId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVirtId(), other.isSetVirtId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtId, other.virtId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreateTime(), other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdateTime(), other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOwnerId(), other.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdaterId(), other.isSetUpdaterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdaterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updaterId, other.updaterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShareMode(), other.isSetShareMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareMode, other.shareMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTemplate(), other.isSetIsTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTemplate, other.isTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultPermissions(), other.isSetDefaultPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPermissions, other.defaultPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserPermissions(), other.isSetUserPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPermissions, other.userPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageDetailsRead(");
    boolean first = true;

    sb.append("imageBaseId:");
    if (this.imageBaseId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageBaseId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestVersionId:");
    if (this.latestVersionId == null) {
      sb.append("null");
    } else {
      sb.append(this.latestVersionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("versions:");
    if (this.versions == null) {
      sb.append("null");
    } else {
      sb.append(this.versions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageName:");
    if (this.imageName == null) {
      sb.append("null");
    } else {
      sb.append(this.imageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osId:");
    sb.append(this.osId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("virtId:");
    if (this.virtId == null) {
      sb.append("null");
    } else {
      sb.append(this.virtId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerId:");
    if (this.ownerId == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("updaterId:");
    if (this.updaterId == null) {
      sb.append("null");
    } else {
      sb.append(this.updaterId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareMode:");
    if (this.shareMode == null) {
      sb.append("null");
    } else {
      sb.append(this.shareMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTemplate:");
    sb.append(this.isTemplate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultPermissions:");
    if (this.defaultPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultPermissions);
    }
    first = false;
    if (isSetUserPermissions()) {
      if (!first) sb.append(", ");
      sb.append("userPermissions:");
      if (this.userPermissions == null) {
        sb.append("null");
      } else {
        sb.append(this.userPermissions);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultPermissions != null) {
      defaultPermissions.validate();
    }
    if (userPermissions != null) {
      userPermissions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageDetailsReadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageDetailsReadStandardScheme getScheme() {
      return new ImageDetailsReadStandardScheme();
    }
  }

  private static class ImageDetailsReadStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageDetailsRead> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageDetailsRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMAGE_BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageBaseId = iprot.readString();
              struct.setImageBaseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LATEST_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestVersionId = iprot.readString();
              struct.setLatestVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VERSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list58 = iprot.readListBegin();
                struct.versions = new java.util.ArrayList<ImageVersionDetails>(_list58.size);
                @org.apache.thrift.annotation.Nullable ImageVersionDetails _elem59;
                for (int _i60 = 0; _i60 < _list58.size; ++_i60)
                {
                  _elem59 = new ImageVersionDetails();
                  _elem59.read(iprot);
                  struct.versions.add(_elem59);
                }
                iprot.readListEnd();
              }
              struct.setVersionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageName = iprot.readString();
              struct.setImageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list61 = iprot.readListBegin();
                struct.tags = new java.util.ArrayList<java.lang.String>(_list61.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem62;
                for (int _i63 = 0; _i63 < _list61.size; ++_i63)
                {
                  _elem62 = iprot.readString();
                  struct.tags.add(_elem62);
                }
                iprot.readListEnd();
              }
              struct.setTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osId = iprot.readI32();
              struct.setOsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VIRT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.virtId = iprot.readString();
              struct.setVirtIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerId = iprot.readString();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // UPDATER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.updaterId = iprot.readString();
              struct.setUpdaterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // SHARE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareMode = org.openslx.bwlp.thrift.iface.ShareMode.findByValue(iprot.readI32());
              struct.setShareModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTemplate = iprot.readBool();
              struct.setIsTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // DEFAULT_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultPermissions = new ImagePermissions();
              struct.defaultPermissions.read(iprot);
              struct.setDefaultPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // USER_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userPermissions = new ImagePermissions();
              struct.userPermissions.read(iprot);
              struct.setUserPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageDetailsRead struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imageBaseId != null) {
        oprot.writeFieldBegin(IMAGE_BASE_ID_FIELD_DESC);
        oprot.writeString(struct.imageBaseId);
        oprot.writeFieldEnd();
      }
      if (struct.versions != null) {
        oprot.writeFieldBegin(VERSIONS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.versions.size()));
          for (ImageVersionDetails _iter64 : struct.versions)
          {
            _iter64.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.imageName != null) {
        oprot.writeFieldBegin(IMAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.imageName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.tags != null) {
        oprot.writeFieldBegin(TAGS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.tags.size()));
          for (java.lang.String _iter65 : struct.tags)
          {
            oprot.writeString(_iter65);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OS_ID_FIELD_DESC);
      oprot.writeI32(struct.osId);
      oprot.writeFieldEnd();
      if (struct.virtId != null) {
        oprot.writeFieldBegin(VIRT_ID_FIELD_DESC);
        oprot.writeString(struct.virtId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      if (struct.ownerId != null) {
        oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
        oprot.writeString(struct.ownerId);
        oprot.writeFieldEnd();
      }
      if (struct.updaterId != null) {
        oprot.writeFieldBegin(UPDATER_ID_FIELD_DESC);
        oprot.writeString(struct.updaterId);
        oprot.writeFieldEnd();
      }
      if (struct.shareMode != null) {
        oprot.writeFieldBegin(SHARE_MODE_FIELD_DESC);
        oprot.writeI32(struct.shareMode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TEMPLATE_FIELD_DESC);
      oprot.writeBool(struct.isTemplate);
      oprot.writeFieldEnd();
      if (struct.defaultPermissions != null) {
        oprot.writeFieldBegin(DEFAULT_PERMISSIONS_FIELD_DESC);
        struct.defaultPermissions.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.latestVersionId != null) {
        oprot.writeFieldBegin(LATEST_VERSION_ID_FIELD_DESC);
        oprot.writeString(struct.latestVersionId);
        oprot.writeFieldEnd();
      }
      if (struct.userPermissions != null) {
        if (struct.isSetUserPermissions()) {
          oprot.writeFieldBegin(USER_PERMISSIONS_FIELD_DESC);
          struct.userPermissions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageDetailsReadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageDetailsReadTupleScheme getScheme() {
      return new ImageDetailsReadTupleScheme();
    }
  }

  private static class ImageDetailsReadTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageDetailsRead> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageDetailsRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImageBaseId()) {
        optionals.set(0);
      }
      if (struct.isSetLatestVersionId()) {
        optionals.set(1);
      }
      if (struct.isSetVersions()) {
        optionals.set(2);
      }
      if (struct.isSetImageName()) {
        optionals.set(3);
      }
      if (struct.isSetDescription()) {
        optionals.set(4);
      }
      if (struct.isSetTags()) {
        optionals.set(5);
      }
      if (struct.isSetOsId()) {
        optionals.set(6);
      }
      if (struct.isSetVirtId()) {
        optionals.set(7);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(8);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(9);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(10);
      }
      if (struct.isSetUpdaterId()) {
        optionals.set(11);
      }
      if (struct.isSetShareMode()) {
        optionals.set(12);
      }
      if (struct.isSetIsTemplate()) {
        optionals.set(13);
      }
      if (struct.isSetDefaultPermissions()) {
        optionals.set(14);
      }
      if (struct.isSetUserPermissions()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetImageBaseId()) {
        oprot.writeString(struct.imageBaseId);
      }
      if (struct.isSetLatestVersionId()) {
        oprot.writeString(struct.latestVersionId);
      }
      if (struct.isSetVersions()) {
        {
          oprot.writeI32(struct.versions.size());
          for (ImageVersionDetails _iter66 : struct.versions)
          {
            _iter66.write(oprot);
          }
        }
      }
      if (struct.isSetImageName()) {
        oprot.writeString(struct.imageName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetTags()) {
        {
          oprot.writeI32(struct.tags.size());
          for (java.lang.String _iter67 : struct.tags)
          {
            oprot.writeString(_iter67);
          }
        }
      }
      if (struct.isSetOsId()) {
        oprot.writeI32(struct.osId);
      }
      if (struct.isSetVirtId()) {
        oprot.writeString(struct.virtId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeString(struct.ownerId);
      }
      if (struct.isSetUpdaterId()) {
        oprot.writeString(struct.updaterId);
      }
      if (struct.isSetShareMode()) {
        oprot.writeI32(struct.shareMode.getValue());
      }
      if (struct.isSetIsTemplate()) {
        oprot.writeBool(struct.isTemplate);
      }
      if (struct.isSetDefaultPermissions()) {
        struct.defaultPermissions.write(oprot);
      }
      if (struct.isSetUserPermissions()) {
        struct.userPermissions.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageDetailsRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.imageBaseId = iprot.readString();
        struct.setImageBaseIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.latestVersionId = iprot.readString();
        struct.setLatestVersionIdIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list68 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.versions = new java.util.ArrayList<ImageVersionDetails>(_list68.size);
          @org.apache.thrift.annotation.Nullable ImageVersionDetails _elem69;
          for (int _i70 = 0; _i70 < _list68.size; ++_i70)
          {
            _elem69 = new ImageVersionDetails();
            _elem69.read(iprot);
            struct.versions.add(_elem69);
          }
        }
        struct.setVersionsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imageName = iprot.readString();
        struct.setImageNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(5)) {
        {
          org.apache.thrift.protocol.TList _list71 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.tags = new java.util.ArrayList<java.lang.String>(_list71.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem72;
          for (int _i73 = 0; _i73 < _list71.size; ++_i73)
          {
            _elem72 = iprot.readString();
            struct.tags.add(_elem72);
          }
        }
        struct.setTagsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.osId = iprot.readI32();
        struct.setOsIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.virtId = iprot.readString();
        struct.setVirtIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ownerId = iprot.readString();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.updaterId = iprot.readString();
        struct.setUpdaterIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shareMode = org.openslx.bwlp.thrift.iface.ShareMode.findByValue(iprot.readI32());
        struct.setShareModeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.isTemplate = iprot.readBool();
        struct.setIsTemplateIsSet(true);
      }
      if (incoming.get(14)) {
        struct.defaultPermissions = new ImagePermissions();
        struct.defaultPermissions.read(iprot);
        struct.setDefaultPermissionsIsSet(true);
      }
      if (incoming.get(15)) {
        struct.userPermissions = new ImagePermissions();
        struct.userPermissions.read(iprot);
        struct.setUserPermissionsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

