/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class OperatingSystem implements org.apache.thrift.TBase<OperatingSystem, OperatingSystem._Fields>, java.io.Serializable, Cloneable, Comparable<OperatingSystem> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("OperatingSystem");

  private static final org.apache.thrift.protocol.TField OS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("osId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField OS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("osName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VIRTUALIZER_OS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtualizerOsId", org.apache.thrift.protocol.TType.MAP, (short)3);
  private static final org.apache.thrift.protocol.TField ARCHITECTURE_FIELD_DESC = new org.apache.thrift.protocol.TField("architecture", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField MAX_MEM_MB_FIELD_DESC = new org.apache.thrift.protocol.TField("maxMemMb", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_CORES_FIELD_DESC = new org.apache.thrift.protocol.TField("maxCores", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new OperatingSystemStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new OperatingSystemTupleSchemeFactory();

  public int osId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String osName; // required
  public @org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> virtualizerOsId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String architecture; // required
  public int maxMemMb; // required
  public int maxCores; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OS_ID((short)1, "osId"),
    OS_NAME((short)2, "osName"),
    VIRTUALIZER_OS_ID((short)3, "virtualizerOsId"),
    ARCHITECTURE((short)4, "architecture"),
    MAX_MEM_MB((short)5, "maxMemMb"),
    MAX_CORES((short)6, "maxCores");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OS_ID
          return OS_ID;
        case 2: // OS_NAME
          return OS_NAME;
        case 3: // VIRTUALIZER_OS_ID
          return VIRTUALIZER_OS_ID;
        case 4: // ARCHITECTURE
          return ARCHITECTURE;
        case 5: // MAX_MEM_MB
          return MAX_MEM_MB;
        case 6: // MAX_CORES
          return MAX_CORES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OSID_ISSET_ID = 0;
  private static final int __MAXMEMMB_ISSET_ID = 1;
  private static final int __MAXCORES_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OS_ID, new org.apache.thrift.meta_data.FieldMetaData("osId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.OS_NAME, new org.apache.thrift.meta_data.FieldMetaData("osName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VIRTUALIZER_OS_ID, new org.apache.thrift.meta_data.FieldMetaData("virtualizerOsId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.ARCHITECTURE, new org.apache.thrift.meta_data.FieldMetaData("architecture", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_MEM_MB, new org.apache.thrift.meta_data.FieldMetaData("maxMemMb", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MAX_CORES, new org.apache.thrift.meta_data.FieldMetaData("maxCores", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(OperatingSystem.class, metaDataMap);
  }

  public OperatingSystem() {
  }

  public OperatingSystem(
    int osId,
    java.lang.String osName,
    java.util.Map<java.lang.String,java.lang.String> virtualizerOsId,
    java.lang.String architecture,
    int maxMemMb,
    int maxCores)
  {
    this();
    this.osId = osId;
    setOsIdIsSet(true);
    this.osName = osName;
    this.virtualizerOsId = virtualizerOsId;
    this.architecture = architecture;
    this.maxMemMb = maxMemMb;
    setMaxMemMbIsSet(true);
    this.maxCores = maxCores;
    setMaxCoresIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public OperatingSystem(OperatingSystem other) {
    __isset_bitfield = other.__isset_bitfield;
    this.osId = other.osId;
    if (other.isSetOsName()) {
      this.osName = other.osName;
    }
    if (other.isSetVirtualizerOsId()) {
      java.util.Map<java.lang.String,java.lang.String> __this__virtualizerOsId = new java.util.HashMap<java.lang.String,java.lang.String>(other.virtualizerOsId);
      this.virtualizerOsId = __this__virtualizerOsId;
    }
    if (other.isSetArchitecture()) {
      this.architecture = other.architecture;
    }
    this.maxMemMb = other.maxMemMb;
    this.maxCores = other.maxCores;
  }

  public OperatingSystem deepCopy() {
    return new OperatingSystem(this);
  }

  @Override
  public void clear() {
    setOsIdIsSet(false);
    this.osId = 0;
    this.osName = null;
    this.virtualizerOsId = null;
    this.architecture = null;
    setMaxMemMbIsSet(false);
    this.maxMemMb = 0;
    setMaxCoresIsSet(false);
    this.maxCores = 0;
  }

  public int getOsId() {
    return this.osId;
  }

  public OperatingSystem setOsId(int osId) {
    this.osId = osId;
    setOsIdIsSet(true);
    return this;
  }

  public void unsetOsId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  /** Returns true if field osId is set (has been assigned a value) and false otherwise */
  public boolean isSetOsId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  public void setOsIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OSID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOsName() {
    return this.osName;
  }

  public OperatingSystem setOsName(@org.apache.thrift.annotation.Nullable java.lang.String osName) {
    this.osName = osName;
    return this;
  }

  public void unsetOsName() {
    this.osName = null;
  }

  /** Returns true if field osName is set (has been assigned a value) and false otherwise */
  public boolean isSetOsName() {
    return this.osName != null;
  }

  public void setOsNameIsSet(boolean value) {
    if (!value) {
      this.osName = null;
    }
  }

  public int getVirtualizerOsIdSize() {
    return (this.virtualizerOsId == null) ? 0 : this.virtualizerOsId.size();
  }

  public void putToVirtualizerOsId(java.lang.String key, java.lang.String val) {
    if (this.virtualizerOsId == null) {
      this.virtualizerOsId = new java.util.HashMap<java.lang.String,java.lang.String>();
    }
    this.virtualizerOsId.put(key, val);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Map<java.lang.String,java.lang.String> getVirtualizerOsId() {
    return this.virtualizerOsId;
  }

  public OperatingSystem setVirtualizerOsId(@org.apache.thrift.annotation.Nullable java.util.Map<java.lang.String,java.lang.String> virtualizerOsId) {
    this.virtualizerOsId = virtualizerOsId;
    return this;
  }

  public void unsetVirtualizerOsId() {
    this.virtualizerOsId = null;
  }

  /** Returns true if field virtualizerOsId is set (has been assigned a value) and false otherwise */
  public boolean isSetVirtualizerOsId() {
    return this.virtualizerOsId != null;
  }

  public void setVirtualizerOsIdIsSet(boolean value) {
    if (!value) {
      this.virtualizerOsId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getArchitecture() {
    return this.architecture;
  }

  public OperatingSystem setArchitecture(@org.apache.thrift.annotation.Nullable java.lang.String architecture) {
    this.architecture = architecture;
    return this;
  }

  public void unsetArchitecture() {
    this.architecture = null;
  }

  /** Returns true if field architecture is set (has been assigned a value) and false otherwise */
  public boolean isSetArchitecture() {
    return this.architecture != null;
  }

  public void setArchitectureIsSet(boolean value) {
    if (!value) {
      this.architecture = null;
    }
  }

  public int getMaxMemMb() {
    return this.maxMemMb;
  }

  public OperatingSystem setMaxMemMb(int maxMemMb) {
    this.maxMemMb = maxMemMb;
    setMaxMemMbIsSet(true);
    return this;
  }

  public void unsetMaxMemMb() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXMEMMB_ISSET_ID);
  }

  /** Returns true if field maxMemMb is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxMemMb() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXMEMMB_ISSET_ID);
  }

  public void setMaxMemMbIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXMEMMB_ISSET_ID, value);
  }

  public int getMaxCores() {
    return this.maxCores;
  }

  public OperatingSystem setMaxCores(int maxCores) {
    this.maxCores = maxCores;
    setMaxCoresIsSet(true);
    return this;
  }

  public void unsetMaxCores() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXCORES_ISSET_ID);
  }

  /** Returns true if field maxCores is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxCores() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXCORES_ISSET_ID);
  }

  public void setMaxCoresIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXCORES_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case OS_ID:
      if (value == null) {
        unsetOsId();
      } else {
        setOsId((java.lang.Integer)value);
      }
      break;

    case OS_NAME:
      if (value == null) {
        unsetOsName();
      } else {
        setOsName((java.lang.String)value);
      }
      break;

    case VIRTUALIZER_OS_ID:
      if (value == null) {
        unsetVirtualizerOsId();
      } else {
        setVirtualizerOsId((java.util.Map<java.lang.String,java.lang.String>)value);
      }
      break;

    case ARCHITECTURE:
      if (value == null) {
        unsetArchitecture();
      } else {
        setArchitecture((java.lang.String)value);
      }
      break;

    case MAX_MEM_MB:
      if (value == null) {
        unsetMaxMemMb();
      } else {
        setMaxMemMb((java.lang.Integer)value);
      }
      break;

    case MAX_CORES:
      if (value == null) {
        unsetMaxCores();
      } else {
        setMaxCores((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case OS_ID:
      return getOsId();

    case OS_NAME:
      return getOsName();

    case VIRTUALIZER_OS_ID:
      return getVirtualizerOsId();

    case ARCHITECTURE:
      return getArchitecture();

    case MAX_MEM_MB:
      return getMaxMemMb();

    case MAX_CORES:
      return getMaxCores();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case OS_ID:
      return isSetOsId();
    case OS_NAME:
      return isSetOsName();
    case VIRTUALIZER_OS_ID:
      return isSetVirtualizerOsId();
    case ARCHITECTURE:
      return isSetArchitecture();
    case MAX_MEM_MB:
      return isSetMaxMemMb();
    case MAX_CORES:
      return isSetMaxCores();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof OperatingSystem)
      return this.equals((OperatingSystem)that);
    return false;
  }

  public boolean equals(OperatingSystem that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_osId = true;
    boolean that_present_osId = true;
    if (this_present_osId || that_present_osId) {
      if (!(this_present_osId && that_present_osId))
        return false;
      if (this.osId != that.osId)
        return false;
    }

    boolean this_present_osName = true && this.isSetOsName();
    boolean that_present_osName = true && that.isSetOsName();
    if (this_present_osName || that_present_osName) {
      if (!(this_present_osName && that_present_osName))
        return false;
      if (!this.osName.equals(that.osName))
        return false;
    }

    boolean this_present_virtualizerOsId = true && this.isSetVirtualizerOsId();
    boolean that_present_virtualizerOsId = true && that.isSetVirtualizerOsId();
    if (this_present_virtualizerOsId || that_present_virtualizerOsId) {
      if (!(this_present_virtualizerOsId && that_present_virtualizerOsId))
        return false;
      if (!this.virtualizerOsId.equals(that.virtualizerOsId))
        return false;
    }

    boolean this_present_architecture = true && this.isSetArchitecture();
    boolean that_present_architecture = true && that.isSetArchitecture();
    if (this_present_architecture || that_present_architecture) {
      if (!(this_present_architecture && that_present_architecture))
        return false;
      if (!this.architecture.equals(that.architecture))
        return false;
    }

    boolean this_present_maxMemMb = true;
    boolean that_present_maxMemMb = true;
    if (this_present_maxMemMb || that_present_maxMemMb) {
      if (!(this_present_maxMemMb && that_present_maxMemMb))
        return false;
      if (this.maxMemMb != that.maxMemMb)
        return false;
    }

    boolean this_present_maxCores = true;
    boolean that_present_maxCores = true;
    if (this_present_maxCores || that_present_maxCores) {
      if (!(this_present_maxCores && that_present_maxCores))
        return false;
      if (this.maxCores != that.maxCores)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + osId;

    hashCode = hashCode * 8191 + ((isSetOsName()) ? 131071 : 524287);
    if (isSetOsName())
      hashCode = hashCode * 8191 + osName.hashCode();

    hashCode = hashCode * 8191 + ((isSetVirtualizerOsId()) ? 131071 : 524287);
    if (isSetVirtualizerOsId())
      hashCode = hashCode * 8191 + virtualizerOsId.hashCode();

    hashCode = hashCode * 8191 + ((isSetArchitecture()) ? 131071 : 524287);
    if (isSetArchitecture())
      hashCode = hashCode * 8191 + architecture.hashCode();

    hashCode = hashCode * 8191 + maxMemMb;

    hashCode = hashCode * 8191 + maxCores;

    return hashCode;
  }

  @Override
  public int compareTo(OperatingSystem other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetOsId(), other.isSetOsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osId, other.osId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOsName(), other.isSetOsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osName, other.osName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVirtualizerOsId(), other.isSetVirtualizerOsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtualizerOsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtualizerOsId, other.virtualizerOsId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetArchitecture(), other.isSetArchitecture());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArchitecture()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.architecture, other.architecture);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxMemMb(), other.isSetMaxMemMb());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxMemMb()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxMemMb, other.maxMemMb);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMaxCores(), other.isSetMaxCores());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxCores()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxCores, other.maxCores);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("OperatingSystem(");
    boolean first = true;

    sb.append("osId:");
    sb.append(this.osId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("osName:");
    if (this.osName == null) {
      sb.append("null");
    } else {
      sb.append(this.osName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("virtualizerOsId:");
    if (this.virtualizerOsId == null) {
      sb.append("null");
    } else {
      sb.append(this.virtualizerOsId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("architecture:");
    if (this.architecture == null) {
      sb.append("null");
    } else {
      sb.append(this.architecture);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMemMb:");
    sb.append(this.maxMemMb);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxCores:");
    sb.append(this.maxCores);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OperatingSystemStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OperatingSystemStandardScheme getScheme() {
      return new OperatingSystemStandardScheme();
    }
  }

  private static class OperatingSystemStandardScheme extends org.apache.thrift.scheme.StandardScheme<OperatingSystem> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, OperatingSystem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osId = iprot.readI32();
              struct.setOsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.osName = iprot.readString();
              struct.setOsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VIRTUALIZER_OS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map24 = iprot.readMapBegin();
                struct.virtualizerOsId = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map24.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _key25;
                @org.apache.thrift.annotation.Nullable java.lang.String _val26;
                for (int _i27 = 0; _i27 < _map24.size; ++_i27)
                {
                  _key25 = iprot.readString();
                  _val26 = iprot.readString();
                  struct.virtualizerOsId.put(_key25, _val26);
                }
                iprot.readMapEnd();
              }
              struct.setVirtualizerOsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARCHITECTURE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.architecture = iprot.readString();
              struct.setArchitectureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MAX_MEM_MB
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxMemMb = iprot.readI32();
              struct.setMaxMemMbIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_CORES
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.maxCores = iprot.readI32();
              struct.setMaxCoresIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, OperatingSystem struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(OS_ID_FIELD_DESC);
      oprot.writeI32(struct.osId);
      oprot.writeFieldEnd();
      if (struct.osName != null) {
        oprot.writeFieldBegin(OS_NAME_FIELD_DESC);
        oprot.writeString(struct.osName);
        oprot.writeFieldEnd();
      }
      if (struct.virtualizerOsId != null) {
        oprot.writeFieldBegin(VIRTUALIZER_OS_ID_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.virtualizerOsId.size()));
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter28 : struct.virtualizerOsId.entrySet())
          {
            oprot.writeString(_iter28.getKey());
            oprot.writeString(_iter28.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.architecture != null) {
        oprot.writeFieldBegin(ARCHITECTURE_FIELD_DESC);
        oprot.writeString(struct.architecture);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_MEM_MB_FIELD_DESC);
      oprot.writeI32(struct.maxMemMb);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_CORES_FIELD_DESC);
      oprot.writeI32(struct.maxCores);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OperatingSystemTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public OperatingSystemTupleScheme getScheme() {
      return new OperatingSystemTupleScheme();
    }
  }

  private static class OperatingSystemTupleScheme extends org.apache.thrift.scheme.TupleScheme<OperatingSystem> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, OperatingSystem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOsId()) {
        optionals.set(0);
      }
      if (struct.isSetOsName()) {
        optionals.set(1);
      }
      if (struct.isSetVirtualizerOsId()) {
        optionals.set(2);
      }
      if (struct.isSetArchitecture()) {
        optionals.set(3);
      }
      if (struct.isSetMaxMemMb()) {
        optionals.set(4);
      }
      if (struct.isSetMaxCores()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetOsId()) {
        oprot.writeI32(struct.osId);
      }
      if (struct.isSetOsName()) {
        oprot.writeString(struct.osName);
      }
      if (struct.isSetVirtualizerOsId()) {
        {
          oprot.writeI32(struct.virtualizerOsId.size());
          for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter29 : struct.virtualizerOsId.entrySet())
          {
            oprot.writeString(_iter29.getKey());
            oprot.writeString(_iter29.getValue());
          }
        }
      }
      if (struct.isSetArchitecture()) {
        oprot.writeString(struct.architecture);
      }
      if (struct.isSetMaxMemMb()) {
        oprot.writeI32(struct.maxMemMb);
      }
      if (struct.isSetMaxCores()) {
        oprot.writeI32(struct.maxCores);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, OperatingSystem struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.osId = iprot.readI32();
        struct.setOsIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.osName = iprot.readString();
        struct.setOsNameIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TMap _map30 = iprot.readMapBegin(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING); 
          struct.virtualizerOsId = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map30.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _key31;
          @org.apache.thrift.annotation.Nullable java.lang.String _val32;
          for (int _i33 = 0; _i33 < _map30.size; ++_i33)
          {
            _key31 = iprot.readString();
            _val32 = iprot.readString();
            struct.virtualizerOsId.put(_key31, _val32);
          }
        }
        struct.setVirtualizerOsIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.architecture = iprot.readString();
        struct.setArchitectureIsSet(true);
      }
      if (incoming.get(4)) {
        struct.maxMemMb = iprot.readI32();
        struct.setMaxMemMbIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxCores = iprot.readI32();
        struct.setMaxCoresIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

