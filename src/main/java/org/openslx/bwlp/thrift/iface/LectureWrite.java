/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class LectureWrite implements org.apache.thrift.TBase<LectureWrite, LectureWrite._Fields>, java.io.Serializable, Cloneable, Comparable<LectureWrite> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LectureWrite");

  private static final org.apache.thrift.protocol.TField LECTURE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageVersionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTO_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("autoUpdate", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnabled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RUNSCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("runscript", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NICS_FIELD_DESC = new org.apache.thrift.protocol.TField("nics", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField NETWORK_EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("networkExceptions", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField IS_EXAM_FIELD_DESC = new org.apache.thrift.protocol.TField("isExam", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField HAS_INTERNET_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasInternetAccess", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField DEFAULT_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField ADD_ALLOWED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("addAllowedUsers", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField REM_ALLOWED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("remAllowedUsers", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField LOCATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("locationIds", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField LIMIT_TO_LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("limitToLocations", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField LIMIT_TO_ALLOWED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("limitToAllowedUsers", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField HAS_USB_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasUsbAccess", org.apache.thrift.protocol.TType.BOOL, (short)20);
  private static final org.apache.thrift.protocol.TField NETWORK_SHARES_FIELD_DESC = new org.apache.thrift.protocol.TField("networkShares", org.apache.thrift.protocol.TType.LIST, (short)21);
  private static final org.apache.thrift.protocol.TField LDAP_FILTERS_FIELD_DESC = new org.apache.thrift.protocol.TField("ldapFilters", org.apache.thrift.protocol.TType.LIST, (short)22);
  private static final org.apache.thrift.protocol.TField PRESET_SCRIPT_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("presetScriptIds", org.apache.thrift.protocol.TType.LIST, (short)23);
  private static final org.apache.thrift.protocol.TField PRESET_NETWORK_EXCEPTION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("presetNetworkExceptionIds", org.apache.thrift.protocol.TType.LIST, (short)24);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LectureWriteStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LectureWriteTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String lectureName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String imageVersionId; // required
  public boolean autoUpdate; // required
  public boolean isEnabled; // required
  public long startTime; // required
  public long endTime; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String runscript; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> nics; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<NetRule> networkExceptions; // optional
  public boolean isExam; // required
  public boolean hasInternetAccess; // required
  public @org.apache.thrift.annotation.Nullable LecturePermissions defaultPermissions; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> addAllowedUsers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> remAllowedUsers; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> locationIds; // required
  public boolean limitToLocations; // required
  public boolean limitToAllowedUsers; // required
  public boolean hasUsbAccess; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<NetShare> networkShares; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<LdapFilter> ldapFilters; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> presetScriptIds; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> presetNetworkExceptionIds; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LECTURE_NAME((short)1, "lectureName"),
    DESCRIPTION((short)2, "description"),
    IMAGE_VERSION_ID((short)3, "imageVersionId"),
    AUTO_UPDATE((short)4, "autoUpdate"),
    IS_ENABLED((short)5, "isEnabled"),
    START_TIME((short)6, "startTime"),
    END_TIME((short)7, "endTime"),
    RUNSCRIPT((short)9, "runscript"),
    NICS((short)10, "nics"),
    NETWORK_EXCEPTIONS((short)12, "networkExceptions"),
    IS_EXAM((short)13, "isExam"),
    HAS_INTERNET_ACCESS((short)14, "hasInternetAccess"),
    DEFAULT_PERMISSIONS((short)15, "defaultPermissions"),
    ADD_ALLOWED_USERS((short)11, "addAllowedUsers"),
    REM_ALLOWED_USERS((short)16, "remAllowedUsers"),
    LOCATION_IDS((short)17, "locationIds"),
    LIMIT_TO_LOCATIONS((short)18, "limitToLocations"),
    LIMIT_TO_ALLOWED_USERS((short)19, "limitToAllowedUsers"),
    HAS_USB_ACCESS((short)20, "hasUsbAccess"),
    NETWORK_SHARES((short)21, "networkShares"),
    LDAP_FILTERS((short)22, "ldapFilters"),
    PRESET_SCRIPT_IDS((short)23, "presetScriptIds"),
    PRESET_NETWORK_EXCEPTION_IDS((short)24, "presetNetworkExceptionIds");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LECTURE_NAME
          return LECTURE_NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // IMAGE_VERSION_ID
          return IMAGE_VERSION_ID;
        case 4: // AUTO_UPDATE
          return AUTO_UPDATE;
        case 5: // IS_ENABLED
          return IS_ENABLED;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 9: // RUNSCRIPT
          return RUNSCRIPT;
        case 10: // NICS
          return NICS;
        case 12: // NETWORK_EXCEPTIONS
          return NETWORK_EXCEPTIONS;
        case 13: // IS_EXAM
          return IS_EXAM;
        case 14: // HAS_INTERNET_ACCESS
          return HAS_INTERNET_ACCESS;
        case 15: // DEFAULT_PERMISSIONS
          return DEFAULT_PERMISSIONS;
        case 11: // ADD_ALLOWED_USERS
          return ADD_ALLOWED_USERS;
        case 16: // REM_ALLOWED_USERS
          return REM_ALLOWED_USERS;
        case 17: // LOCATION_IDS
          return LOCATION_IDS;
        case 18: // LIMIT_TO_LOCATIONS
          return LIMIT_TO_LOCATIONS;
        case 19: // LIMIT_TO_ALLOWED_USERS
          return LIMIT_TO_ALLOWED_USERS;
        case 20: // HAS_USB_ACCESS
          return HAS_USB_ACCESS;
        case 21: // NETWORK_SHARES
          return NETWORK_SHARES;
        case 22: // LDAP_FILTERS
          return LDAP_FILTERS;
        case 23: // PRESET_SCRIPT_IDS
          return PRESET_SCRIPT_IDS;
        case 24: // PRESET_NETWORK_EXCEPTION_IDS
          return PRESET_NETWORK_EXCEPTION_IDS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTOUPDATE_ISSET_ID = 0;
  private static final int __ISENABLED_ISSET_ID = 1;
  private static final int __STARTTIME_ISSET_ID = 2;
  private static final int __ENDTIME_ISSET_ID = 3;
  private static final int __ISEXAM_ISSET_ID = 4;
  private static final int __HASINTERNETACCESS_ISSET_ID = 5;
  private static final int __LIMITTOLOCATIONS_ISSET_ID = 6;
  private static final int __LIMITTOALLOWEDUSERS_ISSET_ID = 7;
  private static final int __HASUSBACCESS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NETWORK_EXCEPTIONS,_Fields.ADD_ALLOWED_USERS,_Fields.REM_ALLOWED_USERS,_Fields.NETWORK_SHARES,_Fields.LDAP_FILTERS,_Fields.PRESET_SCRIPT_IDS,_Fields.PRESET_NETWORK_EXCEPTION_IDS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LECTURE_NAME, new org.apache.thrift.meta_data.FieldMetaData("lectureName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("imageVersionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.AUTO_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("autoUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.RUNSCRIPT, new org.apache.thrift.meta_data.FieldMetaData("runscript", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICS, new org.apache.thrift.meta_data.FieldMetaData("nics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NETWORK_EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("networkExceptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetRule.class))));
    tmpMap.put(_Fields.IS_EXAM, new org.apache.thrift.meta_data.FieldMetaData("isExam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_INTERNET_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("hasInternetAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("defaultPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LecturePermissions.class)));
    tmpMap.put(_Fields.ADD_ALLOWED_USERS, new org.apache.thrift.meta_data.FieldMetaData("addAllowedUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REM_ALLOWED_USERS, new org.apache.thrift.meta_data.FieldMetaData("remAllowedUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOCATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("locationIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LIMIT_TO_LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("limitToLocations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LIMIT_TO_ALLOWED_USERS, new org.apache.thrift.meta_data.FieldMetaData("limitToAllowedUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_USB_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("hasUsbAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NETWORK_SHARES, new org.apache.thrift.meta_data.FieldMetaData("networkShares", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetShare.class))));
    tmpMap.put(_Fields.LDAP_FILTERS, new org.apache.thrift.meta_data.FieldMetaData("ldapFilters", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LdapFilter.class))));
    tmpMap.put(_Fields.PRESET_SCRIPT_IDS, new org.apache.thrift.meta_data.FieldMetaData("presetScriptIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.PRESET_NETWORK_EXCEPTION_IDS, new org.apache.thrift.meta_data.FieldMetaData("presetNetworkExceptionIds", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LectureWrite.class, metaDataMap);
  }

  public LectureWrite() {
  }

  public LectureWrite(
    java.lang.String lectureName,
    java.lang.String description,
    java.lang.String imageVersionId,
    boolean autoUpdate,
    boolean isEnabled,
    long startTime,
    long endTime,
    java.lang.String runscript,
    java.util.List<java.lang.String> nics,
    boolean isExam,
    boolean hasInternetAccess,
    LecturePermissions defaultPermissions,
    java.util.List<java.lang.Integer> locationIds,
    boolean limitToLocations,
    boolean limitToAllowedUsers,
    boolean hasUsbAccess)
  {
    this();
    this.lectureName = lectureName;
    this.description = description;
    this.imageVersionId = imageVersionId;
    this.autoUpdate = autoUpdate;
    setAutoUpdateIsSet(true);
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.runscript = runscript;
    this.nics = nics;
    this.isExam = isExam;
    setIsExamIsSet(true);
    this.hasInternetAccess = hasInternetAccess;
    setHasInternetAccessIsSet(true);
    this.defaultPermissions = defaultPermissions;
    this.locationIds = locationIds;
    this.limitToLocations = limitToLocations;
    setLimitToLocationsIsSet(true);
    this.limitToAllowedUsers = limitToAllowedUsers;
    setLimitToAllowedUsersIsSet(true);
    this.hasUsbAccess = hasUsbAccess;
    setHasUsbAccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LectureWrite(LectureWrite other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLectureName()) {
      this.lectureName = other.lectureName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetImageVersionId()) {
      this.imageVersionId = other.imageVersionId;
    }
    this.autoUpdate = other.autoUpdate;
    this.isEnabled = other.isEnabled;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetRunscript()) {
      this.runscript = other.runscript;
    }
    if (other.isSetNics()) {
      java.util.List<java.lang.String> __this__nics = new java.util.ArrayList<java.lang.String>(other.nics);
      this.nics = __this__nics;
    }
    if (other.isSetNetworkExceptions()) {
      java.util.List<NetRule> __this__networkExceptions = new java.util.ArrayList<NetRule>(other.networkExceptions.size());
      for (NetRule other_element : other.networkExceptions) {
        __this__networkExceptions.add(new NetRule(other_element));
      }
      this.networkExceptions = __this__networkExceptions;
    }
    this.isExam = other.isExam;
    this.hasInternetAccess = other.hasInternetAccess;
    if (other.isSetDefaultPermissions()) {
      this.defaultPermissions = new LecturePermissions(other.defaultPermissions);
    }
    if (other.isSetAddAllowedUsers()) {
      java.util.List<java.lang.String> __this__addAllowedUsers = new java.util.ArrayList<java.lang.String>(other.addAllowedUsers);
      this.addAllowedUsers = __this__addAllowedUsers;
    }
    if (other.isSetRemAllowedUsers()) {
      java.util.List<java.lang.String> __this__remAllowedUsers = new java.util.ArrayList<java.lang.String>(other.remAllowedUsers);
      this.remAllowedUsers = __this__remAllowedUsers;
    }
    if (other.isSetLocationIds()) {
      java.util.List<java.lang.Integer> __this__locationIds = new java.util.ArrayList<java.lang.Integer>(other.locationIds);
      this.locationIds = __this__locationIds;
    }
    this.limitToLocations = other.limitToLocations;
    this.limitToAllowedUsers = other.limitToAllowedUsers;
    this.hasUsbAccess = other.hasUsbAccess;
    if (other.isSetNetworkShares()) {
      java.util.List<NetShare> __this__networkShares = new java.util.ArrayList<NetShare>(other.networkShares.size());
      for (NetShare other_element : other.networkShares) {
        __this__networkShares.add(new NetShare(other_element));
      }
      this.networkShares = __this__networkShares;
    }
    if (other.isSetLdapFilters()) {
      java.util.List<LdapFilter> __this__ldapFilters = new java.util.ArrayList<LdapFilter>(other.ldapFilters.size());
      for (LdapFilter other_element : other.ldapFilters) {
        __this__ldapFilters.add(new LdapFilter(other_element));
      }
      this.ldapFilters = __this__ldapFilters;
    }
    if (other.isSetPresetScriptIds()) {
      java.util.List<java.lang.Integer> __this__presetScriptIds = new java.util.ArrayList<java.lang.Integer>(other.presetScriptIds);
      this.presetScriptIds = __this__presetScriptIds;
    }
    if (other.isSetPresetNetworkExceptionIds()) {
      java.util.List<java.lang.Integer> __this__presetNetworkExceptionIds = new java.util.ArrayList<java.lang.Integer>(other.presetNetworkExceptionIds);
      this.presetNetworkExceptionIds = __this__presetNetworkExceptionIds;
    }
  }

  public LectureWrite deepCopy() {
    return new LectureWrite(this);
  }

  @Override
  public void clear() {
    this.lectureName = null;
    this.description = null;
    this.imageVersionId = null;
    setAutoUpdateIsSet(false);
    this.autoUpdate = false;
    setIsEnabledIsSet(false);
    this.isEnabled = false;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.runscript = null;
    this.nics = null;
    this.networkExceptions = null;
    setIsExamIsSet(false);
    this.isExam = false;
    setHasInternetAccessIsSet(false);
    this.hasInternetAccess = false;
    this.defaultPermissions = null;
    this.addAllowedUsers = null;
    this.remAllowedUsers = null;
    this.locationIds = null;
    setLimitToLocationsIsSet(false);
    this.limitToLocations = false;
    setLimitToAllowedUsersIsSet(false);
    this.limitToAllowedUsers = false;
    setHasUsbAccessIsSet(false);
    this.hasUsbAccess = false;
    this.networkShares = null;
    this.ldapFilters = null;
    this.presetScriptIds = null;
    this.presetNetworkExceptionIds = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLectureName() {
    return this.lectureName;
  }

  public LectureWrite setLectureName(@org.apache.thrift.annotation.Nullable java.lang.String lectureName) {
    this.lectureName = lectureName;
    return this;
  }

  public void unsetLectureName() {
    this.lectureName = null;
  }

  /** Returns true if field lectureName is set (has been assigned a value) and false otherwise */
  public boolean isSetLectureName() {
    return this.lectureName != null;
  }

  public void setLectureNameIsSet(boolean value) {
    if (!value) {
      this.lectureName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public LectureWrite setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageVersionId() {
    return this.imageVersionId;
  }

  public LectureWrite setImageVersionId(@org.apache.thrift.annotation.Nullable java.lang.String imageVersionId) {
    this.imageVersionId = imageVersionId;
    return this;
  }

  public void unsetImageVersionId() {
    this.imageVersionId = null;
  }

  /** Returns true if field imageVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageVersionId() {
    return this.imageVersionId != null;
  }

  public void setImageVersionIdIsSet(boolean value) {
    if (!value) {
      this.imageVersionId = null;
    }
  }

  public boolean isAutoUpdate() {
    return this.autoUpdate;
  }

  public LectureWrite setAutoUpdate(boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
    setAutoUpdateIsSet(true);
    return this;
  }

  public void unsetAutoUpdate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AUTOUPDATE_ISSET_ID);
  }

  /** Returns true if field autoUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoUpdate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AUTOUPDATE_ISSET_ID);
  }

  public void setAutoUpdateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AUTOUPDATE_ISSET_ID, value);
  }

  public boolean isIsEnabled() {
    return this.isEnabled;
  }

  public LectureWrite setIsEnabled(boolean isEnabled) {
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    return this;
  }

  public void unsetIsEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  /** Returns true if field isEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  public void setIsEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISENABLED_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public LectureWrite setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public LectureWrite setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getRunscript() {
    return this.runscript;
  }

  public LectureWrite setRunscript(@org.apache.thrift.annotation.Nullable java.lang.String runscript) {
    this.runscript = runscript;
    return this;
  }

  public void unsetRunscript() {
    this.runscript = null;
  }

  /** Returns true if field runscript is set (has been assigned a value) and false otherwise */
  public boolean isSetRunscript() {
    return this.runscript != null;
  }

  public void setRunscriptIsSet(boolean value) {
    if (!value) {
      this.runscript = null;
    }
  }

  public int getNicsSize() {
    return (this.nics == null) ? 0 : this.nics.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getNicsIterator() {
    return (this.nics == null) ? null : this.nics.iterator();
  }

  public void addToNics(java.lang.String elem) {
    if (this.nics == null) {
      this.nics = new java.util.ArrayList<java.lang.String>();
    }
    this.nics.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getNics() {
    return this.nics;
  }

  public LectureWrite setNics(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> nics) {
    this.nics = nics;
    return this;
  }

  public void unsetNics() {
    this.nics = null;
  }

  /** Returns true if field nics is set (has been assigned a value) and false otherwise */
  public boolean isSetNics() {
    return this.nics != null;
  }

  public void setNicsIsSet(boolean value) {
    if (!value) {
      this.nics = null;
    }
  }

  public int getNetworkExceptionsSize() {
    return (this.networkExceptions == null) ? 0 : this.networkExceptions.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<NetRule> getNetworkExceptionsIterator() {
    return (this.networkExceptions == null) ? null : this.networkExceptions.iterator();
  }

  public void addToNetworkExceptions(NetRule elem) {
    if (this.networkExceptions == null) {
      this.networkExceptions = new java.util.ArrayList<NetRule>();
    }
    this.networkExceptions.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<NetRule> getNetworkExceptions() {
    return this.networkExceptions;
  }

  public LectureWrite setNetworkExceptions(@org.apache.thrift.annotation.Nullable java.util.List<NetRule> networkExceptions) {
    this.networkExceptions = networkExceptions;
    return this;
  }

  public void unsetNetworkExceptions() {
    this.networkExceptions = null;
  }

  /** Returns true if field networkExceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkExceptions() {
    return this.networkExceptions != null;
  }

  public void setNetworkExceptionsIsSet(boolean value) {
    if (!value) {
      this.networkExceptions = null;
    }
  }

  public boolean isIsExam() {
    return this.isExam;
  }

  public LectureWrite setIsExam(boolean isExam) {
    this.isExam = isExam;
    setIsExamIsSet(true);
    return this;
  }

  public void unsetIsExam() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISEXAM_ISSET_ID);
  }

  /** Returns true if field isExam is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExam() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISEXAM_ISSET_ID);
  }

  public void setIsExamIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISEXAM_ISSET_ID, value);
  }

  public boolean isHasInternetAccess() {
    return this.hasInternetAccess;
  }

  public LectureWrite setHasInternetAccess(boolean hasInternetAccess) {
    this.hasInternetAccess = hasInternetAccess;
    setHasInternetAccessIsSet(true);
    return this;
  }

  public void unsetHasInternetAccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASINTERNETACCESS_ISSET_ID);
  }

  /** Returns true if field hasInternetAccess is set (has been assigned a value) and false otherwise */
  public boolean isSetHasInternetAccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASINTERNETACCESS_ISSET_ID);
  }

  public void setHasInternetAccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASINTERNETACCESS_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public LecturePermissions getDefaultPermissions() {
    return this.defaultPermissions;
  }

  public LectureWrite setDefaultPermissions(@org.apache.thrift.annotation.Nullable LecturePermissions defaultPermissions) {
    this.defaultPermissions = defaultPermissions;
    return this;
  }

  public void unsetDefaultPermissions() {
    this.defaultPermissions = null;
  }

  /** Returns true if field defaultPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultPermissions() {
    return this.defaultPermissions != null;
  }

  public void setDefaultPermissionsIsSet(boolean value) {
    if (!value) {
      this.defaultPermissions = null;
    }
  }

  public int getAddAllowedUsersSize() {
    return (this.addAllowedUsers == null) ? 0 : this.addAllowedUsers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getAddAllowedUsersIterator() {
    return (this.addAllowedUsers == null) ? null : this.addAllowedUsers.iterator();
  }

  public void addToAddAllowedUsers(java.lang.String elem) {
    if (this.addAllowedUsers == null) {
      this.addAllowedUsers = new java.util.ArrayList<java.lang.String>();
    }
    this.addAllowedUsers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getAddAllowedUsers() {
    return this.addAllowedUsers;
  }

  public LectureWrite setAddAllowedUsers(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> addAllowedUsers) {
    this.addAllowedUsers = addAllowedUsers;
    return this;
  }

  public void unsetAddAllowedUsers() {
    this.addAllowedUsers = null;
  }

  /** Returns true if field addAllowedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetAddAllowedUsers() {
    return this.addAllowedUsers != null;
  }

  public void setAddAllowedUsersIsSet(boolean value) {
    if (!value) {
      this.addAllowedUsers = null;
    }
  }

  public int getRemAllowedUsersSize() {
    return (this.remAllowedUsers == null) ? 0 : this.remAllowedUsers.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRemAllowedUsersIterator() {
    return (this.remAllowedUsers == null) ? null : this.remAllowedUsers.iterator();
  }

  public void addToRemAllowedUsers(java.lang.String elem) {
    if (this.remAllowedUsers == null) {
      this.remAllowedUsers = new java.util.ArrayList<java.lang.String>();
    }
    this.remAllowedUsers.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRemAllowedUsers() {
    return this.remAllowedUsers;
  }

  public LectureWrite setRemAllowedUsers(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> remAllowedUsers) {
    this.remAllowedUsers = remAllowedUsers;
    return this;
  }

  public void unsetRemAllowedUsers() {
    this.remAllowedUsers = null;
  }

  /** Returns true if field remAllowedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetRemAllowedUsers() {
    return this.remAllowedUsers != null;
  }

  public void setRemAllowedUsersIsSet(boolean value) {
    if (!value) {
      this.remAllowedUsers = null;
    }
  }

  public int getLocationIdsSize() {
    return (this.locationIds == null) ? 0 : this.locationIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getLocationIdsIterator() {
    return (this.locationIds == null) ? null : this.locationIds.iterator();
  }

  public void addToLocationIds(int elem) {
    if (this.locationIds == null) {
      this.locationIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this.locationIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getLocationIds() {
    return this.locationIds;
  }

  public LectureWrite setLocationIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> locationIds) {
    this.locationIds = locationIds;
    return this;
  }

  public void unsetLocationIds() {
    this.locationIds = null;
  }

  /** Returns true if field locationIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationIds() {
    return this.locationIds != null;
  }

  public void setLocationIdsIsSet(boolean value) {
    if (!value) {
      this.locationIds = null;
    }
  }

  public boolean isLimitToLocations() {
    return this.limitToLocations;
  }

  public LectureWrite setLimitToLocations(boolean limitToLocations) {
    this.limitToLocations = limitToLocations;
    setLimitToLocationsIsSet(true);
    return this;
  }

  public void unsetLimitToLocations() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITTOLOCATIONS_ISSET_ID);
  }

  /** Returns true if field limitToLocations is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitToLocations() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITTOLOCATIONS_ISSET_ID);
  }

  public void setLimitToLocationsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITTOLOCATIONS_ISSET_ID, value);
  }

  public boolean isLimitToAllowedUsers() {
    return this.limitToAllowedUsers;
  }

  public LectureWrite setLimitToAllowedUsers(boolean limitToAllowedUsers) {
    this.limitToAllowedUsers = limitToAllowedUsers;
    setLimitToAllowedUsersIsSet(true);
    return this;
  }

  public void unsetLimitToAllowedUsers() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMITTOALLOWEDUSERS_ISSET_ID);
  }

  /** Returns true if field limitToAllowedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitToAllowedUsers() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMITTOALLOWEDUSERS_ISSET_ID);
  }

  public void setLimitToAllowedUsersIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMITTOALLOWEDUSERS_ISSET_ID, value);
  }

  public boolean isHasUsbAccess() {
    return this.hasUsbAccess;
  }

  public LectureWrite setHasUsbAccess(boolean hasUsbAccess) {
    this.hasUsbAccess = hasUsbAccess;
    setHasUsbAccessIsSet(true);
    return this;
  }

  public void unsetHasUsbAccess() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __HASUSBACCESS_ISSET_ID);
  }

  /** Returns true if field hasUsbAccess is set (has been assigned a value) and false otherwise */
  public boolean isSetHasUsbAccess() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __HASUSBACCESS_ISSET_ID);
  }

  public void setHasUsbAccessIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __HASUSBACCESS_ISSET_ID, value);
  }

  public int getNetworkSharesSize() {
    return (this.networkShares == null) ? 0 : this.networkShares.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<NetShare> getNetworkSharesIterator() {
    return (this.networkShares == null) ? null : this.networkShares.iterator();
  }

  public void addToNetworkShares(NetShare elem) {
    if (this.networkShares == null) {
      this.networkShares = new java.util.ArrayList<NetShare>();
    }
    this.networkShares.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<NetShare> getNetworkShares() {
    return this.networkShares;
  }

  public LectureWrite setNetworkShares(@org.apache.thrift.annotation.Nullable java.util.List<NetShare> networkShares) {
    this.networkShares = networkShares;
    return this;
  }

  public void unsetNetworkShares() {
    this.networkShares = null;
  }

  /** Returns true if field networkShares is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkShares() {
    return this.networkShares != null;
  }

  public void setNetworkSharesIsSet(boolean value) {
    if (!value) {
      this.networkShares = null;
    }
  }

  public int getLdapFiltersSize() {
    return (this.ldapFilters == null) ? 0 : this.ldapFilters.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<LdapFilter> getLdapFiltersIterator() {
    return (this.ldapFilters == null) ? null : this.ldapFilters.iterator();
  }

  public void addToLdapFilters(LdapFilter elem) {
    if (this.ldapFilters == null) {
      this.ldapFilters = new java.util.ArrayList<LdapFilter>();
    }
    this.ldapFilters.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<LdapFilter> getLdapFilters() {
    return this.ldapFilters;
  }

  public LectureWrite setLdapFilters(@org.apache.thrift.annotation.Nullable java.util.List<LdapFilter> ldapFilters) {
    this.ldapFilters = ldapFilters;
    return this;
  }

  public void unsetLdapFilters() {
    this.ldapFilters = null;
  }

  /** Returns true if field ldapFilters is set (has been assigned a value) and false otherwise */
  public boolean isSetLdapFilters() {
    return this.ldapFilters != null;
  }

  public void setLdapFiltersIsSet(boolean value) {
    if (!value) {
      this.ldapFilters = null;
    }
  }

  public int getPresetScriptIdsSize() {
    return (this.presetScriptIds == null) ? 0 : this.presetScriptIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getPresetScriptIdsIterator() {
    return (this.presetScriptIds == null) ? null : this.presetScriptIds.iterator();
  }

  public void addToPresetScriptIds(int elem) {
    if (this.presetScriptIds == null) {
      this.presetScriptIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this.presetScriptIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getPresetScriptIds() {
    return this.presetScriptIds;
  }

  public LectureWrite setPresetScriptIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> presetScriptIds) {
    this.presetScriptIds = presetScriptIds;
    return this;
  }

  public void unsetPresetScriptIds() {
    this.presetScriptIds = null;
  }

  /** Returns true if field presetScriptIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPresetScriptIds() {
    return this.presetScriptIds != null;
  }

  public void setPresetScriptIdsIsSet(boolean value) {
    if (!value) {
      this.presetScriptIds = null;
    }
  }

  public int getPresetNetworkExceptionIdsSize() {
    return (this.presetNetworkExceptionIds == null) ? 0 : this.presetNetworkExceptionIds.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.Integer> getPresetNetworkExceptionIdsIterator() {
    return (this.presetNetworkExceptionIds == null) ? null : this.presetNetworkExceptionIds.iterator();
  }

  public void addToPresetNetworkExceptionIds(int elem) {
    if (this.presetNetworkExceptionIds == null) {
      this.presetNetworkExceptionIds = new java.util.ArrayList<java.lang.Integer>();
    }
    this.presetNetworkExceptionIds.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.Integer> getPresetNetworkExceptionIds() {
    return this.presetNetworkExceptionIds;
  }

  public LectureWrite setPresetNetworkExceptionIds(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.Integer> presetNetworkExceptionIds) {
    this.presetNetworkExceptionIds = presetNetworkExceptionIds;
    return this;
  }

  public void unsetPresetNetworkExceptionIds() {
    this.presetNetworkExceptionIds = null;
  }

  /** Returns true if field presetNetworkExceptionIds is set (has been assigned a value) and false otherwise */
  public boolean isSetPresetNetworkExceptionIds() {
    return this.presetNetworkExceptionIds != null;
  }

  public void setPresetNetworkExceptionIdsIsSet(boolean value) {
    if (!value) {
      this.presetNetworkExceptionIds = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case LECTURE_NAME:
      if (value == null) {
        unsetLectureName();
      } else {
        setLectureName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case IMAGE_VERSION_ID:
      if (value == null) {
        unsetImageVersionId();
      } else {
        setImageVersionId((java.lang.String)value);
      }
      break;

    case AUTO_UPDATE:
      if (value == null) {
        unsetAutoUpdate();
      } else {
        setAutoUpdate((java.lang.Boolean)value);
      }
      break;

    case IS_ENABLED:
      if (value == null) {
        unsetIsEnabled();
      } else {
        setIsEnabled((java.lang.Boolean)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((java.lang.Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((java.lang.Long)value);
      }
      break;

    case RUNSCRIPT:
      if (value == null) {
        unsetRunscript();
      } else {
        setRunscript((java.lang.String)value);
      }
      break;

    case NICS:
      if (value == null) {
        unsetNics();
      } else {
        setNics((java.util.List<java.lang.String>)value);
      }
      break;

    case NETWORK_EXCEPTIONS:
      if (value == null) {
        unsetNetworkExceptions();
      } else {
        setNetworkExceptions((java.util.List<NetRule>)value);
      }
      break;

    case IS_EXAM:
      if (value == null) {
        unsetIsExam();
      } else {
        setIsExam((java.lang.Boolean)value);
      }
      break;

    case HAS_INTERNET_ACCESS:
      if (value == null) {
        unsetHasInternetAccess();
      } else {
        setHasInternetAccess((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_PERMISSIONS:
      if (value == null) {
        unsetDefaultPermissions();
      } else {
        setDefaultPermissions((LecturePermissions)value);
      }
      break;

    case ADD_ALLOWED_USERS:
      if (value == null) {
        unsetAddAllowedUsers();
      } else {
        setAddAllowedUsers((java.util.List<java.lang.String>)value);
      }
      break;

    case REM_ALLOWED_USERS:
      if (value == null) {
        unsetRemAllowedUsers();
      } else {
        setRemAllowedUsers((java.util.List<java.lang.String>)value);
      }
      break;

    case LOCATION_IDS:
      if (value == null) {
        unsetLocationIds();
      } else {
        setLocationIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    case LIMIT_TO_LOCATIONS:
      if (value == null) {
        unsetLimitToLocations();
      } else {
        setLimitToLocations((java.lang.Boolean)value);
      }
      break;

    case LIMIT_TO_ALLOWED_USERS:
      if (value == null) {
        unsetLimitToAllowedUsers();
      } else {
        setLimitToAllowedUsers((java.lang.Boolean)value);
      }
      break;

    case HAS_USB_ACCESS:
      if (value == null) {
        unsetHasUsbAccess();
      } else {
        setHasUsbAccess((java.lang.Boolean)value);
      }
      break;

    case NETWORK_SHARES:
      if (value == null) {
        unsetNetworkShares();
      } else {
        setNetworkShares((java.util.List<NetShare>)value);
      }
      break;

    case LDAP_FILTERS:
      if (value == null) {
        unsetLdapFilters();
      } else {
        setLdapFilters((java.util.List<LdapFilter>)value);
      }
      break;

    case PRESET_SCRIPT_IDS:
      if (value == null) {
        unsetPresetScriptIds();
      } else {
        setPresetScriptIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    case PRESET_NETWORK_EXCEPTION_IDS:
      if (value == null) {
        unsetPresetNetworkExceptionIds();
      } else {
        setPresetNetworkExceptionIds((java.util.List<java.lang.Integer>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case LECTURE_NAME:
      return getLectureName();

    case DESCRIPTION:
      return getDescription();

    case IMAGE_VERSION_ID:
      return getImageVersionId();

    case AUTO_UPDATE:
      return isAutoUpdate();

    case IS_ENABLED:
      return isIsEnabled();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case RUNSCRIPT:
      return getRunscript();

    case NICS:
      return getNics();

    case NETWORK_EXCEPTIONS:
      return getNetworkExceptions();

    case IS_EXAM:
      return isIsExam();

    case HAS_INTERNET_ACCESS:
      return isHasInternetAccess();

    case DEFAULT_PERMISSIONS:
      return getDefaultPermissions();

    case ADD_ALLOWED_USERS:
      return getAddAllowedUsers();

    case REM_ALLOWED_USERS:
      return getRemAllowedUsers();

    case LOCATION_IDS:
      return getLocationIds();

    case LIMIT_TO_LOCATIONS:
      return isLimitToLocations();

    case LIMIT_TO_ALLOWED_USERS:
      return isLimitToAllowedUsers();

    case HAS_USB_ACCESS:
      return isHasUsbAccess();

    case NETWORK_SHARES:
      return getNetworkShares();

    case LDAP_FILTERS:
      return getLdapFilters();

    case PRESET_SCRIPT_IDS:
      return getPresetScriptIds();

    case PRESET_NETWORK_EXCEPTION_IDS:
      return getPresetNetworkExceptionIds();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case LECTURE_NAME:
      return isSetLectureName();
    case DESCRIPTION:
      return isSetDescription();
    case IMAGE_VERSION_ID:
      return isSetImageVersionId();
    case AUTO_UPDATE:
      return isSetAutoUpdate();
    case IS_ENABLED:
      return isSetIsEnabled();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case RUNSCRIPT:
      return isSetRunscript();
    case NICS:
      return isSetNics();
    case NETWORK_EXCEPTIONS:
      return isSetNetworkExceptions();
    case IS_EXAM:
      return isSetIsExam();
    case HAS_INTERNET_ACCESS:
      return isSetHasInternetAccess();
    case DEFAULT_PERMISSIONS:
      return isSetDefaultPermissions();
    case ADD_ALLOWED_USERS:
      return isSetAddAllowedUsers();
    case REM_ALLOWED_USERS:
      return isSetRemAllowedUsers();
    case LOCATION_IDS:
      return isSetLocationIds();
    case LIMIT_TO_LOCATIONS:
      return isSetLimitToLocations();
    case LIMIT_TO_ALLOWED_USERS:
      return isSetLimitToAllowedUsers();
    case HAS_USB_ACCESS:
      return isSetHasUsbAccess();
    case NETWORK_SHARES:
      return isSetNetworkShares();
    case LDAP_FILTERS:
      return isSetLdapFilters();
    case PRESET_SCRIPT_IDS:
      return isSetPresetScriptIds();
    case PRESET_NETWORK_EXCEPTION_IDS:
      return isSetPresetNetworkExceptionIds();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof LectureWrite)
      return this.equals((LectureWrite)that);
    return false;
  }

  public boolean equals(LectureWrite that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_lectureName = true && this.isSetLectureName();
    boolean that_present_lectureName = true && that.isSetLectureName();
    if (this_present_lectureName || that_present_lectureName) {
      if (!(this_present_lectureName && that_present_lectureName))
        return false;
      if (!this.lectureName.equals(that.lectureName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_imageVersionId = true && this.isSetImageVersionId();
    boolean that_present_imageVersionId = true && that.isSetImageVersionId();
    if (this_present_imageVersionId || that_present_imageVersionId) {
      if (!(this_present_imageVersionId && that_present_imageVersionId))
        return false;
      if (!this.imageVersionId.equals(that.imageVersionId))
        return false;
    }

    boolean this_present_autoUpdate = true;
    boolean that_present_autoUpdate = true;
    if (this_present_autoUpdate || that_present_autoUpdate) {
      if (!(this_present_autoUpdate && that_present_autoUpdate))
        return false;
      if (this.autoUpdate != that.autoUpdate)
        return false;
    }

    boolean this_present_isEnabled = true;
    boolean that_present_isEnabled = true;
    if (this_present_isEnabled || that_present_isEnabled) {
      if (!(this_present_isEnabled && that_present_isEnabled))
        return false;
      if (this.isEnabled != that.isEnabled)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_runscript = true && this.isSetRunscript();
    boolean that_present_runscript = true && that.isSetRunscript();
    if (this_present_runscript || that_present_runscript) {
      if (!(this_present_runscript && that_present_runscript))
        return false;
      if (!this.runscript.equals(that.runscript))
        return false;
    }

    boolean this_present_nics = true && this.isSetNics();
    boolean that_present_nics = true && that.isSetNics();
    if (this_present_nics || that_present_nics) {
      if (!(this_present_nics && that_present_nics))
        return false;
      if (!this.nics.equals(that.nics))
        return false;
    }

    boolean this_present_networkExceptions = true && this.isSetNetworkExceptions();
    boolean that_present_networkExceptions = true && that.isSetNetworkExceptions();
    if (this_present_networkExceptions || that_present_networkExceptions) {
      if (!(this_present_networkExceptions && that_present_networkExceptions))
        return false;
      if (!this.networkExceptions.equals(that.networkExceptions))
        return false;
    }

    boolean this_present_isExam = true;
    boolean that_present_isExam = true;
    if (this_present_isExam || that_present_isExam) {
      if (!(this_present_isExam && that_present_isExam))
        return false;
      if (this.isExam != that.isExam)
        return false;
    }

    boolean this_present_hasInternetAccess = true;
    boolean that_present_hasInternetAccess = true;
    if (this_present_hasInternetAccess || that_present_hasInternetAccess) {
      if (!(this_present_hasInternetAccess && that_present_hasInternetAccess))
        return false;
      if (this.hasInternetAccess != that.hasInternetAccess)
        return false;
    }

    boolean this_present_defaultPermissions = true && this.isSetDefaultPermissions();
    boolean that_present_defaultPermissions = true && that.isSetDefaultPermissions();
    if (this_present_defaultPermissions || that_present_defaultPermissions) {
      if (!(this_present_defaultPermissions && that_present_defaultPermissions))
        return false;
      if (!this.defaultPermissions.equals(that.defaultPermissions))
        return false;
    }

    boolean this_present_addAllowedUsers = true && this.isSetAddAllowedUsers();
    boolean that_present_addAllowedUsers = true && that.isSetAddAllowedUsers();
    if (this_present_addAllowedUsers || that_present_addAllowedUsers) {
      if (!(this_present_addAllowedUsers && that_present_addAllowedUsers))
        return false;
      if (!this.addAllowedUsers.equals(that.addAllowedUsers))
        return false;
    }

    boolean this_present_remAllowedUsers = true && this.isSetRemAllowedUsers();
    boolean that_present_remAllowedUsers = true && that.isSetRemAllowedUsers();
    if (this_present_remAllowedUsers || that_present_remAllowedUsers) {
      if (!(this_present_remAllowedUsers && that_present_remAllowedUsers))
        return false;
      if (!this.remAllowedUsers.equals(that.remAllowedUsers))
        return false;
    }

    boolean this_present_locationIds = true && this.isSetLocationIds();
    boolean that_present_locationIds = true && that.isSetLocationIds();
    if (this_present_locationIds || that_present_locationIds) {
      if (!(this_present_locationIds && that_present_locationIds))
        return false;
      if (!this.locationIds.equals(that.locationIds))
        return false;
    }

    boolean this_present_limitToLocations = true;
    boolean that_present_limitToLocations = true;
    if (this_present_limitToLocations || that_present_limitToLocations) {
      if (!(this_present_limitToLocations && that_present_limitToLocations))
        return false;
      if (this.limitToLocations != that.limitToLocations)
        return false;
    }

    boolean this_present_limitToAllowedUsers = true;
    boolean that_present_limitToAllowedUsers = true;
    if (this_present_limitToAllowedUsers || that_present_limitToAllowedUsers) {
      if (!(this_present_limitToAllowedUsers && that_present_limitToAllowedUsers))
        return false;
      if (this.limitToAllowedUsers != that.limitToAllowedUsers)
        return false;
    }

    boolean this_present_hasUsbAccess = true;
    boolean that_present_hasUsbAccess = true;
    if (this_present_hasUsbAccess || that_present_hasUsbAccess) {
      if (!(this_present_hasUsbAccess && that_present_hasUsbAccess))
        return false;
      if (this.hasUsbAccess != that.hasUsbAccess)
        return false;
    }

    boolean this_present_networkShares = true && this.isSetNetworkShares();
    boolean that_present_networkShares = true && that.isSetNetworkShares();
    if (this_present_networkShares || that_present_networkShares) {
      if (!(this_present_networkShares && that_present_networkShares))
        return false;
      if (!this.networkShares.equals(that.networkShares))
        return false;
    }

    boolean this_present_ldapFilters = true && this.isSetLdapFilters();
    boolean that_present_ldapFilters = true && that.isSetLdapFilters();
    if (this_present_ldapFilters || that_present_ldapFilters) {
      if (!(this_present_ldapFilters && that_present_ldapFilters))
        return false;
      if (!this.ldapFilters.equals(that.ldapFilters))
        return false;
    }

    boolean this_present_presetScriptIds = true && this.isSetPresetScriptIds();
    boolean that_present_presetScriptIds = true && that.isSetPresetScriptIds();
    if (this_present_presetScriptIds || that_present_presetScriptIds) {
      if (!(this_present_presetScriptIds && that_present_presetScriptIds))
        return false;
      if (!this.presetScriptIds.equals(that.presetScriptIds))
        return false;
    }

    boolean this_present_presetNetworkExceptionIds = true && this.isSetPresetNetworkExceptionIds();
    boolean that_present_presetNetworkExceptionIds = true && that.isSetPresetNetworkExceptionIds();
    if (this_present_presetNetworkExceptionIds || that_present_presetNetworkExceptionIds) {
      if (!(this_present_presetNetworkExceptionIds && that_present_presetNetworkExceptionIds))
        return false;
      if (!this.presetNetworkExceptionIds.equals(that.presetNetworkExceptionIds))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetLectureName()) ? 131071 : 524287);
    if (isSetLectureName())
      hashCode = hashCode * 8191 + lectureName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageVersionId()) ? 131071 : 524287);
    if (isSetImageVersionId())
      hashCode = hashCode * 8191 + imageVersionId.hashCode();

    hashCode = hashCode * 8191 + ((autoUpdate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isEnabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(startTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTime);

    hashCode = hashCode * 8191 + ((isSetRunscript()) ? 131071 : 524287);
    if (isSetRunscript())
      hashCode = hashCode * 8191 + runscript.hashCode();

    hashCode = hashCode * 8191 + ((isSetNics()) ? 131071 : 524287);
    if (isSetNics())
      hashCode = hashCode * 8191 + nics.hashCode();

    hashCode = hashCode * 8191 + ((isSetNetworkExceptions()) ? 131071 : 524287);
    if (isSetNetworkExceptions())
      hashCode = hashCode * 8191 + networkExceptions.hashCode();

    hashCode = hashCode * 8191 + ((isExam) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hasInternetAccess) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefaultPermissions()) ? 131071 : 524287);
    if (isSetDefaultPermissions())
      hashCode = hashCode * 8191 + defaultPermissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetAddAllowedUsers()) ? 131071 : 524287);
    if (isSetAddAllowedUsers())
      hashCode = hashCode * 8191 + addAllowedUsers.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemAllowedUsers()) ? 131071 : 524287);
    if (isSetRemAllowedUsers())
      hashCode = hashCode * 8191 + remAllowedUsers.hashCode();

    hashCode = hashCode * 8191 + ((isSetLocationIds()) ? 131071 : 524287);
    if (isSetLocationIds())
      hashCode = hashCode * 8191 + locationIds.hashCode();

    hashCode = hashCode * 8191 + ((limitToLocations) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((limitToAllowedUsers) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((hasUsbAccess) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetNetworkShares()) ? 131071 : 524287);
    if (isSetNetworkShares())
      hashCode = hashCode * 8191 + networkShares.hashCode();

    hashCode = hashCode * 8191 + ((isSetLdapFilters()) ? 131071 : 524287);
    if (isSetLdapFilters())
      hashCode = hashCode * 8191 + ldapFilters.hashCode();

    hashCode = hashCode * 8191 + ((isSetPresetScriptIds()) ? 131071 : 524287);
    if (isSetPresetScriptIds())
      hashCode = hashCode * 8191 + presetScriptIds.hashCode();

    hashCode = hashCode * 8191 + ((isSetPresetNetworkExceptionIds()) ? 131071 : 524287);
    if (isSetPresetNetworkExceptionIds())
      hashCode = hashCode * 8191 + presetNetworkExceptionIds.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LectureWrite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetLectureName(), other.isSetLectureName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLectureName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureName, other.lectureName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetImageVersionId(), other.isSetImageVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageVersionId, other.imageVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAutoUpdate(), other.isSetAutoUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoUpdate, other.autoUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsEnabled(), other.isSetIsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnabled, other.isEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetStartTime(), other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetEndTime(), other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRunscript(), other.isSetRunscript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunscript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runscript, other.runscript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNics(), other.isSetNics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nics, other.nics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNetworkExceptions(), other.isSetNetworkExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkExceptions, other.networkExceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsExam(), other.isSetIsExam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExam, other.isExam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHasInternetAccess(), other.isSetHasInternetAccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasInternetAccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasInternetAccess, other.hasInternetAccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultPermissions(), other.isSetDefaultPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPermissions, other.defaultPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAddAllowedUsers(), other.isSetAddAllowedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddAllowedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addAllowedUsers, other.addAllowedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRemAllowedUsers(), other.isSetRemAllowedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemAllowedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remAllowedUsers, other.remAllowedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLocationIds(), other.isSetLocationIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationIds, other.locationIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimitToLocations(), other.isSetLimitToLocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitToLocations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitToLocations, other.limitToLocations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLimitToAllowedUsers(), other.isSetLimitToAllowedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitToAllowedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitToAllowedUsers, other.limitToAllowedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHasUsbAccess(), other.isSetHasUsbAccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasUsbAccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasUsbAccess, other.hasUsbAccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNetworkShares(), other.isSetNetworkShares());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkShares()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkShares, other.networkShares);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLdapFilters(), other.isSetLdapFilters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLdapFilters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ldapFilters, other.ldapFilters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPresetScriptIds(), other.isSetPresetScriptIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresetScriptIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presetScriptIds, other.presetScriptIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPresetNetworkExceptionIds(), other.isSetPresetNetworkExceptionIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPresetNetworkExceptionIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.presetNetworkExceptionIds, other.presetNetworkExceptionIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LectureWrite(");
    boolean first = true;

    sb.append("lectureName:");
    if (this.lectureName == null) {
      sb.append("null");
    } else {
      sb.append(this.lectureName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageVersionId:");
    if (this.imageVersionId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageVersionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoUpdate:");
    sb.append(this.autoUpdate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnabled:");
    sb.append(this.isEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runscript:");
    if (this.runscript == null) {
      sb.append("null");
    } else {
      sb.append(this.runscript);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nics:");
    if (this.nics == null) {
      sb.append("null");
    } else {
      sb.append(this.nics);
    }
    first = false;
    if (isSetNetworkExceptions()) {
      if (!first) sb.append(", ");
      sb.append("networkExceptions:");
      if (this.networkExceptions == null) {
        sb.append("null");
      } else {
        sb.append(this.networkExceptions);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isExam:");
    sb.append(this.isExam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasInternetAccess:");
    sb.append(this.hasInternetAccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultPermissions:");
    if (this.defaultPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultPermissions);
    }
    first = false;
    if (isSetAddAllowedUsers()) {
      if (!first) sb.append(", ");
      sb.append("addAllowedUsers:");
      if (this.addAllowedUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.addAllowedUsers);
      }
      first = false;
    }
    if (isSetRemAllowedUsers()) {
      if (!first) sb.append(", ");
      sb.append("remAllowedUsers:");
      if (this.remAllowedUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.remAllowedUsers);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("locationIds:");
    if (this.locationIds == null) {
      sb.append("null");
    } else {
      sb.append(this.locationIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitToLocations:");
    sb.append(this.limitToLocations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitToAllowedUsers:");
    sb.append(this.limitToAllowedUsers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasUsbAccess:");
    sb.append(this.hasUsbAccess);
    first = false;
    if (isSetNetworkShares()) {
      if (!first) sb.append(", ");
      sb.append("networkShares:");
      if (this.networkShares == null) {
        sb.append("null");
      } else {
        sb.append(this.networkShares);
      }
      first = false;
    }
    if (isSetLdapFilters()) {
      if (!first) sb.append(", ");
      sb.append("ldapFilters:");
      if (this.ldapFilters == null) {
        sb.append("null");
      } else {
        sb.append(this.ldapFilters);
      }
      first = false;
    }
    if (isSetPresetScriptIds()) {
      if (!first) sb.append(", ");
      sb.append("presetScriptIds:");
      if (this.presetScriptIds == null) {
        sb.append("null");
      } else {
        sb.append(this.presetScriptIds);
      }
      first = false;
    }
    if (isSetPresetNetworkExceptionIds()) {
      if (!first) sb.append(", ");
      sb.append("presetNetworkExceptionIds:");
      if (this.presetNetworkExceptionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.presetNetworkExceptionIds);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultPermissions != null) {
      defaultPermissions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LectureWriteStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LectureWriteStandardScheme getScheme() {
      return new LectureWriteStandardScheme();
    }
  }

  private static class LectureWriteStandardScheme extends org.apache.thrift.scheme.StandardScheme<LectureWrite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LectureWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LECTURE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lectureName = iprot.readString();
              struct.setLectureNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageVersionId = iprot.readString();
              struct.setImageVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTO_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoUpdate = iprot.readBool();
              struct.setAutoUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnabled = iprot.readBool();
              struct.setIsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RUNSCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runscript = iprot.readString();
              struct.setRunscriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                struct.nics = new java.util.ArrayList<java.lang.String>(_list138.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem139;
                for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                {
                  _elem139 = iprot.readString();
                  struct.nics.add(_elem139);
                }
                iprot.readListEnd();
              }
              struct.setNicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NETWORK_EXCEPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list141 = iprot.readListBegin();
                struct.networkExceptions = new java.util.ArrayList<NetRule>(_list141.size);
                @org.apache.thrift.annotation.Nullable NetRule _elem142;
                for (int _i143 = 0; _i143 < _list141.size; ++_i143)
                {
                  _elem142 = new NetRule();
                  _elem142.read(iprot);
                  struct.networkExceptions.add(_elem142);
                }
                iprot.readListEnd();
              }
              struct.setNetworkExceptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_EXAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isExam = iprot.readBool();
              struct.setIsExamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HAS_INTERNET_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasInternetAccess = iprot.readBool();
              struct.setHasInternetAccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEFAULT_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultPermissions = new LecturePermissions();
              struct.defaultPermissions.read(iprot);
              struct.setDefaultPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADD_ALLOWED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                struct.addAllowedUsers = new java.util.ArrayList<java.lang.String>(_list144.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem145;
                for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                {
                  _elem145 = iprot.readString();
                  struct.addAllowedUsers.add(_elem145);
                }
                iprot.readListEnd();
              }
              struct.setAddAllowedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REM_ALLOWED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list147 = iprot.readListBegin();
                struct.remAllowedUsers = new java.util.ArrayList<java.lang.String>(_list147.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem148;
                for (int _i149 = 0; _i149 < _list147.size; ++_i149)
                {
                  _elem148 = iprot.readString();
                  struct.remAllowedUsers.add(_elem148);
                }
                iprot.readListEnd();
              }
              struct.setRemAllowedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOCATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list150 = iprot.readListBegin();
                struct.locationIds = new java.util.ArrayList<java.lang.Integer>(_list150.size);
                int _elem151;
                for (int _i152 = 0; _i152 < _list150.size; ++_i152)
                {
                  _elem151 = iprot.readI32();
                  struct.locationIds.add(_elem151);
                }
                iprot.readListEnd();
              }
              struct.setLocationIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LIMIT_TO_LOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limitToLocations = iprot.readBool();
              struct.setLimitToLocationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LIMIT_TO_ALLOWED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limitToAllowedUsers = iprot.readBool();
              struct.setLimitToAllowedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HAS_USB_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasUsbAccess = iprot.readBool();
              struct.setHasUsbAccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // NETWORK_SHARES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list153 = iprot.readListBegin();
                struct.networkShares = new java.util.ArrayList<NetShare>(_list153.size);
                @org.apache.thrift.annotation.Nullable NetShare _elem154;
                for (int _i155 = 0; _i155 < _list153.size; ++_i155)
                {
                  _elem154 = new NetShare();
                  _elem154.read(iprot);
                  struct.networkShares.add(_elem154);
                }
                iprot.readListEnd();
              }
              struct.setNetworkSharesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // LDAP_FILTERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list156 = iprot.readListBegin();
                struct.ldapFilters = new java.util.ArrayList<LdapFilter>(_list156.size);
                @org.apache.thrift.annotation.Nullable LdapFilter _elem157;
                for (int _i158 = 0; _i158 < _list156.size; ++_i158)
                {
                  _elem157 = new LdapFilter();
                  _elem157.read(iprot);
                  struct.ldapFilters.add(_elem157);
                }
                iprot.readListEnd();
              }
              struct.setLdapFiltersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // PRESET_SCRIPT_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list159 = iprot.readListBegin();
                struct.presetScriptIds = new java.util.ArrayList<java.lang.Integer>(_list159.size);
                int _elem160;
                for (int _i161 = 0; _i161 < _list159.size; ++_i161)
                {
                  _elem160 = iprot.readI32();
                  struct.presetScriptIds.add(_elem160);
                }
                iprot.readListEnd();
              }
              struct.setPresetScriptIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 24: // PRESET_NETWORK_EXCEPTION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list162 = iprot.readListBegin();
                struct.presetNetworkExceptionIds = new java.util.ArrayList<java.lang.Integer>(_list162.size);
                int _elem163;
                for (int _i164 = 0; _i164 < _list162.size; ++_i164)
                {
                  _elem163 = iprot.readI32();
                  struct.presetNetworkExceptionIds.add(_elem163);
                }
                iprot.readListEnd();
              }
              struct.setPresetNetworkExceptionIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LectureWrite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lectureName != null) {
        oprot.writeFieldBegin(LECTURE_NAME_FIELD_DESC);
        oprot.writeString(struct.lectureName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.imageVersionId != null) {
        oprot.writeFieldBegin(IMAGE_VERSION_ID_FIELD_DESC);
        oprot.writeString(struct.imageVersionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTO_UPDATE_FIELD_DESC);
      oprot.writeBool(struct.autoUpdate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.isEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.runscript != null) {
        oprot.writeFieldBegin(RUNSCRIPT_FIELD_DESC);
        oprot.writeString(struct.runscript);
        oprot.writeFieldEnd();
      }
      if (struct.nics != null) {
        oprot.writeFieldBegin(NICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nics.size()));
          for (java.lang.String _iter165 : struct.nics)
          {
            oprot.writeString(_iter165);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.addAllowedUsers != null) {
        if (struct.isSetAddAllowedUsers()) {
          oprot.writeFieldBegin(ADD_ALLOWED_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.addAllowedUsers.size()));
            for (java.lang.String _iter166 : struct.addAllowedUsers)
            {
              oprot.writeString(_iter166);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkExceptions != null) {
        if (struct.isSetNetworkExceptions()) {
          oprot.writeFieldBegin(NETWORK_EXCEPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.networkExceptions.size()));
            for (NetRule _iter167 : struct.networkExceptions)
            {
              _iter167.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_EXAM_FIELD_DESC);
      oprot.writeBool(struct.isExam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_INTERNET_ACCESS_FIELD_DESC);
      oprot.writeBool(struct.hasInternetAccess);
      oprot.writeFieldEnd();
      if (struct.defaultPermissions != null) {
        oprot.writeFieldBegin(DEFAULT_PERMISSIONS_FIELD_DESC);
        struct.defaultPermissions.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remAllowedUsers != null) {
        if (struct.isSetRemAllowedUsers()) {
          oprot.writeFieldBegin(REM_ALLOWED_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.remAllowedUsers.size()));
            for (java.lang.String _iter168 : struct.remAllowedUsers)
            {
              oprot.writeString(_iter168);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.locationIds != null) {
        oprot.writeFieldBegin(LOCATION_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.locationIds.size()));
          for (int _iter169 : struct.locationIds)
          {
            oprot.writeI32(_iter169);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_TO_LOCATIONS_FIELD_DESC);
      oprot.writeBool(struct.limitToLocations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_TO_ALLOWED_USERS_FIELD_DESC);
      oprot.writeBool(struct.limitToAllowedUsers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_USB_ACCESS_FIELD_DESC);
      oprot.writeBool(struct.hasUsbAccess);
      oprot.writeFieldEnd();
      if (struct.networkShares != null) {
        if (struct.isSetNetworkShares()) {
          oprot.writeFieldBegin(NETWORK_SHARES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.networkShares.size()));
            for (NetShare _iter170 : struct.networkShares)
            {
              _iter170.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.ldapFilters != null) {
        if (struct.isSetLdapFilters()) {
          oprot.writeFieldBegin(LDAP_FILTERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.ldapFilters.size()));
            for (LdapFilter _iter171 : struct.ldapFilters)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.presetScriptIds != null) {
        if (struct.isSetPresetScriptIds()) {
          oprot.writeFieldBegin(PRESET_SCRIPT_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.presetScriptIds.size()));
            for (int _iter172 : struct.presetScriptIds)
            {
              oprot.writeI32(_iter172);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.presetNetworkExceptionIds != null) {
        if (struct.isSetPresetNetworkExceptionIds()) {
          oprot.writeFieldBegin(PRESET_NETWORK_EXCEPTION_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.presetNetworkExceptionIds.size()));
            for (int _iter173 : struct.presetNetworkExceptionIds)
            {
              oprot.writeI32(_iter173);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LectureWriteTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LectureWriteTupleScheme getScheme() {
      return new LectureWriteTupleScheme();
    }
  }

  private static class LectureWriteTupleScheme extends org.apache.thrift.scheme.TupleScheme<LectureWrite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LectureWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetLectureName()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetImageVersionId()) {
        optionals.set(2);
      }
      if (struct.isSetAutoUpdate()) {
        optionals.set(3);
      }
      if (struct.isSetIsEnabled()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetRunscript()) {
        optionals.set(7);
      }
      if (struct.isSetNics()) {
        optionals.set(8);
      }
      if (struct.isSetNetworkExceptions()) {
        optionals.set(9);
      }
      if (struct.isSetIsExam()) {
        optionals.set(10);
      }
      if (struct.isSetHasInternetAccess()) {
        optionals.set(11);
      }
      if (struct.isSetDefaultPermissions()) {
        optionals.set(12);
      }
      if (struct.isSetAddAllowedUsers()) {
        optionals.set(13);
      }
      if (struct.isSetRemAllowedUsers()) {
        optionals.set(14);
      }
      if (struct.isSetLocationIds()) {
        optionals.set(15);
      }
      if (struct.isSetLimitToLocations()) {
        optionals.set(16);
      }
      if (struct.isSetLimitToAllowedUsers()) {
        optionals.set(17);
      }
      if (struct.isSetHasUsbAccess()) {
        optionals.set(18);
      }
      if (struct.isSetNetworkShares()) {
        optionals.set(19);
      }
      if (struct.isSetLdapFilters()) {
        optionals.set(20);
      }
      if (struct.isSetPresetScriptIds()) {
        optionals.set(21);
      }
      if (struct.isSetPresetNetworkExceptionIds()) {
        optionals.set(22);
      }
      oprot.writeBitSet(optionals, 23);
      if (struct.isSetLectureName()) {
        oprot.writeString(struct.lectureName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetImageVersionId()) {
        oprot.writeString(struct.imageVersionId);
      }
      if (struct.isSetAutoUpdate()) {
        oprot.writeBool(struct.autoUpdate);
      }
      if (struct.isSetIsEnabled()) {
        oprot.writeBool(struct.isEnabled);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetRunscript()) {
        oprot.writeString(struct.runscript);
      }
      if (struct.isSetNics()) {
        {
          oprot.writeI32(struct.nics.size());
          for (java.lang.String _iter174 : struct.nics)
          {
            oprot.writeString(_iter174);
          }
        }
      }
      if (struct.isSetNetworkExceptions()) {
        {
          oprot.writeI32(struct.networkExceptions.size());
          for (NetRule _iter175 : struct.networkExceptions)
          {
            _iter175.write(oprot);
          }
        }
      }
      if (struct.isSetIsExam()) {
        oprot.writeBool(struct.isExam);
      }
      if (struct.isSetHasInternetAccess()) {
        oprot.writeBool(struct.hasInternetAccess);
      }
      if (struct.isSetDefaultPermissions()) {
        struct.defaultPermissions.write(oprot);
      }
      if (struct.isSetAddAllowedUsers()) {
        {
          oprot.writeI32(struct.addAllowedUsers.size());
          for (java.lang.String _iter176 : struct.addAllowedUsers)
          {
            oprot.writeString(_iter176);
          }
        }
      }
      if (struct.isSetRemAllowedUsers()) {
        {
          oprot.writeI32(struct.remAllowedUsers.size());
          for (java.lang.String _iter177 : struct.remAllowedUsers)
          {
            oprot.writeString(_iter177);
          }
        }
      }
      if (struct.isSetLocationIds()) {
        {
          oprot.writeI32(struct.locationIds.size());
          for (int _iter178 : struct.locationIds)
          {
            oprot.writeI32(_iter178);
          }
        }
      }
      if (struct.isSetLimitToLocations()) {
        oprot.writeBool(struct.limitToLocations);
      }
      if (struct.isSetLimitToAllowedUsers()) {
        oprot.writeBool(struct.limitToAllowedUsers);
      }
      if (struct.isSetHasUsbAccess()) {
        oprot.writeBool(struct.hasUsbAccess);
      }
      if (struct.isSetNetworkShares()) {
        {
          oprot.writeI32(struct.networkShares.size());
          for (NetShare _iter179 : struct.networkShares)
          {
            _iter179.write(oprot);
          }
        }
      }
      if (struct.isSetLdapFilters()) {
        {
          oprot.writeI32(struct.ldapFilters.size());
          for (LdapFilter _iter180 : struct.ldapFilters)
          {
            _iter180.write(oprot);
          }
        }
      }
      if (struct.isSetPresetScriptIds()) {
        {
          oprot.writeI32(struct.presetScriptIds.size());
          for (int _iter181 : struct.presetScriptIds)
          {
            oprot.writeI32(_iter181);
          }
        }
      }
      if (struct.isSetPresetNetworkExceptionIds()) {
        {
          oprot.writeI32(struct.presetNetworkExceptionIds.size());
          for (int _iter182 : struct.presetNetworkExceptionIds)
          {
            oprot.writeI32(_iter182);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LectureWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(23);
      if (incoming.get(0)) {
        struct.lectureName = iprot.readString();
        struct.setLectureNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageVersionId = iprot.readString();
        struct.setImageVersionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.autoUpdate = iprot.readBool();
        struct.setAutoUpdateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isEnabled = iprot.readBool();
        struct.setIsEnabledIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.runscript = iprot.readString();
        struct.setRunscriptIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list183 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.nics = new java.util.ArrayList<java.lang.String>(_list183.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem184;
          for (int _i185 = 0; _i185 < _list183.size; ++_i185)
          {
            _elem184 = iprot.readString();
            struct.nics.add(_elem184);
          }
        }
        struct.setNicsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list186 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.networkExceptions = new java.util.ArrayList<NetRule>(_list186.size);
          @org.apache.thrift.annotation.Nullable NetRule _elem187;
          for (int _i188 = 0; _i188 < _list186.size; ++_i188)
          {
            _elem187 = new NetRule();
            _elem187.read(iprot);
            struct.networkExceptions.add(_elem187);
          }
        }
        struct.setNetworkExceptionsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isExam = iprot.readBool();
        struct.setIsExamIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hasInternetAccess = iprot.readBool();
        struct.setHasInternetAccessIsSet(true);
      }
      if (incoming.get(12)) {
        struct.defaultPermissions = new LecturePermissions();
        struct.defaultPermissions.read(iprot);
        struct.setDefaultPermissionsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list189 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.addAllowedUsers = new java.util.ArrayList<java.lang.String>(_list189.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem190;
          for (int _i191 = 0; _i191 < _list189.size; ++_i191)
          {
            _elem190 = iprot.readString();
            struct.addAllowedUsers.add(_elem190);
          }
        }
        struct.setAddAllowedUsersIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list192 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.remAllowedUsers = new java.util.ArrayList<java.lang.String>(_list192.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem193;
          for (int _i194 = 0; _i194 < _list192.size; ++_i194)
          {
            _elem193 = iprot.readString();
            struct.remAllowedUsers.add(_elem193);
          }
        }
        struct.setRemAllowedUsersIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list195 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.locationIds = new java.util.ArrayList<java.lang.Integer>(_list195.size);
          int _elem196;
          for (int _i197 = 0; _i197 < _list195.size; ++_i197)
          {
            _elem196 = iprot.readI32();
            struct.locationIds.add(_elem196);
          }
        }
        struct.setLocationIdsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.limitToLocations = iprot.readBool();
        struct.setLimitToLocationsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.limitToAllowedUsers = iprot.readBool();
        struct.setLimitToAllowedUsersIsSet(true);
      }
      if (incoming.get(18)) {
        struct.hasUsbAccess = iprot.readBool();
        struct.setHasUsbAccessIsSet(true);
      }
      if (incoming.get(19)) {
        {
          org.apache.thrift.protocol.TList _list198 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.networkShares = new java.util.ArrayList<NetShare>(_list198.size);
          @org.apache.thrift.annotation.Nullable NetShare _elem199;
          for (int _i200 = 0; _i200 < _list198.size; ++_i200)
          {
            _elem199 = new NetShare();
            _elem199.read(iprot);
            struct.networkShares.add(_elem199);
          }
        }
        struct.setNetworkSharesIsSet(true);
      }
      if (incoming.get(20)) {
        {
          org.apache.thrift.protocol.TList _list201 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRUCT);
          struct.ldapFilters = new java.util.ArrayList<LdapFilter>(_list201.size);
          @org.apache.thrift.annotation.Nullable LdapFilter _elem202;
          for (int _i203 = 0; _i203 < _list201.size; ++_i203)
          {
            _elem202 = new LdapFilter();
            _elem202.read(iprot);
            struct.ldapFilters.add(_elem202);
          }
        }
        struct.setLdapFiltersIsSet(true);
      }
      if (incoming.get(21)) {
        {
          org.apache.thrift.protocol.TList _list204 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.presetScriptIds = new java.util.ArrayList<java.lang.Integer>(_list204.size);
          int _elem205;
          for (int _i206 = 0; _i206 < _list204.size; ++_i206)
          {
            _elem205 = iprot.readI32();
            struct.presetScriptIds.add(_elem205);
          }
        }
        struct.setPresetScriptIdsIsSet(true);
      }
      if (incoming.get(22)) {
        {
          org.apache.thrift.protocol.TList _list207 = iprot.readListBegin(org.apache.thrift.protocol.TType.I32);
          struct.presetNetworkExceptionIds = new java.util.ArrayList<java.lang.Integer>(_list207.size);
          int _elem208;
          for (int _i209 = 0; _i209 < _list207.size; ++_i209)
          {
            _elem208 = iprot.readI32();
            struct.presetNetworkExceptionIds.add(_elem208);
          }
        }
        struct.setPresetNetworkExceptionIdsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

