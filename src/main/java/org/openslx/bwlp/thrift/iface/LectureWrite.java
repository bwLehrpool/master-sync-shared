/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-03-02")
public class LectureWrite implements org.apache.thrift.TBase<LectureWrite, LectureWrite._Fields>, java.io.Serializable, Cloneable, Comparable<LectureWrite> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LectureWrite");

  private static final org.apache.thrift.protocol.TField LECTURE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lectureName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IMAGE_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageVersionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AUTO_UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("autoUpdate", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField IS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isEnabled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField START_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("startTime", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField END_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField RUNSCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("runscript", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NICS_FIELD_DESC = new org.apache.thrift.protocol.TField("nics", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField NETWORK_EXCEPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("networkExceptions", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField IS_EXAM_FIELD_DESC = new org.apache.thrift.protocol.TField("isExam", org.apache.thrift.protocol.TType.BOOL, (short)13);
  private static final org.apache.thrift.protocol.TField HAS_INTERNET_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasInternetAccess", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField DEFAULT_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)15);
  private static final org.apache.thrift.protocol.TField ADD_ALLOWED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("addAllowedUsers", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField REM_ALLOWED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("remAllowedUsers", org.apache.thrift.protocol.TType.LIST, (short)16);
  private static final org.apache.thrift.protocol.TField LOCATION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("locationIds", org.apache.thrift.protocol.TType.LIST, (short)17);
  private static final org.apache.thrift.protocol.TField LIMIT_TO_LOCATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("limitToLocations", org.apache.thrift.protocol.TType.BOOL, (short)18);
  private static final org.apache.thrift.protocol.TField LIMIT_TO_ALLOWED_USERS_FIELD_DESC = new org.apache.thrift.protocol.TField("limitToAllowedUsers", org.apache.thrift.protocol.TType.BOOL, (short)19);
  private static final org.apache.thrift.protocol.TField HAS_USB_ACCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("hasUsbAccess", org.apache.thrift.protocol.TType.BOOL, (short)20);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LectureWriteStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LectureWriteTupleSchemeFactory());
  }

  public String lectureName; // required
  public String description; // required
  public String imageVersionId; // required
  public boolean autoUpdate; // required
  public boolean isEnabled; // required
  public long startTime; // required
  public long endTime; // required
  public String runscript; // required
  public List<String> nics; // required
  public List<NetRule> networkExceptions; // optional
  public boolean isExam; // required
  public boolean hasInternetAccess; // required
  public LecturePermissions defaultPermissions; // required
  public List<String> addAllowedUsers; // optional
  public List<String> remAllowedUsers; // optional
  public List<Integer> locationIds; // required
  public boolean limitToLocations; // required
  public boolean limitToAllowedUsers; // required
  public boolean hasUsbAccess; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LECTURE_NAME((short)1, "lectureName"),
    DESCRIPTION((short)2, "description"),
    IMAGE_VERSION_ID((short)3, "imageVersionId"),
    AUTO_UPDATE((short)4, "autoUpdate"),
    IS_ENABLED((short)5, "isEnabled"),
    START_TIME((short)6, "startTime"),
    END_TIME((short)7, "endTime"),
    RUNSCRIPT((short)9, "runscript"),
    NICS((short)10, "nics"),
    NETWORK_EXCEPTIONS((short)12, "networkExceptions"),
    IS_EXAM((short)13, "isExam"),
    HAS_INTERNET_ACCESS((short)14, "hasInternetAccess"),
    DEFAULT_PERMISSIONS((short)15, "defaultPermissions"),
    ADD_ALLOWED_USERS((short)11, "addAllowedUsers"),
    REM_ALLOWED_USERS((short)16, "remAllowedUsers"),
    LOCATION_IDS((short)17, "locationIds"),
    LIMIT_TO_LOCATIONS((short)18, "limitToLocations"),
    LIMIT_TO_ALLOWED_USERS((short)19, "limitToAllowedUsers"),
    HAS_USB_ACCESS((short)20, "hasUsbAccess");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LECTURE_NAME
          return LECTURE_NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // IMAGE_VERSION_ID
          return IMAGE_VERSION_ID;
        case 4: // AUTO_UPDATE
          return AUTO_UPDATE;
        case 5: // IS_ENABLED
          return IS_ENABLED;
        case 6: // START_TIME
          return START_TIME;
        case 7: // END_TIME
          return END_TIME;
        case 9: // RUNSCRIPT
          return RUNSCRIPT;
        case 10: // NICS
          return NICS;
        case 12: // NETWORK_EXCEPTIONS
          return NETWORK_EXCEPTIONS;
        case 13: // IS_EXAM
          return IS_EXAM;
        case 14: // HAS_INTERNET_ACCESS
          return HAS_INTERNET_ACCESS;
        case 15: // DEFAULT_PERMISSIONS
          return DEFAULT_PERMISSIONS;
        case 11: // ADD_ALLOWED_USERS
          return ADD_ALLOWED_USERS;
        case 16: // REM_ALLOWED_USERS
          return REM_ALLOWED_USERS;
        case 17: // LOCATION_IDS
          return LOCATION_IDS;
        case 18: // LIMIT_TO_LOCATIONS
          return LIMIT_TO_LOCATIONS;
        case 19: // LIMIT_TO_ALLOWED_USERS
          return LIMIT_TO_ALLOWED_USERS;
        case 20: // HAS_USB_ACCESS
          return HAS_USB_ACCESS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AUTOUPDATE_ISSET_ID = 0;
  private static final int __ISENABLED_ISSET_ID = 1;
  private static final int __STARTTIME_ISSET_ID = 2;
  private static final int __ENDTIME_ISSET_ID = 3;
  private static final int __ISEXAM_ISSET_ID = 4;
  private static final int __HASINTERNETACCESS_ISSET_ID = 5;
  private static final int __LIMITTOLOCATIONS_ISSET_ID = 6;
  private static final int __LIMITTOALLOWEDUSERS_ISSET_ID = 7;
  private static final int __HASUSBACCESS_ISSET_ID = 8;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.NETWORK_EXCEPTIONS,_Fields.ADD_ALLOWED_USERS,_Fields.REM_ALLOWED_USERS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LECTURE_NAME, new org.apache.thrift.meta_data.FieldMetaData("lectureName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGE_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("imageVersionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.AUTO_UPDATE, new org.apache.thrift.meta_data.FieldMetaData("autoUpdate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.START_TIME, new org.apache.thrift.meta_data.FieldMetaData("startTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.END_TIME, new org.apache.thrift.meta_data.FieldMetaData("endTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.RUNSCRIPT, new org.apache.thrift.meta_data.FieldMetaData("runscript", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NICS, new org.apache.thrift.meta_data.FieldMetaData("nics", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.NETWORK_EXCEPTIONS, new org.apache.thrift.meta_data.FieldMetaData("networkExceptions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NetRule.class))));
    tmpMap.put(_Fields.IS_EXAM, new org.apache.thrift.meta_data.FieldMetaData("isExam", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_INTERNET_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("hasInternetAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("defaultPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LecturePermissions.class)));
    tmpMap.put(_Fields.ADD_ALLOWED_USERS, new org.apache.thrift.meta_data.FieldMetaData("addAllowedUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REM_ALLOWED_USERS, new org.apache.thrift.meta_data.FieldMetaData("remAllowedUsers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.LOCATION_IDS, new org.apache.thrift.meta_data.FieldMetaData("locationIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.LIMIT_TO_LOCATIONS, new org.apache.thrift.meta_data.FieldMetaData("limitToLocations", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.LIMIT_TO_ALLOWED_USERS, new org.apache.thrift.meta_data.FieldMetaData("limitToAllowedUsers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.HAS_USB_ACCESS, new org.apache.thrift.meta_data.FieldMetaData("hasUsbAccess", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LectureWrite.class, metaDataMap);
  }

  public LectureWrite() {
  }

  public LectureWrite(
    String lectureName,
    String description,
    String imageVersionId,
    boolean autoUpdate,
    boolean isEnabled,
    long startTime,
    long endTime,
    String runscript,
    List<String> nics,
    boolean isExam,
    boolean hasInternetAccess,
    LecturePermissions defaultPermissions,
    List<Integer> locationIds,
    boolean limitToLocations,
    boolean limitToAllowedUsers,
    boolean hasUsbAccess)
  {
    this();
    this.lectureName = lectureName;
    this.description = description;
    this.imageVersionId = imageVersionId;
    this.autoUpdate = autoUpdate;
    setAutoUpdateIsSet(true);
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    this.startTime = startTime;
    setStartTimeIsSet(true);
    this.endTime = endTime;
    setEndTimeIsSet(true);
    this.runscript = runscript;
    this.nics = nics;
    this.isExam = isExam;
    setIsExamIsSet(true);
    this.hasInternetAccess = hasInternetAccess;
    setHasInternetAccessIsSet(true);
    this.defaultPermissions = defaultPermissions;
    this.locationIds = locationIds;
    this.limitToLocations = limitToLocations;
    setLimitToLocationsIsSet(true);
    this.limitToAllowedUsers = limitToAllowedUsers;
    setLimitToAllowedUsersIsSet(true);
    this.hasUsbAccess = hasUsbAccess;
    setHasUsbAccessIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LectureWrite(LectureWrite other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLectureName()) {
      this.lectureName = other.lectureName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetImageVersionId()) {
      this.imageVersionId = other.imageVersionId;
    }
    this.autoUpdate = other.autoUpdate;
    this.isEnabled = other.isEnabled;
    this.startTime = other.startTime;
    this.endTime = other.endTime;
    if (other.isSetRunscript()) {
      this.runscript = other.runscript;
    }
    if (other.isSetNics()) {
      List<String> __this__nics = new ArrayList<String>(other.nics);
      this.nics = __this__nics;
    }
    if (other.isSetNetworkExceptions()) {
      List<NetRule> __this__networkExceptions = new ArrayList<NetRule>(other.networkExceptions.size());
      for (NetRule other_element : other.networkExceptions) {
        __this__networkExceptions.add(new NetRule(other_element));
      }
      this.networkExceptions = __this__networkExceptions;
    }
    this.isExam = other.isExam;
    this.hasInternetAccess = other.hasInternetAccess;
    if (other.isSetDefaultPermissions()) {
      this.defaultPermissions = new LecturePermissions(other.defaultPermissions);
    }
    if (other.isSetAddAllowedUsers()) {
      List<String> __this__addAllowedUsers = new ArrayList<String>(other.addAllowedUsers);
      this.addAllowedUsers = __this__addAllowedUsers;
    }
    if (other.isSetRemAllowedUsers()) {
      List<String> __this__remAllowedUsers = new ArrayList<String>(other.remAllowedUsers);
      this.remAllowedUsers = __this__remAllowedUsers;
    }
    if (other.isSetLocationIds()) {
      List<Integer> __this__locationIds = new ArrayList<Integer>(other.locationIds);
      this.locationIds = __this__locationIds;
    }
    this.limitToLocations = other.limitToLocations;
    this.limitToAllowedUsers = other.limitToAllowedUsers;
    this.hasUsbAccess = other.hasUsbAccess;
  }

  public LectureWrite deepCopy() {
    return new LectureWrite(this);
  }

  @Override
  public void clear() {
    this.lectureName = null;
    this.description = null;
    this.imageVersionId = null;
    setAutoUpdateIsSet(false);
    this.autoUpdate = false;
    setIsEnabledIsSet(false);
    this.isEnabled = false;
    setStartTimeIsSet(false);
    this.startTime = 0;
    setEndTimeIsSet(false);
    this.endTime = 0;
    this.runscript = null;
    this.nics = null;
    this.networkExceptions = null;
    setIsExamIsSet(false);
    this.isExam = false;
    setHasInternetAccessIsSet(false);
    this.hasInternetAccess = false;
    this.defaultPermissions = null;
    this.addAllowedUsers = null;
    this.remAllowedUsers = null;
    this.locationIds = null;
    setLimitToLocationsIsSet(false);
    this.limitToLocations = false;
    setLimitToAllowedUsersIsSet(false);
    this.limitToAllowedUsers = false;
    setHasUsbAccessIsSet(false);
    this.hasUsbAccess = false;
  }

  public String getLectureName() {
    return this.lectureName;
  }

  public LectureWrite setLectureName(String lectureName) {
    this.lectureName = lectureName;
    return this;
  }

  public void unsetLectureName() {
    this.lectureName = null;
  }

  /** Returns true if field lectureName is set (has been assigned a value) and false otherwise */
  public boolean isSetLectureName() {
    return this.lectureName != null;
  }

  public void setLectureNameIsSet(boolean value) {
    if (!value) {
      this.lectureName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public LectureWrite setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public String getImageVersionId() {
    return this.imageVersionId;
  }

  public LectureWrite setImageVersionId(String imageVersionId) {
    this.imageVersionId = imageVersionId;
    return this;
  }

  public void unsetImageVersionId() {
    this.imageVersionId = null;
  }

  /** Returns true if field imageVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageVersionId() {
    return this.imageVersionId != null;
  }

  public void setImageVersionIdIsSet(boolean value) {
    if (!value) {
      this.imageVersionId = null;
    }
  }

  public boolean isAutoUpdate() {
    return this.autoUpdate;
  }

  public LectureWrite setAutoUpdate(boolean autoUpdate) {
    this.autoUpdate = autoUpdate;
    setAutoUpdateIsSet(true);
    return this;
  }

  public void unsetAutoUpdate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AUTOUPDATE_ISSET_ID);
  }

  /** Returns true if field autoUpdate is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoUpdate() {
    return EncodingUtils.testBit(__isset_bitfield, __AUTOUPDATE_ISSET_ID);
  }

  public void setAutoUpdateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AUTOUPDATE_ISSET_ID, value);
  }

  public boolean isIsEnabled() {
    return this.isEnabled;
  }

  public LectureWrite setIsEnabled(boolean isEnabled) {
    this.isEnabled = isEnabled;
    setIsEnabledIsSet(true);
    return this;
  }

  public void unsetIsEnabled() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  /** Returns true if field isEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetIsEnabled() {
    return EncodingUtils.testBit(__isset_bitfield, __ISENABLED_ISSET_ID);
  }

  public void setIsEnabledIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISENABLED_ISSET_ID, value);
  }

  public long getStartTime() {
    return this.startTime;
  }

  public LectureWrite setStartTime(long startTime) {
    this.startTime = startTime;
    setStartTimeIsSet(true);
    return this;
  }

  public void unsetStartTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  /** Returns true if field startTime is set (has been assigned a value) and false otherwise */
  public boolean isSetStartTime() {
    return EncodingUtils.testBit(__isset_bitfield, __STARTTIME_ISSET_ID);
  }

  public void setStartTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __STARTTIME_ISSET_ID, value);
  }

  public long getEndTime() {
    return this.endTime;
  }

  public LectureWrite setEndTime(long endTime) {
    this.endTime = endTime;
    setEndTimeIsSet(true);
    return this;
  }

  public void unsetEndTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  /** Returns true if field endTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTime() {
    return EncodingUtils.testBit(__isset_bitfield, __ENDTIME_ISSET_ID);
  }

  public void setEndTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENDTIME_ISSET_ID, value);
  }

  public String getRunscript() {
    return this.runscript;
  }

  public LectureWrite setRunscript(String runscript) {
    this.runscript = runscript;
    return this;
  }

  public void unsetRunscript() {
    this.runscript = null;
  }

  /** Returns true if field runscript is set (has been assigned a value) and false otherwise */
  public boolean isSetRunscript() {
    return this.runscript != null;
  }

  public void setRunscriptIsSet(boolean value) {
    if (!value) {
      this.runscript = null;
    }
  }

  public int getNicsSize() {
    return (this.nics == null) ? 0 : this.nics.size();
  }

  public java.util.Iterator<String> getNicsIterator() {
    return (this.nics == null) ? null : this.nics.iterator();
  }

  public void addToNics(String elem) {
    if (this.nics == null) {
      this.nics = new ArrayList<String>();
    }
    this.nics.add(elem);
  }

  public List<String> getNics() {
    return this.nics;
  }

  public LectureWrite setNics(List<String> nics) {
    this.nics = nics;
    return this;
  }

  public void unsetNics() {
    this.nics = null;
  }

  /** Returns true if field nics is set (has been assigned a value) and false otherwise */
  public boolean isSetNics() {
    return this.nics != null;
  }

  public void setNicsIsSet(boolean value) {
    if (!value) {
      this.nics = null;
    }
  }

  public int getNetworkExceptionsSize() {
    return (this.networkExceptions == null) ? 0 : this.networkExceptions.size();
  }

  public java.util.Iterator<NetRule> getNetworkExceptionsIterator() {
    return (this.networkExceptions == null) ? null : this.networkExceptions.iterator();
  }

  public void addToNetworkExceptions(NetRule elem) {
    if (this.networkExceptions == null) {
      this.networkExceptions = new ArrayList<NetRule>();
    }
    this.networkExceptions.add(elem);
  }

  public List<NetRule> getNetworkExceptions() {
    return this.networkExceptions;
  }

  public LectureWrite setNetworkExceptions(List<NetRule> networkExceptions) {
    this.networkExceptions = networkExceptions;
    return this;
  }

  public void unsetNetworkExceptions() {
    this.networkExceptions = null;
  }

  /** Returns true if field networkExceptions is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkExceptions() {
    return this.networkExceptions != null;
  }

  public void setNetworkExceptionsIsSet(boolean value) {
    if (!value) {
      this.networkExceptions = null;
    }
  }

  public boolean isIsExam() {
    return this.isExam;
  }

  public LectureWrite setIsExam(boolean isExam) {
    this.isExam = isExam;
    setIsExamIsSet(true);
    return this;
  }

  public void unsetIsExam() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ISEXAM_ISSET_ID);
  }

  /** Returns true if field isExam is set (has been assigned a value) and false otherwise */
  public boolean isSetIsExam() {
    return EncodingUtils.testBit(__isset_bitfield, __ISEXAM_ISSET_ID);
  }

  public void setIsExamIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ISEXAM_ISSET_ID, value);
  }

  public boolean isHasInternetAccess() {
    return this.hasInternetAccess;
  }

  public LectureWrite setHasInternetAccess(boolean hasInternetAccess) {
    this.hasInternetAccess = hasInternetAccess;
    setHasInternetAccessIsSet(true);
    return this;
  }

  public void unsetHasInternetAccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASINTERNETACCESS_ISSET_ID);
  }

  /** Returns true if field hasInternetAccess is set (has been assigned a value) and false otherwise */
  public boolean isSetHasInternetAccess() {
    return EncodingUtils.testBit(__isset_bitfield, __HASINTERNETACCESS_ISSET_ID);
  }

  public void setHasInternetAccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASINTERNETACCESS_ISSET_ID, value);
  }

  public LecturePermissions getDefaultPermissions() {
    return this.defaultPermissions;
  }

  public LectureWrite setDefaultPermissions(LecturePermissions defaultPermissions) {
    this.defaultPermissions = defaultPermissions;
    return this;
  }

  public void unsetDefaultPermissions() {
    this.defaultPermissions = null;
  }

  /** Returns true if field defaultPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultPermissions() {
    return this.defaultPermissions != null;
  }

  public void setDefaultPermissionsIsSet(boolean value) {
    if (!value) {
      this.defaultPermissions = null;
    }
  }

  public int getAddAllowedUsersSize() {
    return (this.addAllowedUsers == null) ? 0 : this.addAllowedUsers.size();
  }

  public java.util.Iterator<String> getAddAllowedUsersIterator() {
    return (this.addAllowedUsers == null) ? null : this.addAllowedUsers.iterator();
  }

  public void addToAddAllowedUsers(String elem) {
    if (this.addAllowedUsers == null) {
      this.addAllowedUsers = new ArrayList<String>();
    }
    this.addAllowedUsers.add(elem);
  }

  public List<String> getAddAllowedUsers() {
    return this.addAllowedUsers;
  }

  public LectureWrite setAddAllowedUsers(List<String> addAllowedUsers) {
    this.addAllowedUsers = addAllowedUsers;
    return this;
  }

  public void unsetAddAllowedUsers() {
    this.addAllowedUsers = null;
  }

  /** Returns true if field addAllowedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetAddAllowedUsers() {
    return this.addAllowedUsers != null;
  }

  public void setAddAllowedUsersIsSet(boolean value) {
    if (!value) {
      this.addAllowedUsers = null;
    }
  }

  public int getRemAllowedUsersSize() {
    return (this.remAllowedUsers == null) ? 0 : this.remAllowedUsers.size();
  }

  public java.util.Iterator<String> getRemAllowedUsersIterator() {
    return (this.remAllowedUsers == null) ? null : this.remAllowedUsers.iterator();
  }

  public void addToRemAllowedUsers(String elem) {
    if (this.remAllowedUsers == null) {
      this.remAllowedUsers = new ArrayList<String>();
    }
    this.remAllowedUsers.add(elem);
  }

  public List<String> getRemAllowedUsers() {
    return this.remAllowedUsers;
  }

  public LectureWrite setRemAllowedUsers(List<String> remAllowedUsers) {
    this.remAllowedUsers = remAllowedUsers;
    return this;
  }

  public void unsetRemAllowedUsers() {
    this.remAllowedUsers = null;
  }

  /** Returns true if field remAllowedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetRemAllowedUsers() {
    return this.remAllowedUsers != null;
  }

  public void setRemAllowedUsersIsSet(boolean value) {
    if (!value) {
      this.remAllowedUsers = null;
    }
  }

  public int getLocationIdsSize() {
    return (this.locationIds == null) ? 0 : this.locationIds.size();
  }

  public java.util.Iterator<Integer> getLocationIdsIterator() {
    return (this.locationIds == null) ? null : this.locationIds.iterator();
  }

  public void addToLocationIds(int elem) {
    if (this.locationIds == null) {
      this.locationIds = new ArrayList<Integer>();
    }
    this.locationIds.add(elem);
  }

  public List<Integer> getLocationIds() {
    return this.locationIds;
  }

  public LectureWrite setLocationIds(List<Integer> locationIds) {
    this.locationIds = locationIds;
    return this;
  }

  public void unsetLocationIds() {
    this.locationIds = null;
  }

  /** Returns true if field locationIds is set (has been assigned a value) and false otherwise */
  public boolean isSetLocationIds() {
    return this.locationIds != null;
  }

  public void setLocationIdsIsSet(boolean value) {
    if (!value) {
      this.locationIds = null;
    }
  }

  public boolean isLimitToLocations() {
    return this.limitToLocations;
  }

  public LectureWrite setLimitToLocations(boolean limitToLocations) {
    this.limitToLocations = limitToLocations;
    setLimitToLocationsIsSet(true);
    return this;
  }

  public void unsetLimitToLocations() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITTOLOCATIONS_ISSET_ID);
  }

  /** Returns true if field limitToLocations is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitToLocations() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITTOLOCATIONS_ISSET_ID);
  }

  public void setLimitToLocationsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITTOLOCATIONS_ISSET_ID, value);
  }

  public boolean isLimitToAllowedUsers() {
    return this.limitToAllowedUsers;
  }

  public LectureWrite setLimitToAllowedUsers(boolean limitToAllowedUsers) {
    this.limitToAllowedUsers = limitToAllowedUsers;
    setLimitToAllowedUsersIsSet(true);
    return this;
  }

  public void unsetLimitToAllowedUsers() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LIMITTOALLOWEDUSERS_ISSET_ID);
  }

  /** Returns true if field limitToAllowedUsers is set (has been assigned a value) and false otherwise */
  public boolean isSetLimitToAllowedUsers() {
    return EncodingUtils.testBit(__isset_bitfield, __LIMITTOALLOWEDUSERS_ISSET_ID);
  }

  public void setLimitToAllowedUsersIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LIMITTOALLOWEDUSERS_ISSET_ID, value);
  }

  public boolean isHasUsbAccess() {
    return this.hasUsbAccess;
  }

  public LectureWrite setHasUsbAccess(boolean hasUsbAccess) {
    this.hasUsbAccess = hasUsbAccess;
    setHasUsbAccessIsSet(true);
    return this;
  }

  public void unsetHasUsbAccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HASUSBACCESS_ISSET_ID);
  }

  /** Returns true if field hasUsbAccess is set (has been assigned a value) and false otherwise */
  public boolean isSetHasUsbAccess() {
    return EncodingUtils.testBit(__isset_bitfield, __HASUSBACCESS_ISSET_ID);
  }

  public void setHasUsbAccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HASUSBACCESS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LECTURE_NAME:
      if (value == null) {
        unsetLectureName();
      } else {
        setLectureName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case IMAGE_VERSION_ID:
      if (value == null) {
        unsetImageVersionId();
      } else {
        setImageVersionId((String)value);
      }
      break;

    case AUTO_UPDATE:
      if (value == null) {
        unsetAutoUpdate();
      } else {
        setAutoUpdate((Boolean)value);
      }
      break;

    case IS_ENABLED:
      if (value == null) {
        unsetIsEnabled();
      } else {
        setIsEnabled((Boolean)value);
      }
      break;

    case START_TIME:
      if (value == null) {
        unsetStartTime();
      } else {
        setStartTime((Long)value);
      }
      break;

    case END_TIME:
      if (value == null) {
        unsetEndTime();
      } else {
        setEndTime((Long)value);
      }
      break;

    case RUNSCRIPT:
      if (value == null) {
        unsetRunscript();
      } else {
        setRunscript((String)value);
      }
      break;

    case NICS:
      if (value == null) {
        unsetNics();
      } else {
        setNics((List<String>)value);
      }
      break;

    case NETWORK_EXCEPTIONS:
      if (value == null) {
        unsetNetworkExceptions();
      } else {
        setNetworkExceptions((List<NetRule>)value);
      }
      break;

    case IS_EXAM:
      if (value == null) {
        unsetIsExam();
      } else {
        setIsExam((Boolean)value);
      }
      break;

    case HAS_INTERNET_ACCESS:
      if (value == null) {
        unsetHasInternetAccess();
      } else {
        setHasInternetAccess((Boolean)value);
      }
      break;

    case DEFAULT_PERMISSIONS:
      if (value == null) {
        unsetDefaultPermissions();
      } else {
        setDefaultPermissions((LecturePermissions)value);
      }
      break;

    case ADD_ALLOWED_USERS:
      if (value == null) {
        unsetAddAllowedUsers();
      } else {
        setAddAllowedUsers((List<String>)value);
      }
      break;

    case REM_ALLOWED_USERS:
      if (value == null) {
        unsetRemAllowedUsers();
      } else {
        setRemAllowedUsers((List<String>)value);
      }
      break;

    case LOCATION_IDS:
      if (value == null) {
        unsetLocationIds();
      } else {
        setLocationIds((List<Integer>)value);
      }
      break;

    case LIMIT_TO_LOCATIONS:
      if (value == null) {
        unsetLimitToLocations();
      } else {
        setLimitToLocations((Boolean)value);
      }
      break;

    case LIMIT_TO_ALLOWED_USERS:
      if (value == null) {
        unsetLimitToAllowedUsers();
      } else {
        setLimitToAllowedUsers((Boolean)value);
      }
      break;

    case HAS_USB_ACCESS:
      if (value == null) {
        unsetHasUsbAccess();
      } else {
        setHasUsbAccess((Boolean)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LECTURE_NAME:
      return getLectureName();

    case DESCRIPTION:
      return getDescription();

    case IMAGE_VERSION_ID:
      return getImageVersionId();

    case AUTO_UPDATE:
      return isAutoUpdate();

    case IS_ENABLED:
      return isIsEnabled();

    case START_TIME:
      return getStartTime();

    case END_TIME:
      return getEndTime();

    case RUNSCRIPT:
      return getRunscript();

    case NICS:
      return getNics();

    case NETWORK_EXCEPTIONS:
      return getNetworkExceptions();

    case IS_EXAM:
      return isIsExam();

    case HAS_INTERNET_ACCESS:
      return isHasInternetAccess();

    case DEFAULT_PERMISSIONS:
      return getDefaultPermissions();

    case ADD_ALLOWED_USERS:
      return getAddAllowedUsers();

    case REM_ALLOWED_USERS:
      return getRemAllowedUsers();

    case LOCATION_IDS:
      return getLocationIds();

    case LIMIT_TO_LOCATIONS:
      return isLimitToLocations();

    case LIMIT_TO_ALLOWED_USERS:
      return isLimitToAllowedUsers();

    case HAS_USB_ACCESS:
      return isHasUsbAccess();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LECTURE_NAME:
      return isSetLectureName();
    case DESCRIPTION:
      return isSetDescription();
    case IMAGE_VERSION_ID:
      return isSetImageVersionId();
    case AUTO_UPDATE:
      return isSetAutoUpdate();
    case IS_ENABLED:
      return isSetIsEnabled();
    case START_TIME:
      return isSetStartTime();
    case END_TIME:
      return isSetEndTime();
    case RUNSCRIPT:
      return isSetRunscript();
    case NICS:
      return isSetNics();
    case NETWORK_EXCEPTIONS:
      return isSetNetworkExceptions();
    case IS_EXAM:
      return isSetIsExam();
    case HAS_INTERNET_ACCESS:
      return isSetHasInternetAccess();
    case DEFAULT_PERMISSIONS:
      return isSetDefaultPermissions();
    case ADD_ALLOWED_USERS:
      return isSetAddAllowedUsers();
    case REM_ALLOWED_USERS:
      return isSetRemAllowedUsers();
    case LOCATION_IDS:
      return isSetLocationIds();
    case LIMIT_TO_LOCATIONS:
      return isSetLimitToLocations();
    case LIMIT_TO_ALLOWED_USERS:
      return isSetLimitToAllowedUsers();
    case HAS_USB_ACCESS:
      return isSetHasUsbAccess();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LectureWrite)
      return this.equals((LectureWrite)that);
    return false;
  }

  public boolean equals(LectureWrite that) {
    if (that == null)
      return false;

    boolean this_present_lectureName = true && this.isSetLectureName();
    boolean that_present_lectureName = true && that.isSetLectureName();
    if (this_present_lectureName || that_present_lectureName) {
      if (!(this_present_lectureName && that_present_lectureName))
        return false;
      if (!this.lectureName.equals(that.lectureName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_imageVersionId = true && this.isSetImageVersionId();
    boolean that_present_imageVersionId = true && that.isSetImageVersionId();
    if (this_present_imageVersionId || that_present_imageVersionId) {
      if (!(this_present_imageVersionId && that_present_imageVersionId))
        return false;
      if (!this.imageVersionId.equals(that.imageVersionId))
        return false;
    }

    boolean this_present_autoUpdate = true;
    boolean that_present_autoUpdate = true;
    if (this_present_autoUpdate || that_present_autoUpdate) {
      if (!(this_present_autoUpdate && that_present_autoUpdate))
        return false;
      if (this.autoUpdate != that.autoUpdate)
        return false;
    }

    boolean this_present_isEnabled = true;
    boolean that_present_isEnabled = true;
    if (this_present_isEnabled || that_present_isEnabled) {
      if (!(this_present_isEnabled && that_present_isEnabled))
        return false;
      if (this.isEnabled != that.isEnabled)
        return false;
    }

    boolean this_present_startTime = true;
    boolean that_present_startTime = true;
    if (this_present_startTime || that_present_startTime) {
      if (!(this_present_startTime && that_present_startTime))
        return false;
      if (this.startTime != that.startTime)
        return false;
    }

    boolean this_present_endTime = true;
    boolean that_present_endTime = true;
    if (this_present_endTime || that_present_endTime) {
      if (!(this_present_endTime && that_present_endTime))
        return false;
      if (this.endTime != that.endTime)
        return false;
    }

    boolean this_present_runscript = true && this.isSetRunscript();
    boolean that_present_runscript = true && that.isSetRunscript();
    if (this_present_runscript || that_present_runscript) {
      if (!(this_present_runscript && that_present_runscript))
        return false;
      if (!this.runscript.equals(that.runscript))
        return false;
    }

    boolean this_present_nics = true && this.isSetNics();
    boolean that_present_nics = true && that.isSetNics();
    if (this_present_nics || that_present_nics) {
      if (!(this_present_nics && that_present_nics))
        return false;
      if (!this.nics.equals(that.nics))
        return false;
    }

    boolean this_present_networkExceptions = true && this.isSetNetworkExceptions();
    boolean that_present_networkExceptions = true && that.isSetNetworkExceptions();
    if (this_present_networkExceptions || that_present_networkExceptions) {
      if (!(this_present_networkExceptions && that_present_networkExceptions))
        return false;
      if (!this.networkExceptions.equals(that.networkExceptions))
        return false;
    }

    boolean this_present_isExam = true;
    boolean that_present_isExam = true;
    if (this_present_isExam || that_present_isExam) {
      if (!(this_present_isExam && that_present_isExam))
        return false;
      if (this.isExam != that.isExam)
        return false;
    }

    boolean this_present_hasInternetAccess = true;
    boolean that_present_hasInternetAccess = true;
    if (this_present_hasInternetAccess || that_present_hasInternetAccess) {
      if (!(this_present_hasInternetAccess && that_present_hasInternetAccess))
        return false;
      if (this.hasInternetAccess != that.hasInternetAccess)
        return false;
    }

    boolean this_present_defaultPermissions = true && this.isSetDefaultPermissions();
    boolean that_present_defaultPermissions = true && that.isSetDefaultPermissions();
    if (this_present_defaultPermissions || that_present_defaultPermissions) {
      if (!(this_present_defaultPermissions && that_present_defaultPermissions))
        return false;
      if (!this.defaultPermissions.equals(that.defaultPermissions))
        return false;
    }

    boolean this_present_addAllowedUsers = true && this.isSetAddAllowedUsers();
    boolean that_present_addAllowedUsers = true && that.isSetAddAllowedUsers();
    if (this_present_addAllowedUsers || that_present_addAllowedUsers) {
      if (!(this_present_addAllowedUsers && that_present_addAllowedUsers))
        return false;
      if (!this.addAllowedUsers.equals(that.addAllowedUsers))
        return false;
    }

    boolean this_present_remAllowedUsers = true && this.isSetRemAllowedUsers();
    boolean that_present_remAllowedUsers = true && that.isSetRemAllowedUsers();
    if (this_present_remAllowedUsers || that_present_remAllowedUsers) {
      if (!(this_present_remAllowedUsers && that_present_remAllowedUsers))
        return false;
      if (!this.remAllowedUsers.equals(that.remAllowedUsers))
        return false;
    }

    boolean this_present_locationIds = true && this.isSetLocationIds();
    boolean that_present_locationIds = true && that.isSetLocationIds();
    if (this_present_locationIds || that_present_locationIds) {
      if (!(this_present_locationIds && that_present_locationIds))
        return false;
      if (!this.locationIds.equals(that.locationIds))
        return false;
    }

    boolean this_present_limitToLocations = true;
    boolean that_present_limitToLocations = true;
    if (this_present_limitToLocations || that_present_limitToLocations) {
      if (!(this_present_limitToLocations && that_present_limitToLocations))
        return false;
      if (this.limitToLocations != that.limitToLocations)
        return false;
    }

    boolean this_present_limitToAllowedUsers = true;
    boolean that_present_limitToAllowedUsers = true;
    if (this_present_limitToAllowedUsers || that_present_limitToAllowedUsers) {
      if (!(this_present_limitToAllowedUsers && that_present_limitToAllowedUsers))
        return false;
      if (this.limitToAllowedUsers != that.limitToAllowedUsers)
        return false;
    }

    boolean this_present_hasUsbAccess = true;
    boolean that_present_hasUsbAccess = true;
    if (this_present_hasUsbAccess || that_present_hasUsbAccess) {
      if (!(this_present_hasUsbAccess && that_present_hasUsbAccess))
        return false;
      if (this.hasUsbAccess != that.hasUsbAccess)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_lectureName = true && (isSetLectureName());
    list.add(present_lectureName);
    if (present_lectureName)
      list.add(lectureName);

    boolean present_description = true && (isSetDescription());
    list.add(present_description);
    if (present_description)
      list.add(description);

    boolean present_imageVersionId = true && (isSetImageVersionId());
    list.add(present_imageVersionId);
    if (present_imageVersionId)
      list.add(imageVersionId);

    boolean present_autoUpdate = true;
    list.add(present_autoUpdate);
    if (present_autoUpdate)
      list.add(autoUpdate);

    boolean present_isEnabled = true;
    list.add(present_isEnabled);
    if (present_isEnabled)
      list.add(isEnabled);

    boolean present_startTime = true;
    list.add(present_startTime);
    if (present_startTime)
      list.add(startTime);

    boolean present_endTime = true;
    list.add(present_endTime);
    if (present_endTime)
      list.add(endTime);

    boolean present_runscript = true && (isSetRunscript());
    list.add(present_runscript);
    if (present_runscript)
      list.add(runscript);

    boolean present_nics = true && (isSetNics());
    list.add(present_nics);
    if (present_nics)
      list.add(nics);

    boolean present_networkExceptions = true && (isSetNetworkExceptions());
    list.add(present_networkExceptions);
    if (present_networkExceptions)
      list.add(networkExceptions);

    boolean present_isExam = true;
    list.add(present_isExam);
    if (present_isExam)
      list.add(isExam);

    boolean present_hasInternetAccess = true;
    list.add(present_hasInternetAccess);
    if (present_hasInternetAccess)
      list.add(hasInternetAccess);

    boolean present_defaultPermissions = true && (isSetDefaultPermissions());
    list.add(present_defaultPermissions);
    if (present_defaultPermissions)
      list.add(defaultPermissions);

    boolean present_addAllowedUsers = true && (isSetAddAllowedUsers());
    list.add(present_addAllowedUsers);
    if (present_addAllowedUsers)
      list.add(addAllowedUsers);

    boolean present_remAllowedUsers = true && (isSetRemAllowedUsers());
    list.add(present_remAllowedUsers);
    if (present_remAllowedUsers)
      list.add(remAllowedUsers);

    boolean present_locationIds = true && (isSetLocationIds());
    list.add(present_locationIds);
    if (present_locationIds)
      list.add(locationIds);

    boolean present_limitToLocations = true;
    list.add(present_limitToLocations);
    if (present_limitToLocations)
      list.add(limitToLocations);

    boolean present_limitToAllowedUsers = true;
    list.add(present_limitToAllowedUsers);
    if (present_limitToAllowedUsers)
      list.add(limitToAllowedUsers);

    boolean present_hasUsbAccess = true;
    list.add(present_hasUsbAccess);
    if (present_hasUsbAccess)
      list.add(hasUsbAccess);

    return list.hashCode();
  }

  @Override
  public int compareTo(LectureWrite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetLectureName()).compareTo(other.isSetLectureName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLectureName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lectureName, other.lectureName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImageVersionId()).compareTo(other.isSetImageVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageVersionId, other.imageVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAutoUpdate()).compareTo(other.isSetAutoUpdate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoUpdate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoUpdate, other.autoUpdate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsEnabled()).compareTo(other.isSetIsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isEnabled, other.isEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStartTime()).compareTo(other.isSetStartTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStartTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.startTime, other.startTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndTime()).compareTo(other.isSetEndTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTime, other.endTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRunscript()).compareTo(other.isSetRunscript());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunscript()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runscript, other.runscript);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNics()).compareTo(other.isSetNics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nics, other.nics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkExceptions()).compareTo(other.isSetNetworkExceptions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkExceptions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkExceptions, other.networkExceptions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsExam()).compareTo(other.isSetIsExam());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsExam()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isExam, other.isExam);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasInternetAccess()).compareTo(other.isSetHasInternetAccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasInternetAccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasInternetAccess, other.hasInternetAccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDefaultPermissions()).compareTo(other.isSetDefaultPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPermissions, other.defaultPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAddAllowedUsers()).compareTo(other.isSetAddAllowedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddAllowedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addAllowedUsers, other.addAllowedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRemAllowedUsers()).compareTo(other.isSetRemAllowedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemAllowedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remAllowedUsers, other.remAllowedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocationIds()).compareTo(other.isSetLocationIds());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocationIds()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locationIds, other.locationIds);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitToLocations()).compareTo(other.isSetLimitToLocations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitToLocations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitToLocations, other.limitToLocations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLimitToAllowedUsers()).compareTo(other.isSetLimitToAllowedUsers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLimitToAllowedUsers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limitToAllowedUsers, other.limitToAllowedUsers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHasUsbAccess()).compareTo(other.isSetHasUsbAccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHasUsbAccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hasUsbAccess, other.hasUsbAccess);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LectureWrite(");
    boolean first = true;

    sb.append("lectureName:");
    if (this.lectureName == null) {
      sb.append("null");
    } else {
      sb.append(this.lectureName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageVersionId:");
    if (this.imageVersionId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageVersionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("autoUpdate:");
    sb.append(this.autoUpdate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isEnabled:");
    sb.append(this.isEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startTime:");
    sb.append(this.startTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("endTime:");
    sb.append(this.endTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("runscript:");
    if (this.runscript == null) {
      sb.append("null");
    } else {
      sb.append(this.runscript);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("nics:");
    if (this.nics == null) {
      sb.append("null");
    } else {
      sb.append(this.nics);
    }
    first = false;
    if (isSetNetworkExceptions()) {
      if (!first) sb.append(", ");
      sb.append("networkExceptions:");
      if (this.networkExceptions == null) {
        sb.append("null");
      } else {
        sb.append(this.networkExceptions);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("isExam:");
    sb.append(this.isExam);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasInternetAccess:");
    sb.append(this.hasInternetAccess);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultPermissions:");
    if (this.defaultPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultPermissions);
    }
    first = false;
    if (isSetAddAllowedUsers()) {
      if (!first) sb.append(", ");
      sb.append("addAllowedUsers:");
      if (this.addAllowedUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.addAllowedUsers);
      }
      first = false;
    }
    if (isSetRemAllowedUsers()) {
      if (!first) sb.append(", ");
      sb.append("remAllowedUsers:");
      if (this.remAllowedUsers == null) {
        sb.append("null");
      } else {
        sb.append(this.remAllowedUsers);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("locationIds:");
    if (this.locationIds == null) {
      sb.append("null");
    } else {
      sb.append(this.locationIds);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitToLocations:");
    sb.append(this.limitToLocations);
    first = false;
    if (!first) sb.append(", ");
    sb.append("limitToAllowedUsers:");
    sb.append(this.limitToAllowedUsers);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hasUsbAccess:");
    sb.append(this.hasUsbAccess);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultPermissions != null) {
      defaultPermissions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LectureWriteStandardSchemeFactory implements SchemeFactory {
    public LectureWriteStandardScheme getScheme() {
      return new LectureWriteStandardScheme();
    }
  }

  private static class LectureWriteStandardScheme extends StandardScheme<LectureWrite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LectureWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LECTURE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lectureName = iprot.readString();
              struct.setLectureNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IMAGE_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageVersionId = iprot.readString();
              struct.setImageVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AUTO_UPDATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.autoUpdate = iprot.readBool();
              struct.setAutoUpdateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isEnabled = iprot.readBool();
              struct.setIsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // START_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.startTime = iprot.readI64();
              struct.setStartTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // END_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTime = iprot.readI64();
              struct.setEndTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // RUNSCRIPT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.runscript = iprot.readString();
              struct.setRunscriptIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NICS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list90 = iprot.readListBegin();
                struct.nics = new ArrayList<String>(_list90.size);
                String _elem91;
                for (int _i92 = 0; _i92 < _list90.size; ++_i92)
                {
                  _elem91 = iprot.readString();
                  struct.nics.add(_elem91);
                }
                iprot.readListEnd();
              }
              struct.setNicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NETWORK_EXCEPTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list93 = iprot.readListBegin();
                struct.networkExceptions = new ArrayList<NetRule>(_list93.size);
                NetRule _elem94;
                for (int _i95 = 0; _i95 < _list93.size; ++_i95)
                {
                  _elem94 = new NetRule();
                  _elem94.read(iprot);
                  struct.networkExceptions.add(_elem94);
                }
                iprot.readListEnd();
              }
              struct.setNetworkExceptionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // IS_EXAM
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isExam = iprot.readBool();
              struct.setIsExamIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // HAS_INTERNET_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasInternetAccess = iprot.readBool();
              struct.setHasInternetAccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // DEFAULT_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultPermissions = new LecturePermissions();
              struct.defaultPermissions.read(iprot);
              struct.setDefaultPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ADD_ALLOWED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                struct.addAllowedUsers = new ArrayList<String>(_list96.size);
                String _elem97;
                for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                {
                  _elem97 = iprot.readString();
                  struct.addAllowedUsers.add(_elem97);
                }
                iprot.readListEnd();
              }
              struct.setAddAllowedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REM_ALLOWED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list99 = iprot.readListBegin();
                struct.remAllowedUsers = new ArrayList<String>(_list99.size);
                String _elem100;
                for (int _i101 = 0; _i101 < _list99.size; ++_i101)
                {
                  _elem100 = iprot.readString();
                  struct.remAllowedUsers.add(_elem100);
                }
                iprot.readListEnd();
              }
              struct.setRemAllowedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // LOCATION_IDS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list102 = iprot.readListBegin();
                struct.locationIds = new ArrayList<Integer>(_list102.size);
                int _elem103;
                for (int _i104 = 0; _i104 < _list102.size; ++_i104)
                {
                  _elem103 = iprot.readI32();
                  struct.locationIds.add(_elem103);
                }
                iprot.readListEnd();
              }
              struct.setLocationIdsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // LIMIT_TO_LOCATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limitToLocations = iprot.readBool();
              struct.setLimitToLocationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // LIMIT_TO_ALLOWED_USERS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.limitToAllowedUsers = iprot.readBool();
              struct.setLimitToAllowedUsersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // HAS_USB_ACCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.hasUsbAccess = iprot.readBool();
              struct.setHasUsbAccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LectureWrite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lectureName != null) {
        oprot.writeFieldBegin(LECTURE_NAME_FIELD_DESC);
        oprot.writeString(struct.lectureName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      if (struct.imageVersionId != null) {
        oprot.writeFieldBegin(IMAGE_VERSION_ID_FIELD_DESC);
        oprot.writeString(struct.imageVersionId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AUTO_UPDATE_FIELD_DESC);
      oprot.writeBool(struct.autoUpdate);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.isEnabled);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(START_TIME_FIELD_DESC);
      oprot.writeI64(struct.startTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(END_TIME_FIELD_DESC);
      oprot.writeI64(struct.endTime);
      oprot.writeFieldEnd();
      if (struct.runscript != null) {
        oprot.writeFieldBegin(RUNSCRIPT_FIELD_DESC);
        oprot.writeString(struct.runscript);
        oprot.writeFieldEnd();
      }
      if (struct.nics != null) {
        oprot.writeFieldBegin(NICS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.nics.size()));
          for (String _iter105 : struct.nics)
          {
            oprot.writeString(_iter105);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.addAllowedUsers != null) {
        if (struct.isSetAddAllowedUsers()) {
          oprot.writeFieldBegin(ADD_ALLOWED_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.addAllowedUsers.size()));
            for (String _iter106 : struct.addAllowedUsers)
            {
              oprot.writeString(_iter106);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkExceptions != null) {
        if (struct.isSetNetworkExceptions()) {
          oprot.writeFieldBegin(NETWORK_EXCEPTIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.networkExceptions.size()));
            for (NetRule _iter107 : struct.networkExceptions)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(IS_EXAM_FIELD_DESC);
      oprot.writeBool(struct.isExam);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_INTERNET_ACCESS_FIELD_DESC);
      oprot.writeBool(struct.hasInternetAccess);
      oprot.writeFieldEnd();
      if (struct.defaultPermissions != null) {
        oprot.writeFieldBegin(DEFAULT_PERMISSIONS_FIELD_DESC);
        struct.defaultPermissions.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.remAllowedUsers != null) {
        if (struct.isSetRemAllowedUsers()) {
          oprot.writeFieldBegin(REM_ALLOWED_USERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.remAllowedUsers.size()));
            for (String _iter108 : struct.remAllowedUsers)
            {
              oprot.writeString(_iter108);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.locationIds != null) {
        oprot.writeFieldBegin(LOCATION_IDS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, struct.locationIds.size()));
          for (int _iter109 : struct.locationIds)
          {
            oprot.writeI32(_iter109);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LIMIT_TO_LOCATIONS_FIELD_DESC);
      oprot.writeBool(struct.limitToLocations);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LIMIT_TO_ALLOWED_USERS_FIELD_DESC);
      oprot.writeBool(struct.limitToAllowedUsers);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HAS_USB_ACCESS_FIELD_DESC);
      oprot.writeBool(struct.hasUsbAccess);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LectureWriteTupleSchemeFactory implements SchemeFactory {
    public LectureWriteTupleScheme getScheme() {
      return new LectureWriteTupleScheme();
    }
  }

  private static class LectureWriteTupleScheme extends TupleScheme<LectureWrite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LectureWrite struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetLectureName()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetImageVersionId()) {
        optionals.set(2);
      }
      if (struct.isSetAutoUpdate()) {
        optionals.set(3);
      }
      if (struct.isSetIsEnabled()) {
        optionals.set(4);
      }
      if (struct.isSetStartTime()) {
        optionals.set(5);
      }
      if (struct.isSetEndTime()) {
        optionals.set(6);
      }
      if (struct.isSetRunscript()) {
        optionals.set(7);
      }
      if (struct.isSetNics()) {
        optionals.set(8);
      }
      if (struct.isSetNetworkExceptions()) {
        optionals.set(9);
      }
      if (struct.isSetIsExam()) {
        optionals.set(10);
      }
      if (struct.isSetHasInternetAccess()) {
        optionals.set(11);
      }
      if (struct.isSetDefaultPermissions()) {
        optionals.set(12);
      }
      if (struct.isSetAddAllowedUsers()) {
        optionals.set(13);
      }
      if (struct.isSetRemAllowedUsers()) {
        optionals.set(14);
      }
      if (struct.isSetLocationIds()) {
        optionals.set(15);
      }
      if (struct.isSetLimitToLocations()) {
        optionals.set(16);
      }
      if (struct.isSetLimitToAllowedUsers()) {
        optionals.set(17);
      }
      if (struct.isSetHasUsbAccess()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetLectureName()) {
        oprot.writeString(struct.lectureName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetImageVersionId()) {
        oprot.writeString(struct.imageVersionId);
      }
      if (struct.isSetAutoUpdate()) {
        oprot.writeBool(struct.autoUpdate);
      }
      if (struct.isSetIsEnabled()) {
        oprot.writeBool(struct.isEnabled);
      }
      if (struct.isSetStartTime()) {
        oprot.writeI64(struct.startTime);
      }
      if (struct.isSetEndTime()) {
        oprot.writeI64(struct.endTime);
      }
      if (struct.isSetRunscript()) {
        oprot.writeString(struct.runscript);
      }
      if (struct.isSetNics()) {
        {
          oprot.writeI32(struct.nics.size());
          for (String _iter110 : struct.nics)
          {
            oprot.writeString(_iter110);
          }
        }
      }
      if (struct.isSetNetworkExceptions()) {
        {
          oprot.writeI32(struct.networkExceptions.size());
          for (NetRule _iter111 : struct.networkExceptions)
          {
            _iter111.write(oprot);
          }
        }
      }
      if (struct.isSetIsExam()) {
        oprot.writeBool(struct.isExam);
      }
      if (struct.isSetHasInternetAccess()) {
        oprot.writeBool(struct.hasInternetAccess);
      }
      if (struct.isSetDefaultPermissions()) {
        struct.defaultPermissions.write(oprot);
      }
      if (struct.isSetAddAllowedUsers()) {
        {
          oprot.writeI32(struct.addAllowedUsers.size());
          for (String _iter112 : struct.addAllowedUsers)
          {
            oprot.writeString(_iter112);
          }
        }
      }
      if (struct.isSetRemAllowedUsers()) {
        {
          oprot.writeI32(struct.remAllowedUsers.size());
          for (String _iter113 : struct.remAllowedUsers)
          {
            oprot.writeString(_iter113);
          }
        }
      }
      if (struct.isSetLocationIds()) {
        {
          oprot.writeI32(struct.locationIds.size());
          for (int _iter114 : struct.locationIds)
          {
            oprot.writeI32(_iter114);
          }
        }
      }
      if (struct.isSetLimitToLocations()) {
        oprot.writeBool(struct.limitToLocations);
      }
      if (struct.isSetLimitToAllowedUsers()) {
        oprot.writeBool(struct.limitToAllowedUsers);
      }
      if (struct.isSetHasUsbAccess()) {
        oprot.writeBool(struct.hasUsbAccess);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LectureWrite struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.lectureName = iprot.readString();
        struct.setLectureNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageVersionId = iprot.readString();
        struct.setImageVersionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.autoUpdate = iprot.readBool();
        struct.setAutoUpdateIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isEnabled = iprot.readBool();
        struct.setIsEnabledIsSet(true);
      }
      if (incoming.get(5)) {
        struct.startTime = iprot.readI64();
        struct.setStartTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.endTime = iprot.readI64();
        struct.setEndTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.runscript = iprot.readString();
        struct.setRunscriptIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.nics = new ArrayList<String>(_list115.size);
          String _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = iprot.readString();
            struct.nics.add(_elem116);
          }
        }
        struct.setNicsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list118 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.networkExceptions = new ArrayList<NetRule>(_list118.size);
          NetRule _elem119;
          for (int _i120 = 0; _i120 < _list118.size; ++_i120)
          {
            _elem119 = new NetRule();
            _elem119.read(iprot);
            struct.networkExceptions.add(_elem119);
          }
        }
        struct.setNetworkExceptionsIsSet(true);
      }
      if (incoming.get(10)) {
        struct.isExam = iprot.readBool();
        struct.setIsExamIsSet(true);
      }
      if (incoming.get(11)) {
        struct.hasInternetAccess = iprot.readBool();
        struct.setHasInternetAccessIsSet(true);
      }
      if (incoming.get(12)) {
        struct.defaultPermissions = new LecturePermissions();
        struct.defaultPermissions.read(iprot);
        struct.setDefaultPermissionsIsSet(true);
      }
      if (incoming.get(13)) {
        {
          org.apache.thrift.protocol.TList _list121 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.addAllowedUsers = new ArrayList<String>(_list121.size);
          String _elem122;
          for (int _i123 = 0; _i123 < _list121.size; ++_i123)
          {
            _elem122 = iprot.readString();
            struct.addAllowedUsers.add(_elem122);
          }
        }
        struct.setAddAllowedUsersIsSet(true);
      }
      if (incoming.get(14)) {
        {
          org.apache.thrift.protocol.TList _list124 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.remAllowedUsers = new ArrayList<String>(_list124.size);
          String _elem125;
          for (int _i126 = 0; _i126 < _list124.size; ++_i126)
          {
            _elem125 = iprot.readString();
            struct.remAllowedUsers.add(_elem125);
          }
        }
        struct.setRemAllowedUsersIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list127 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.locationIds = new ArrayList<Integer>(_list127.size);
          int _elem128;
          for (int _i129 = 0; _i129 < _list127.size; ++_i129)
          {
            _elem128 = iprot.readI32();
            struct.locationIds.add(_elem128);
          }
        }
        struct.setLocationIdsIsSet(true);
      }
      if (incoming.get(16)) {
        struct.limitToLocations = iprot.readBool();
        struct.setLimitToLocationsIsSet(true);
      }
      if (incoming.get(17)) {
        struct.limitToAllowedUsers = iprot.readBool();
        struct.setLimitToAllowedUsersIsSet(true);
      }
      if (incoming.get(18)) {
        struct.hasUsbAccess = iprot.readBool();
        struct.setHasUsbAccessIsSet(true);
      }
    }
  }

}

