/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class TransferInformation implements org.apache.thrift.TBase<TransferInformation, TransferInformation._Fields>, java.io.Serializable, Cloneable, Comparable<TransferInformation> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferInformation");

  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PLAIN_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("plainPort", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SSL_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("sslPort", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField BLOCK_HASHES_FIELD_DESC = new org.apache.thrift.protocol.TField("blockHashes", org.apache.thrift.protocol.TType.LIST, (short)4);
  private static final org.apache.thrift.protocol.TField MACHINE_DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("machineDescription", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TransferInformationStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TransferInformationTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String token; // required
  public int plainPort; // required
  public int sslPort; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> blockHashes; // optional
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer machineDescription; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TOKEN((short)1, "token"),
    PLAIN_PORT((short)2, "plainPort"),
    SSL_PORT((short)3, "sslPort"),
    BLOCK_HASHES((short)4, "blockHashes"),
    MACHINE_DESCRIPTION((short)5, "machineDescription");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TOKEN
          return TOKEN;
        case 2: // PLAIN_PORT
          return PLAIN_PORT;
        case 3: // SSL_PORT
          return SSL_PORT;
        case 4: // BLOCK_HASHES
          return BLOCK_HASHES;
        case 5: // MACHINE_DESCRIPTION
          return MACHINE_DESCRIPTION;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PLAINPORT_ISSET_ID = 0;
  private static final int __SSLPORT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BLOCK_HASHES,_Fields.MACHINE_DESCRIPTION};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Token")));
    tmpMap.put(_Fields.PLAIN_PORT, new org.apache.thrift.meta_data.FieldMetaData("plainPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SSL_PORT, new org.apache.thrift.meta_data.FieldMetaData("sslPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.BLOCK_HASHES, new org.apache.thrift.meta_data.FieldMetaData("blockHashes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , true))));
    tmpMap.put(_Fields.MACHINE_DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("machineDescription", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferInformation.class, metaDataMap);
  }

  public TransferInformation() {
  }

  public TransferInformation(
    java.lang.String token,
    int plainPort,
    int sslPort)
  {
    this();
    this.token = token;
    this.plainPort = plainPort;
    setPlainPortIsSet(true);
    this.sslPort = sslPort;
    setSslPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransferInformation(TransferInformation other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.plainPort = other.plainPort;
    this.sslPort = other.sslPort;
    if (other.isSetBlockHashes()) {
      java.util.List<java.nio.ByteBuffer> __this__blockHashes = new java.util.ArrayList<java.nio.ByteBuffer>(other.blockHashes);
      this.blockHashes = __this__blockHashes;
    }
    if (other.isSetMachineDescription()) {
      this.machineDescription = org.apache.thrift.TBaseHelper.copyBinary(other.machineDescription);
    }
  }

  public TransferInformation deepCopy() {
    return new TransferInformation(this);
  }

  @Override
  public void clear() {
    this.token = null;
    setPlainPortIsSet(false);
    this.plainPort = 0;
    setSslPortIsSet(false);
    this.sslPort = 0;
    this.blockHashes = null;
    this.machineDescription = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public TransferInformation setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  public int getPlainPort() {
    return this.plainPort;
  }

  public TransferInformation setPlainPort(int plainPort) {
    this.plainPort = plainPort;
    setPlainPortIsSet(true);
    return this;
  }

  public void unsetPlainPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PLAINPORT_ISSET_ID);
  }

  /** Returns true if field plainPort is set (has been assigned a value) and false otherwise */
  public boolean isSetPlainPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PLAINPORT_ISSET_ID);
  }

  public void setPlainPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PLAINPORT_ISSET_ID, value);
  }

  public int getSslPort() {
    return this.sslPort;
  }

  public TransferInformation setSslPort(int sslPort) {
    this.sslPort = sslPort;
    setSslPortIsSet(true);
    return this;
  }

  public void unsetSslPort() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SSLPORT_ISSET_ID);
  }

  /** Returns true if field sslPort is set (has been assigned a value) and false otherwise */
  public boolean isSetSslPort() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SSLPORT_ISSET_ID);
  }

  public void setSslPortIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SSLPORT_ISSET_ID, value);
  }

  public int getBlockHashesSize() {
    return (this.blockHashes == null) ? 0 : this.blockHashes.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.nio.ByteBuffer> getBlockHashesIterator() {
    return (this.blockHashes == null) ? null : this.blockHashes.iterator();
  }

  public void addToBlockHashes(java.nio.ByteBuffer elem) {
    if (this.blockHashes == null) {
      this.blockHashes = new java.util.ArrayList<java.nio.ByteBuffer>();
    }
    this.blockHashes.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.nio.ByteBuffer> getBlockHashes() {
    return this.blockHashes;
  }

  public TransferInformation setBlockHashes(@org.apache.thrift.annotation.Nullable java.util.List<java.nio.ByteBuffer> blockHashes) {
    this.blockHashes = blockHashes;
    return this;
  }

  public void unsetBlockHashes() {
    this.blockHashes = null;
  }

  /** Returns true if field blockHashes is set (has been assigned a value) and false otherwise */
  public boolean isSetBlockHashes() {
    return this.blockHashes != null;
  }

  public void setBlockHashesIsSet(boolean value) {
    if (!value) {
      this.blockHashes = null;
    }
  }

  public byte[] getMachineDescription() {
    setMachineDescription(org.apache.thrift.TBaseHelper.rightSize(machineDescription));
    return machineDescription == null ? null : machineDescription.array();
  }

  public java.nio.ByteBuffer bufferForMachineDescription() {
    return org.apache.thrift.TBaseHelper.copyBinary(machineDescription);
  }

  public TransferInformation setMachineDescription(byte[] machineDescription) {
    this.machineDescription = machineDescription == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(machineDescription.clone());
    return this;
  }

  public TransferInformation setMachineDescription(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer machineDescription) {
    this.machineDescription = org.apache.thrift.TBaseHelper.copyBinary(machineDescription);
    return this;
  }

  public void unsetMachineDescription() {
    this.machineDescription = null;
  }

  /** Returns true if field machineDescription is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineDescription() {
    return this.machineDescription != null;
  }

  public void setMachineDescriptionIsSet(boolean value) {
    if (!value) {
      this.machineDescription = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case PLAIN_PORT:
      if (value == null) {
        unsetPlainPort();
      } else {
        setPlainPort((java.lang.Integer)value);
      }
      break;

    case SSL_PORT:
      if (value == null) {
        unsetSslPort();
      } else {
        setSslPort((java.lang.Integer)value);
      }
      break;

    case BLOCK_HASHES:
      if (value == null) {
        unsetBlockHashes();
      } else {
        setBlockHashes((java.util.List<java.nio.ByteBuffer>)value);
      }
      break;

    case MACHINE_DESCRIPTION:
      if (value == null) {
        unsetMachineDescription();
      } else {
        if (value instanceof byte[]) {
          setMachineDescription((byte[])value);
        } else {
          setMachineDescription((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TOKEN:
      return getToken();

    case PLAIN_PORT:
      return getPlainPort();

    case SSL_PORT:
      return getSslPort();

    case BLOCK_HASHES:
      return getBlockHashes();

    case MACHINE_DESCRIPTION:
      return getMachineDescription();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TOKEN:
      return isSetToken();
    case PLAIN_PORT:
      return isSetPlainPort();
    case SSL_PORT:
      return isSetSslPort();
    case BLOCK_HASHES:
      return isSetBlockHashes();
    case MACHINE_DESCRIPTION:
      return isSetMachineDescription();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TransferInformation)
      return this.equals((TransferInformation)that);
    return false;
  }

  public boolean equals(TransferInformation that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_plainPort = true;
    boolean that_present_plainPort = true;
    if (this_present_plainPort || that_present_plainPort) {
      if (!(this_present_plainPort && that_present_plainPort))
        return false;
      if (this.plainPort != that.plainPort)
        return false;
    }

    boolean this_present_sslPort = true;
    boolean that_present_sslPort = true;
    if (this_present_sslPort || that_present_sslPort) {
      if (!(this_present_sslPort && that_present_sslPort))
        return false;
      if (this.sslPort != that.sslPort)
        return false;
    }

    boolean this_present_blockHashes = true && this.isSetBlockHashes();
    boolean that_present_blockHashes = true && that.isSetBlockHashes();
    if (this_present_blockHashes || that_present_blockHashes) {
      if (!(this_present_blockHashes && that_present_blockHashes))
        return false;
      if (!this.blockHashes.equals(that.blockHashes))
        return false;
    }

    boolean this_present_machineDescription = true && this.isSetMachineDescription();
    boolean that_present_machineDescription = true && that.isSetMachineDescription();
    if (this_present_machineDescription || that_present_machineDescription) {
      if (!(this_present_machineDescription && that_present_machineDescription))
        return false;
      if (!this.machineDescription.equals(that.machineDescription))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + plainPort;

    hashCode = hashCode * 8191 + sslPort;

    hashCode = hashCode * 8191 + ((isSetBlockHashes()) ? 131071 : 524287);
    if (isSetBlockHashes())
      hashCode = hashCode * 8191 + blockHashes.hashCode();

    hashCode = hashCode * 8191 + ((isSetMachineDescription()) ? 131071 : 524287);
    if (isSetMachineDescription())
      hashCode = hashCode * 8191 + machineDescription.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TransferInformation other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetPlainPort(), other.isSetPlainPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPlainPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.plainPort, other.plainPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetSslPort(), other.isSetSslPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSslPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sslPort, other.sslPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetBlockHashes(), other.isSetBlockHashes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlockHashes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blockHashes, other.blockHashes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetMachineDescription(), other.isSetMachineDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineDescription, other.machineDescription);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TransferInformation(");
    boolean first = true;

    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("plainPort:");
    sb.append(this.plainPort);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sslPort:");
    sb.append(this.sslPort);
    first = false;
    if (isSetBlockHashes()) {
      if (!first) sb.append(", ");
      sb.append("blockHashes:");
      if (this.blockHashes == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.blockHashes, sb);
      }
      first = false;
    }
    if (isSetMachineDescription()) {
      if (!first) sb.append(", ");
      sb.append("machineDescription:");
      if (this.machineDescription == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.machineDescription, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransferInformationStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransferInformationStandardScheme getScheme() {
      return new TransferInformationStandardScheme();
    }
  }

  private static class TransferInformationStandardScheme extends org.apache.thrift.scheme.StandardScheme<TransferInformation> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransferInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PLAIN_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.plainPort = iprot.readI32();
              struct.setPlainPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SSL_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sslPort = iprot.readI32();
              struct.setSslPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BLOCK_HASHES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list290 = iprot.readListBegin();
                struct.blockHashes = new java.util.ArrayList<java.nio.ByteBuffer>(_list290.size);
                @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem291;
                for (int _i292 = 0; _i292 < _list290.size; ++_i292)
                {
                  _elem291 = iprot.readBinary();
                  struct.blockHashes.add(_elem291);
                }
                iprot.readListEnd();
              }
              struct.setBlockHashesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MACHINE_DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.machineDescription = iprot.readBinary();
              struct.setMachineDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransferInformation struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PLAIN_PORT_FIELD_DESC);
      oprot.writeI32(struct.plainPort);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SSL_PORT_FIELD_DESC);
      oprot.writeI32(struct.sslPort);
      oprot.writeFieldEnd();
      if (struct.blockHashes != null) {
        if (struct.isSetBlockHashes()) {
          oprot.writeFieldBegin(BLOCK_HASHES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.blockHashes.size()));
            for (java.nio.ByteBuffer _iter293 : struct.blockHashes)
            {
              oprot.writeBinary(_iter293);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.machineDescription != null) {
        if (struct.isSetMachineDescription()) {
          oprot.writeFieldBegin(MACHINE_DESCRIPTION_FIELD_DESC);
          oprot.writeBinary(struct.machineDescription);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransferInformationTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TransferInformationTupleScheme getScheme() {
      return new TransferInformationTupleScheme();
    }
  }

  private static class TransferInformationTupleScheme extends org.apache.thrift.scheme.TupleScheme<TransferInformation> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransferInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetToken()) {
        optionals.set(0);
      }
      if (struct.isSetPlainPort()) {
        optionals.set(1);
      }
      if (struct.isSetSslPort()) {
        optionals.set(2);
      }
      if (struct.isSetBlockHashes()) {
        optionals.set(3);
      }
      if (struct.isSetMachineDescription()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetPlainPort()) {
        oprot.writeI32(struct.plainPort);
      }
      if (struct.isSetSslPort()) {
        oprot.writeI32(struct.sslPort);
      }
      if (struct.isSetBlockHashes()) {
        {
          oprot.writeI32(struct.blockHashes.size());
          for (java.nio.ByteBuffer _iter294 : struct.blockHashes)
          {
            oprot.writeBinary(_iter294);
          }
        }
      }
      if (struct.isSetMachineDescription()) {
        oprot.writeBinary(struct.machineDescription);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransferInformation struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(1)) {
        struct.plainPort = iprot.readI32();
        struct.setPlainPortIsSet(true);
      }
      if (incoming.get(2)) {
        struct.sslPort = iprot.readI32();
        struct.setSslPortIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TList _list295 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.blockHashes = new java.util.ArrayList<java.nio.ByteBuffer>(_list295.size);
          @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer _elem296;
          for (int _i297 = 0; _i297 < _list295.size; ++_i297)
          {
            _elem296 = iprot.readBinary();
            struct.blockHashes.add(_elem296);
          }
        }
        struct.setBlockHashesIsSet(true);
      }
      if (incoming.get(4)) {
        struct.machineDescription = iprot.readBinary();
        struct.setMachineDescriptionIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

