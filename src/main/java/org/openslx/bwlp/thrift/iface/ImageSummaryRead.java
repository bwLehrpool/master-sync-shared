/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class ImageSummaryRead implements org.apache.thrift.TBase<ImageSummaryRead, ImageSummaryRead._Fields>, java.io.Serializable, Cloneable, Comparable<ImageSummaryRead> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageSummaryRead");

  private static final org.apache.thrift.protocol.TField IMAGE_BASE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("imageBaseId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LATEST_VERSION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("latestVersionId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField IMAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("imageName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)23);
  private static final org.apache.thrift.protocol.TField OS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("osId", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField VIRT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CREATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("createTime", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField UPDATE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("updateTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField UPLOAD_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uploadTime", org.apache.thrift.protocol.TType.I64, (short)20);
  private static final org.apache.thrift.protocol.TField EXPIRE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("expireTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField OWNER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField UPLOADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uploaderId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField SHARE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareMode", org.apache.thrift.protocol.TType.I32, (short)12);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSize", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField IS_RESTRICTED_FIELD_DESC = new org.apache.thrift.protocol.TField("isRestricted", org.apache.thrift.protocol.TType.BOOL, (short)14);
  private static final org.apache.thrift.protocol.TField IS_VALID_FIELD_DESC = new org.apache.thrift.protocol.TField("isValid", org.apache.thrift.protocol.TType.BOOL, (short)15);
  private static final org.apache.thrift.protocol.TField IS_PROCESSED_FIELD_DESC = new org.apache.thrift.protocol.TField("isProcessed", org.apache.thrift.protocol.TType.BOOL, (short)16);
  private static final org.apache.thrift.protocol.TField IS_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("isTemplate", org.apache.thrift.protocol.TType.BOOL, (short)17);
  private static final org.apache.thrift.protocol.TField DEFAULT_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)18);
  private static final org.apache.thrift.protocol.TField USER_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("userPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)19);
  private static final org.apache.thrift.protocol.TField FILE_SIZE_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("fileSizeSum", org.apache.thrift.protocol.TType.I64, (short)21);
  private static final org.apache.thrift.protocol.TField VERSION_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("versionCount", org.apache.thrift.protocol.TType.I32, (short)22);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageSummaryReadStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageSummaryReadTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String imageBaseId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String latestVersionId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String imageName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public int osId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String virtId; // required
  public long createTime; // required
  public long updateTime; // required
  public long uploadTime; // required
  public long expireTime; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String ownerId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String uploaderId; // required
  /**
   * 
   * @see ShareMode
   */
  public @org.apache.thrift.annotation.Nullable ShareMode shareMode; // required
  public long fileSize; // required
  public boolean isRestricted; // required
  public boolean isValid; // required
  public boolean isProcessed; // required
  public boolean isTemplate; // required
  public @org.apache.thrift.annotation.Nullable ImagePermissions defaultPermissions; // required
  public @org.apache.thrift.annotation.Nullable ImagePermissions userPermissions; // optional
  public long fileSizeSum; // optional
  public int versionCount; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMAGE_BASE_ID((short)1, "imageBaseId"),
    LATEST_VERSION_ID((short)3, "latestVersionId"),
    IMAGE_NAME((short)4, "imageName"),
    DESCRIPTION((short)23, "description"),
    OS_ID((short)5, "osId"),
    VIRT_ID((short)6, "virtId"),
    CREATE_TIME((short)7, "createTime"),
    UPDATE_TIME((short)8, "updateTime"),
    UPLOAD_TIME((short)20, "uploadTime"),
    EXPIRE_TIME((short)9, "expireTime"),
    OWNER_ID((short)10, "ownerId"),
    UPLOADER_ID((short)11, "uploaderId"),
    /**
     * 
     * @see ShareMode
     */
    SHARE_MODE((short)12, "shareMode"),
    FILE_SIZE((short)13, "fileSize"),
    IS_RESTRICTED((short)14, "isRestricted"),
    IS_VALID((short)15, "isValid"),
    IS_PROCESSED((short)16, "isProcessed"),
    IS_TEMPLATE((short)17, "isTemplate"),
    DEFAULT_PERMISSIONS((short)18, "defaultPermissions"),
    USER_PERMISSIONS((short)19, "userPermissions"),
    FILE_SIZE_SUM((short)21, "fileSizeSum"),
    VERSION_COUNT((short)22, "versionCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMAGE_BASE_ID
          return IMAGE_BASE_ID;
        case 3: // LATEST_VERSION_ID
          return LATEST_VERSION_ID;
        case 4: // IMAGE_NAME
          return IMAGE_NAME;
        case 23: // DESCRIPTION
          return DESCRIPTION;
        case 5: // OS_ID
          return OS_ID;
        case 6: // VIRT_ID
          return VIRT_ID;
        case 7: // CREATE_TIME
          return CREATE_TIME;
        case 8: // UPDATE_TIME
          return UPDATE_TIME;
        case 20: // UPLOAD_TIME
          return UPLOAD_TIME;
        case 9: // EXPIRE_TIME
          return EXPIRE_TIME;
        case 10: // OWNER_ID
          return OWNER_ID;
        case 11: // UPLOADER_ID
          return UPLOADER_ID;
        case 12: // SHARE_MODE
          return SHARE_MODE;
        case 13: // FILE_SIZE
          return FILE_SIZE;
        case 14: // IS_RESTRICTED
          return IS_RESTRICTED;
        case 15: // IS_VALID
          return IS_VALID;
        case 16: // IS_PROCESSED
          return IS_PROCESSED;
        case 17: // IS_TEMPLATE
          return IS_TEMPLATE;
        case 18: // DEFAULT_PERMISSIONS
          return DEFAULT_PERMISSIONS;
        case 19: // USER_PERMISSIONS
          return USER_PERMISSIONS;
        case 21: // FILE_SIZE_SUM
          return FILE_SIZE_SUM;
        case 22: // VERSION_COUNT
          return VERSION_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OSID_ISSET_ID = 0;
  private static final int __CREATETIME_ISSET_ID = 1;
  private static final int __UPDATETIME_ISSET_ID = 2;
  private static final int __UPLOADTIME_ISSET_ID = 3;
  private static final int __EXPIRETIME_ISSET_ID = 4;
  private static final int __FILESIZE_ISSET_ID = 5;
  private static final int __ISRESTRICTED_ISSET_ID = 6;
  private static final int __ISVALID_ISSET_ID = 7;
  private static final int __ISPROCESSED_ISSET_ID = 8;
  private static final int __ISTEMPLATE_ISSET_ID = 9;
  private static final int __FILESIZESUM_ISSET_ID = 10;
  private static final int __VERSIONCOUNT_ISSET_ID = 11;
  private short __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USER_PERMISSIONS,_Fields.FILE_SIZE_SUM,_Fields.VERSION_COUNT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMAGE_BASE_ID, new org.apache.thrift.meta_data.FieldMetaData("imageBaseId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.LATEST_VERSION_ID, new org.apache.thrift.meta_data.FieldMetaData("latestVersionId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.IMAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("imageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_ID, new org.apache.thrift.meta_data.FieldMetaData("osId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIRT_ID, new org.apache.thrift.meta_data.FieldMetaData("virtId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CREATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("createTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.UPDATE_TIME, new org.apache.thrift.meta_data.FieldMetaData("updateTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.UPLOAD_TIME, new org.apache.thrift.meta_data.FieldMetaData("uploadTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.EXPIRE_TIME, new org.apache.thrift.meta_data.FieldMetaData("expireTime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "UnixTimestamp")));
    tmpMap.put(_Fields.OWNER_ID, new org.apache.thrift.meta_data.FieldMetaData("ownerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.UPLOADER_ID, new org.apache.thrift.meta_data.FieldMetaData("uploaderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "UUID")));
    tmpMap.put(_Fields.SHARE_MODE, new org.apache.thrift.meta_data.FieldMetaData("shareMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ShareMode.class)));
    tmpMap.put(_Fields.FILE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("fileSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IS_RESTRICTED, new org.apache.thrift.meta_data.FieldMetaData("isRestricted", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_VALID, new org.apache.thrift.meta_data.FieldMetaData("isValid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_PROCESSED, new org.apache.thrift.meta_data.FieldMetaData("isProcessed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.IS_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("isTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("defaultPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePermissions.class)));
    tmpMap.put(_Fields.USER_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("userPermissions", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePermissions.class)));
    tmpMap.put(_Fields.FILE_SIZE_SUM, new org.apache.thrift.meta_data.FieldMetaData("fileSizeSum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_COUNT, new org.apache.thrift.meta_data.FieldMetaData("versionCount", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageSummaryRead.class, metaDataMap);
  }

  public ImageSummaryRead() {
  }

  public ImageSummaryRead(
    java.lang.String imageBaseId,
    java.lang.String latestVersionId,
    java.lang.String imageName,
    java.lang.String description,
    int osId,
    java.lang.String virtId,
    long createTime,
    long updateTime,
    long uploadTime,
    long expireTime,
    java.lang.String ownerId,
    java.lang.String uploaderId,
    ShareMode shareMode,
    long fileSize,
    boolean isRestricted,
    boolean isValid,
    boolean isProcessed,
    boolean isTemplate,
    ImagePermissions defaultPermissions)
  {
    this();
    this.imageBaseId = imageBaseId;
    this.latestVersionId = latestVersionId;
    this.imageName = imageName;
    this.description = description;
    this.osId = osId;
    setOsIdIsSet(true);
    this.virtId = virtId;
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    this.uploadTime = uploadTime;
    setUploadTimeIsSet(true);
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    this.ownerId = ownerId;
    this.uploaderId = uploaderId;
    this.shareMode = shareMode;
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    this.isRestricted = isRestricted;
    setIsRestrictedIsSet(true);
    this.isValid = isValid;
    setIsValidIsSet(true);
    this.isProcessed = isProcessed;
    setIsProcessedIsSet(true);
    this.isTemplate = isTemplate;
    setIsTemplateIsSet(true);
    this.defaultPermissions = defaultPermissions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageSummaryRead(ImageSummaryRead other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImageBaseId()) {
      this.imageBaseId = other.imageBaseId;
    }
    if (other.isSetLatestVersionId()) {
      this.latestVersionId = other.latestVersionId;
    }
    if (other.isSetImageName()) {
      this.imageName = other.imageName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.osId = other.osId;
    if (other.isSetVirtId()) {
      this.virtId = other.virtId;
    }
    this.createTime = other.createTime;
    this.updateTime = other.updateTime;
    this.uploadTime = other.uploadTime;
    this.expireTime = other.expireTime;
    if (other.isSetOwnerId()) {
      this.ownerId = other.ownerId;
    }
    if (other.isSetUploaderId()) {
      this.uploaderId = other.uploaderId;
    }
    if (other.isSetShareMode()) {
      this.shareMode = other.shareMode;
    }
    this.fileSize = other.fileSize;
    this.isRestricted = other.isRestricted;
    this.isValid = other.isValid;
    this.isProcessed = other.isProcessed;
    this.isTemplate = other.isTemplate;
    if (other.isSetDefaultPermissions()) {
      this.defaultPermissions = new ImagePermissions(other.defaultPermissions);
    }
    if (other.isSetUserPermissions()) {
      this.userPermissions = new ImagePermissions(other.userPermissions);
    }
    this.fileSizeSum = other.fileSizeSum;
    this.versionCount = other.versionCount;
  }

  public ImageSummaryRead deepCopy() {
    return new ImageSummaryRead(this);
  }

  @Override
  public void clear() {
    this.imageBaseId = null;
    this.latestVersionId = null;
    this.imageName = null;
    this.description = null;
    setOsIdIsSet(false);
    this.osId = 0;
    this.virtId = null;
    setCreateTimeIsSet(false);
    this.createTime = 0;
    setUpdateTimeIsSet(false);
    this.updateTime = 0;
    setUploadTimeIsSet(false);
    this.uploadTime = 0;
    setExpireTimeIsSet(false);
    this.expireTime = 0;
    this.ownerId = null;
    this.uploaderId = null;
    this.shareMode = null;
    setFileSizeIsSet(false);
    this.fileSize = 0;
    setIsRestrictedIsSet(false);
    this.isRestricted = false;
    setIsValidIsSet(false);
    this.isValid = false;
    setIsProcessedIsSet(false);
    this.isProcessed = false;
    setIsTemplateIsSet(false);
    this.isTemplate = false;
    this.defaultPermissions = null;
    this.userPermissions = null;
    setFileSizeSumIsSet(false);
    this.fileSizeSum = 0;
    setVersionCountIsSet(false);
    this.versionCount = 0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageBaseId() {
    return this.imageBaseId;
  }

  public ImageSummaryRead setImageBaseId(@org.apache.thrift.annotation.Nullable java.lang.String imageBaseId) {
    this.imageBaseId = imageBaseId;
    return this;
  }

  public void unsetImageBaseId() {
    this.imageBaseId = null;
  }

  /** Returns true if field imageBaseId is set (has been assigned a value) and false otherwise */
  public boolean isSetImageBaseId() {
    return this.imageBaseId != null;
  }

  public void setImageBaseIdIsSet(boolean value) {
    if (!value) {
      this.imageBaseId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getLatestVersionId() {
    return this.latestVersionId;
  }

  public ImageSummaryRead setLatestVersionId(@org.apache.thrift.annotation.Nullable java.lang.String latestVersionId) {
    this.latestVersionId = latestVersionId;
    return this;
  }

  public void unsetLatestVersionId() {
    this.latestVersionId = null;
  }

  /** Returns true if field latestVersionId is set (has been assigned a value) and false otherwise */
  public boolean isSetLatestVersionId() {
    return this.latestVersionId != null;
  }

  public void setLatestVersionIdIsSet(boolean value) {
    if (!value) {
      this.latestVersionId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageName() {
    return this.imageName;
  }

  public ImageSummaryRead setImageName(@org.apache.thrift.annotation.Nullable java.lang.String imageName) {
    this.imageName = imageName;
    return this;
  }

  public void unsetImageName() {
    this.imageName = null;
  }

  /** Returns true if field imageName is set (has been assigned a value) and false otherwise */
  public boolean isSetImageName() {
    return this.imageName != null;
  }

  public void setImageNameIsSet(boolean value) {
    if (!value) {
      this.imageName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public ImageSummaryRead setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getOsId() {
    return this.osId;
  }

  public ImageSummaryRead setOsId(int osId) {
    this.osId = osId;
    setOsIdIsSet(true);
    return this;
  }

  public void unsetOsId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  /** Returns true if field osId is set (has been assigned a value) and false otherwise */
  public boolean isSetOsId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  public void setOsIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OSID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVirtId() {
    return this.virtId;
  }

  public ImageSummaryRead setVirtId(@org.apache.thrift.annotation.Nullable java.lang.String virtId) {
    this.virtId = virtId;
    return this;
  }

  public void unsetVirtId() {
    this.virtId = null;
  }

  /** Returns true if field virtId is set (has been assigned a value) and false otherwise */
  public boolean isSetVirtId() {
    return this.virtId != null;
  }

  public void setVirtIdIsSet(boolean value) {
    if (!value) {
      this.virtId = null;
    }
  }

  public long getCreateTime() {
    return this.createTime;
  }

  public ImageSummaryRead setCreateTime(long createTime) {
    this.createTime = createTime;
    setCreateTimeIsSet(true);
    return this;
  }

  public void unsetCreateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  /** Returns true if field createTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCreateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CREATETIME_ISSET_ID);
  }

  public void setCreateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CREATETIME_ISSET_ID, value);
  }

  public long getUpdateTime() {
    return this.updateTime;
  }

  public ImageSummaryRead setUpdateTime(long updateTime) {
    this.updateTime = updateTime;
    setUpdateTimeIsSet(true);
    return this;
  }

  public void unsetUpdateTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  /** Returns true if field updateTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUpdateTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPDATETIME_ISSET_ID);
  }

  public void setUpdateTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPDATETIME_ISSET_ID, value);
  }

  public long getUploadTime() {
    return this.uploadTime;
  }

  public ImageSummaryRead setUploadTime(long uploadTime) {
    this.uploadTime = uploadTime;
    setUploadTimeIsSet(true);
    return this;
  }

  public void unsetUploadTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __UPLOADTIME_ISSET_ID);
  }

  /** Returns true if field uploadTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUploadTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __UPLOADTIME_ISSET_ID);
  }

  public void setUploadTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __UPLOADTIME_ISSET_ID, value);
  }

  public long getExpireTime() {
    return this.expireTime;
  }

  public ImageSummaryRead setExpireTime(long expireTime) {
    this.expireTime = expireTime;
    setExpireTimeIsSet(true);
    return this;
  }

  public void unsetExpireTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  /** Returns true if field expireTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExpireTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXPIRETIME_ISSET_ID);
  }

  public void setExpireTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXPIRETIME_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getOwnerId() {
    return this.ownerId;
  }

  public ImageSummaryRead setOwnerId(@org.apache.thrift.annotation.Nullable java.lang.String ownerId) {
    this.ownerId = ownerId;
    return this;
  }

  public void unsetOwnerId() {
    this.ownerId = null;
  }

  /** Returns true if field ownerId is set (has been assigned a value) and false otherwise */
  public boolean isSetOwnerId() {
    return this.ownerId != null;
  }

  public void setOwnerIdIsSet(boolean value) {
    if (!value) {
      this.ownerId = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUploaderId() {
    return this.uploaderId;
  }

  public ImageSummaryRead setUploaderId(@org.apache.thrift.annotation.Nullable java.lang.String uploaderId) {
    this.uploaderId = uploaderId;
    return this;
  }

  public void unsetUploaderId() {
    this.uploaderId = null;
  }

  /** Returns true if field uploaderId is set (has been assigned a value) and false otherwise */
  public boolean isSetUploaderId() {
    return this.uploaderId != null;
  }

  public void setUploaderIdIsSet(boolean value) {
    if (!value) {
      this.uploaderId = null;
    }
  }

  /**
   * 
   * @see ShareMode
   */
  @org.apache.thrift.annotation.Nullable
  public ShareMode getShareMode() {
    return this.shareMode;
  }

  /**
   * 
   * @see ShareMode
   */
  public ImageSummaryRead setShareMode(@org.apache.thrift.annotation.Nullable ShareMode shareMode) {
    this.shareMode = shareMode;
    return this;
  }

  public void unsetShareMode() {
    this.shareMode = null;
  }

  /** Returns true if field shareMode is set (has been assigned a value) and false otherwise */
  public boolean isSetShareMode() {
    return this.shareMode != null;
  }

  public void setShareModeIsSet(boolean value) {
    if (!value) {
      this.shareMode = null;
    }
  }

  public long getFileSize() {
    return this.fileSize;
  }

  public ImageSummaryRead setFileSize(long fileSize) {
    this.fileSize = fileSize;
    setFileSizeIsSet(true);
    return this;
  }

  public void unsetFileSize() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  /** Returns true if field fileSize is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSize() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILESIZE_ISSET_ID);
  }

  public void setFileSizeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILESIZE_ISSET_ID, value);
  }

  public boolean isIsRestricted() {
    return this.isRestricted;
  }

  public ImageSummaryRead setIsRestricted(boolean isRestricted) {
    this.isRestricted = isRestricted;
    setIsRestrictedIsSet(true);
    return this;
  }

  public void unsetIsRestricted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISRESTRICTED_ISSET_ID);
  }

  /** Returns true if field isRestricted is set (has been assigned a value) and false otherwise */
  public boolean isSetIsRestricted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISRESTRICTED_ISSET_ID);
  }

  public void setIsRestrictedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISRESTRICTED_ISSET_ID, value);
  }

  public boolean isIsValid() {
    return this.isValid;
  }

  public ImageSummaryRead setIsValid(boolean isValid) {
    this.isValid = isValid;
    setIsValidIsSet(true);
    return this;
  }

  public void unsetIsValid() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISVALID_ISSET_ID);
  }

  /** Returns true if field isValid is set (has been assigned a value) and false otherwise */
  public boolean isSetIsValid() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISVALID_ISSET_ID);
  }

  public void setIsValidIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISVALID_ISSET_ID, value);
  }

  public boolean isIsProcessed() {
    return this.isProcessed;
  }

  public ImageSummaryRead setIsProcessed(boolean isProcessed) {
    this.isProcessed = isProcessed;
    setIsProcessedIsSet(true);
    return this;
  }

  public void unsetIsProcessed() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPROCESSED_ISSET_ID);
  }

  /** Returns true if field isProcessed is set (has been assigned a value) and false otherwise */
  public boolean isSetIsProcessed() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPROCESSED_ISSET_ID);
  }

  public void setIsProcessedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPROCESSED_ISSET_ID, value);
  }

  public boolean isIsTemplate() {
    return this.isTemplate;
  }

  public ImageSummaryRead setIsTemplate(boolean isTemplate) {
    this.isTemplate = isTemplate;
    setIsTemplateIsSet(true);
    return this;
  }

  public void unsetIsTemplate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID);
  }

  /** Returns true if field isTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTemplate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID);
  }

  public void setIsTemplateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public ImagePermissions getDefaultPermissions() {
    return this.defaultPermissions;
  }

  public ImageSummaryRead setDefaultPermissions(@org.apache.thrift.annotation.Nullable ImagePermissions defaultPermissions) {
    this.defaultPermissions = defaultPermissions;
    return this;
  }

  public void unsetDefaultPermissions() {
    this.defaultPermissions = null;
  }

  /** Returns true if field defaultPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultPermissions() {
    return this.defaultPermissions != null;
  }

  public void setDefaultPermissionsIsSet(boolean value) {
    if (!value) {
      this.defaultPermissions = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public ImagePermissions getUserPermissions() {
    return this.userPermissions;
  }

  public ImageSummaryRead setUserPermissions(@org.apache.thrift.annotation.Nullable ImagePermissions userPermissions) {
    this.userPermissions = userPermissions;
    return this;
  }

  public void unsetUserPermissions() {
    this.userPermissions = null;
  }

  /** Returns true if field userPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetUserPermissions() {
    return this.userPermissions != null;
  }

  public void setUserPermissionsIsSet(boolean value) {
    if (!value) {
      this.userPermissions = null;
    }
  }

  public long getFileSizeSum() {
    return this.fileSizeSum;
  }

  public ImageSummaryRead setFileSizeSum(long fileSizeSum) {
    this.fileSizeSum = fileSizeSum;
    setFileSizeSumIsSet(true);
    return this;
  }

  public void unsetFileSizeSum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FILESIZESUM_ISSET_ID);
  }

  /** Returns true if field fileSizeSum is set (has been assigned a value) and false otherwise */
  public boolean isSetFileSizeSum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FILESIZESUM_ISSET_ID);
  }

  public void setFileSizeSumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FILESIZESUM_ISSET_ID, value);
  }

  public int getVersionCount() {
    return this.versionCount;
  }

  public ImageSummaryRead setVersionCount(int versionCount) {
    this.versionCount = versionCount;
    setVersionCountIsSet(true);
    return this;
  }

  public void unsetVersionCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONCOUNT_ISSET_ID);
  }

  /** Returns true if field versionCount is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONCOUNT_ISSET_ID);
  }

  public void setVersionCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IMAGE_BASE_ID:
      if (value == null) {
        unsetImageBaseId();
      } else {
        setImageBaseId((java.lang.String)value);
      }
      break;

    case LATEST_VERSION_ID:
      if (value == null) {
        unsetLatestVersionId();
      } else {
        setLatestVersionId((java.lang.String)value);
      }
      break;

    case IMAGE_NAME:
      if (value == null) {
        unsetImageName();
      } else {
        setImageName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case OS_ID:
      if (value == null) {
        unsetOsId();
      } else {
        setOsId((java.lang.Integer)value);
      }
      break;

    case VIRT_ID:
      if (value == null) {
        unsetVirtId();
      } else {
        setVirtId((java.lang.String)value);
      }
      break;

    case CREATE_TIME:
      if (value == null) {
        unsetCreateTime();
      } else {
        setCreateTime((java.lang.Long)value);
      }
      break;

    case UPDATE_TIME:
      if (value == null) {
        unsetUpdateTime();
      } else {
        setUpdateTime((java.lang.Long)value);
      }
      break;

    case UPLOAD_TIME:
      if (value == null) {
        unsetUploadTime();
      } else {
        setUploadTime((java.lang.Long)value);
      }
      break;

    case EXPIRE_TIME:
      if (value == null) {
        unsetExpireTime();
      } else {
        setExpireTime((java.lang.Long)value);
      }
      break;

    case OWNER_ID:
      if (value == null) {
        unsetOwnerId();
      } else {
        setOwnerId((java.lang.String)value);
      }
      break;

    case UPLOADER_ID:
      if (value == null) {
        unsetUploaderId();
      } else {
        setUploaderId((java.lang.String)value);
      }
      break;

    case SHARE_MODE:
      if (value == null) {
        unsetShareMode();
      } else {
        setShareMode((ShareMode)value);
      }
      break;

    case FILE_SIZE:
      if (value == null) {
        unsetFileSize();
      } else {
        setFileSize((java.lang.Long)value);
      }
      break;

    case IS_RESTRICTED:
      if (value == null) {
        unsetIsRestricted();
      } else {
        setIsRestricted((java.lang.Boolean)value);
      }
      break;

    case IS_VALID:
      if (value == null) {
        unsetIsValid();
      } else {
        setIsValid((java.lang.Boolean)value);
      }
      break;

    case IS_PROCESSED:
      if (value == null) {
        unsetIsProcessed();
      } else {
        setIsProcessed((java.lang.Boolean)value);
      }
      break;

    case IS_TEMPLATE:
      if (value == null) {
        unsetIsTemplate();
      } else {
        setIsTemplate((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_PERMISSIONS:
      if (value == null) {
        unsetDefaultPermissions();
      } else {
        setDefaultPermissions((ImagePermissions)value);
      }
      break;

    case USER_PERMISSIONS:
      if (value == null) {
        unsetUserPermissions();
      } else {
        setUserPermissions((ImagePermissions)value);
      }
      break;

    case FILE_SIZE_SUM:
      if (value == null) {
        unsetFileSizeSum();
      } else {
        setFileSizeSum((java.lang.Long)value);
      }
      break;

    case VERSION_COUNT:
      if (value == null) {
        unsetVersionCount();
      } else {
        setVersionCount((java.lang.Integer)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMAGE_BASE_ID:
      return getImageBaseId();

    case LATEST_VERSION_ID:
      return getLatestVersionId();

    case IMAGE_NAME:
      return getImageName();

    case DESCRIPTION:
      return getDescription();

    case OS_ID:
      return getOsId();

    case VIRT_ID:
      return getVirtId();

    case CREATE_TIME:
      return getCreateTime();

    case UPDATE_TIME:
      return getUpdateTime();

    case UPLOAD_TIME:
      return getUploadTime();

    case EXPIRE_TIME:
      return getExpireTime();

    case OWNER_ID:
      return getOwnerId();

    case UPLOADER_ID:
      return getUploaderId();

    case SHARE_MODE:
      return getShareMode();

    case FILE_SIZE:
      return getFileSize();

    case IS_RESTRICTED:
      return isIsRestricted();

    case IS_VALID:
      return isIsValid();

    case IS_PROCESSED:
      return isIsProcessed();

    case IS_TEMPLATE:
      return isIsTemplate();

    case DEFAULT_PERMISSIONS:
      return getDefaultPermissions();

    case USER_PERMISSIONS:
      return getUserPermissions();

    case FILE_SIZE_SUM:
      return getFileSizeSum();

    case VERSION_COUNT:
      return getVersionCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMAGE_BASE_ID:
      return isSetImageBaseId();
    case LATEST_VERSION_ID:
      return isSetLatestVersionId();
    case IMAGE_NAME:
      return isSetImageName();
    case DESCRIPTION:
      return isSetDescription();
    case OS_ID:
      return isSetOsId();
    case VIRT_ID:
      return isSetVirtId();
    case CREATE_TIME:
      return isSetCreateTime();
    case UPDATE_TIME:
      return isSetUpdateTime();
    case UPLOAD_TIME:
      return isSetUploadTime();
    case EXPIRE_TIME:
      return isSetExpireTime();
    case OWNER_ID:
      return isSetOwnerId();
    case UPLOADER_ID:
      return isSetUploaderId();
    case SHARE_MODE:
      return isSetShareMode();
    case FILE_SIZE:
      return isSetFileSize();
    case IS_RESTRICTED:
      return isSetIsRestricted();
    case IS_VALID:
      return isSetIsValid();
    case IS_PROCESSED:
      return isSetIsProcessed();
    case IS_TEMPLATE:
      return isSetIsTemplate();
    case DEFAULT_PERMISSIONS:
      return isSetDefaultPermissions();
    case USER_PERMISSIONS:
      return isSetUserPermissions();
    case FILE_SIZE_SUM:
      return isSetFileSizeSum();
    case VERSION_COUNT:
      return isSetVersionCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ImageSummaryRead)
      return this.equals((ImageSummaryRead)that);
    return false;
  }

  public boolean equals(ImageSummaryRead that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_imageBaseId = true && this.isSetImageBaseId();
    boolean that_present_imageBaseId = true && that.isSetImageBaseId();
    if (this_present_imageBaseId || that_present_imageBaseId) {
      if (!(this_present_imageBaseId && that_present_imageBaseId))
        return false;
      if (!this.imageBaseId.equals(that.imageBaseId))
        return false;
    }

    boolean this_present_latestVersionId = true && this.isSetLatestVersionId();
    boolean that_present_latestVersionId = true && that.isSetLatestVersionId();
    if (this_present_latestVersionId || that_present_latestVersionId) {
      if (!(this_present_latestVersionId && that_present_latestVersionId))
        return false;
      if (!this.latestVersionId.equals(that.latestVersionId))
        return false;
    }

    boolean this_present_imageName = true && this.isSetImageName();
    boolean that_present_imageName = true && that.isSetImageName();
    if (this_present_imageName || that_present_imageName) {
      if (!(this_present_imageName && that_present_imageName))
        return false;
      if (!this.imageName.equals(that.imageName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_osId = true;
    boolean that_present_osId = true;
    if (this_present_osId || that_present_osId) {
      if (!(this_present_osId && that_present_osId))
        return false;
      if (this.osId != that.osId)
        return false;
    }

    boolean this_present_virtId = true && this.isSetVirtId();
    boolean that_present_virtId = true && that.isSetVirtId();
    if (this_present_virtId || that_present_virtId) {
      if (!(this_present_virtId && that_present_virtId))
        return false;
      if (!this.virtId.equals(that.virtId))
        return false;
    }

    boolean this_present_createTime = true;
    boolean that_present_createTime = true;
    if (this_present_createTime || that_present_createTime) {
      if (!(this_present_createTime && that_present_createTime))
        return false;
      if (this.createTime != that.createTime)
        return false;
    }

    boolean this_present_updateTime = true;
    boolean that_present_updateTime = true;
    if (this_present_updateTime || that_present_updateTime) {
      if (!(this_present_updateTime && that_present_updateTime))
        return false;
      if (this.updateTime != that.updateTime)
        return false;
    }

    boolean this_present_uploadTime = true;
    boolean that_present_uploadTime = true;
    if (this_present_uploadTime || that_present_uploadTime) {
      if (!(this_present_uploadTime && that_present_uploadTime))
        return false;
      if (this.uploadTime != that.uploadTime)
        return false;
    }

    boolean this_present_expireTime = true;
    boolean that_present_expireTime = true;
    if (this_present_expireTime || that_present_expireTime) {
      if (!(this_present_expireTime && that_present_expireTime))
        return false;
      if (this.expireTime != that.expireTime)
        return false;
    }

    boolean this_present_ownerId = true && this.isSetOwnerId();
    boolean that_present_ownerId = true && that.isSetOwnerId();
    if (this_present_ownerId || that_present_ownerId) {
      if (!(this_present_ownerId && that_present_ownerId))
        return false;
      if (!this.ownerId.equals(that.ownerId))
        return false;
    }

    boolean this_present_uploaderId = true && this.isSetUploaderId();
    boolean that_present_uploaderId = true && that.isSetUploaderId();
    if (this_present_uploaderId || that_present_uploaderId) {
      if (!(this_present_uploaderId && that_present_uploaderId))
        return false;
      if (!this.uploaderId.equals(that.uploaderId))
        return false;
    }

    boolean this_present_shareMode = true && this.isSetShareMode();
    boolean that_present_shareMode = true && that.isSetShareMode();
    if (this_present_shareMode || that_present_shareMode) {
      if (!(this_present_shareMode && that_present_shareMode))
        return false;
      if (!this.shareMode.equals(that.shareMode))
        return false;
    }

    boolean this_present_fileSize = true;
    boolean that_present_fileSize = true;
    if (this_present_fileSize || that_present_fileSize) {
      if (!(this_present_fileSize && that_present_fileSize))
        return false;
      if (this.fileSize != that.fileSize)
        return false;
    }

    boolean this_present_isRestricted = true;
    boolean that_present_isRestricted = true;
    if (this_present_isRestricted || that_present_isRestricted) {
      if (!(this_present_isRestricted && that_present_isRestricted))
        return false;
      if (this.isRestricted != that.isRestricted)
        return false;
    }

    boolean this_present_isValid = true;
    boolean that_present_isValid = true;
    if (this_present_isValid || that_present_isValid) {
      if (!(this_present_isValid && that_present_isValid))
        return false;
      if (this.isValid != that.isValid)
        return false;
    }

    boolean this_present_isProcessed = true;
    boolean that_present_isProcessed = true;
    if (this_present_isProcessed || that_present_isProcessed) {
      if (!(this_present_isProcessed && that_present_isProcessed))
        return false;
      if (this.isProcessed != that.isProcessed)
        return false;
    }

    boolean this_present_isTemplate = true;
    boolean that_present_isTemplate = true;
    if (this_present_isTemplate || that_present_isTemplate) {
      if (!(this_present_isTemplate && that_present_isTemplate))
        return false;
      if (this.isTemplate != that.isTemplate)
        return false;
    }

    boolean this_present_defaultPermissions = true && this.isSetDefaultPermissions();
    boolean that_present_defaultPermissions = true && that.isSetDefaultPermissions();
    if (this_present_defaultPermissions || that_present_defaultPermissions) {
      if (!(this_present_defaultPermissions && that_present_defaultPermissions))
        return false;
      if (!this.defaultPermissions.equals(that.defaultPermissions))
        return false;
    }

    boolean this_present_userPermissions = true && this.isSetUserPermissions();
    boolean that_present_userPermissions = true && that.isSetUserPermissions();
    if (this_present_userPermissions || that_present_userPermissions) {
      if (!(this_present_userPermissions && that_present_userPermissions))
        return false;
      if (!this.userPermissions.equals(that.userPermissions))
        return false;
    }

    boolean this_present_fileSizeSum = true && this.isSetFileSizeSum();
    boolean that_present_fileSizeSum = true && that.isSetFileSizeSum();
    if (this_present_fileSizeSum || that_present_fileSizeSum) {
      if (!(this_present_fileSizeSum && that_present_fileSizeSum))
        return false;
      if (this.fileSizeSum != that.fileSizeSum)
        return false;
    }

    boolean this_present_versionCount = true && this.isSetVersionCount();
    boolean that_present_versionCount = true && that.isSetVersionCount();
    if (this_present_versionCount || that_present_versionCount) {
      if (!(this_present_versionCount && that_present_versionCount))
        return false;
      if (this.versionCount != that.versionCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImageBaseId()) ? 131071 : 524287);
    if (isSetImageBaseId())
      hashCode = hashCode * 8191 + imageBaseId.hashCode();

    hashCode = hashCode * 8191 + ((isSetLatestVersionId()) ? 131071 : 524287);
    if (isSetLatestVersionId())
      hashCode = hashCode * 8191 + latestVersionId.hashCode();

    hashCode = hashCode * 8191 + ((isSetImageName()) ? 131071 : 524287);
    if (isSetImageName())
      hashCode = hashCode * 8191 + imageName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + osId;

    hashCode = hashCode * 8191 + ((isSetVirtId()) ? 131071 : 524287);
    if (isSetVirtId())
      hashCode = hashCode * 8191 + virtId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(createTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(updateTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uploadTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(expireTime);

    hashCode = hashCode * 8191 + ((isSetOwnerId()) ? 131071 : 524287);
    if (isSetOwnerId())
      hashCode = hashCode * 8191 + ownerId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUploaderId()) ? 131071 : 524287);
    if (isSetUploaderId())
      hashCode = hashCode * 8191 + uploaderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareMode()) ? 131071 : 524287);
    if (isSetShareMode())
      hashCode = hashCode * 8191 + shareMode.getValue();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fileSize);

    hashCode = hashCode * 8191 + ((isRestricted) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isValid) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isProcessed) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isTemplate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefaultPermissions()) ? 131071 : 524287);
    if (isSetDefaultPermissions())
      hashCode = hashCode * 8191 + defaultPermissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserPermissions()) ? 131071 : 524287);
    if (isSetUserPermissions())
      hashCode = hashCode * 8191 + userPermissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetFileSizeSum()) ? 131071 : 524287);
    if (isSetFileSizeSum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(fileSizeSum);

    hashCode = hashCode * 8191 + ((isSetVersionCount()) ? 131071 : 524287);
    if (isSetVersionCount())
      hashCode = hashCode * 8191 + versionCount;

    return hashCode;
  }

  @Override
  public int compareTo(ImageSummaryRead other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetImageBaseId(), other.isSetImageBaseId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageBaseId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageBaseId, other.imageBaseId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetLatestVersionId(), other.isSetLatestVersionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLatestVersionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latestVersionId, other.latestVersionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetImageName(), other.isSetImageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageName, other.imageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOsId(), other.isSetOsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osId, other.osId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVirtId(), other.isSetVirtId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtId, other.virtId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCreateTime(), other.isSetCreateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCreateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.createTime, other.createTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUpdateTime(), other.isSetUpdateTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUpdateTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.updateTime, other.updateTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUploadTime(), other.isSetUploadTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploadTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploadTime, other.uploadTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetExpireTime(), other.isSetExpireTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExpireTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.expireTime, other.expireTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOwnerId(), other.isSetOwnerId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOwnerId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerId, other.ownerId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUploaderId(), other.isSetUploaderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUploaderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uploaderId, other.uploaderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShareMode(), other.isSetShareMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareMode, other.shareMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileSize(), other.isSetFileSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSize, other.fileSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsRestricted(), other.isSetIsRestricted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsRestricted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isRestricted, other.isRestricted);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsValid(), other.isSetIsValid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsValid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isValid, other.isValid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsProcessed(), other.isSetIsProcessed());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsProcessed()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isProcessed, other.isProcessed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTemplate(), other.isSetIsTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTemplate, other.isTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultPermissions(), other.isSetDefaultPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPermissions, other.defaultPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetUserPermissions(), other.isSetUserPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userPermissions, other.userPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetFileSizeSum(), other.isSetFileSizeSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFileSizeSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileSizeSum, other.fileSizeSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVersionCount(), other.isSetVersionCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionCount, other.versionCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageSummaryRead(");
    boolean first = true;

    sb.append("imageBaseId:");
    if (this.imageBaseId == null) {
      sb.append("null");
    } else {
      sb.append(this.imageBaseId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("latestVersionId:");
    if (this.latestVersionId == null) {
      sb.append("null");
    } else {
      sb.append(this.latestVersionId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imageName:");
    if (this.imageName == null) {
      sb.append("null");
    } else {
      sb.append(this.imageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osId:");
    sb.append(this.osId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("virtId:");
    if (this.virtId == null) {
      sb.append("null");
    } else {
      sb.append(this.virtId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("createTime:");
    sb.append(this.createTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("updateTime:");
    sb.append(this.updateTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploadTime:");
    sb.append(this.uploadTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("expireTime:");
    sb.append(this.expireTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ownerId:");
    if (this.ownerId == null) {
      sb.append("null");
    } else {
      sb.append(this.ownerId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("uploaderId:");
    if (this.uploaderId == null) {
      sb.append("null");
    } else {
      sb.append(this.uploaderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareMode:");
    if (this.shareMode == null) {
      sb.append("null");
    } else {
      sb.append(this.shareMode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileSize:");
    sb.append(this.fileSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isRestricted:");
    sb.append(this.isRestricted);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isValid:");
    sb.append(this.isValid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isProcessed:");
    sb.append(this.isProcessed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTemplate:");
    sb.append(this.isTemplate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultPermissions:");
    if (this.defaultPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultPermissions);
    }
    first = false;
    if (isSetUserPermissions()) {
      if (!first) sb.append(", ");
      sb.append("userPermissions:");
      if (this.userPermissions == null) {
        sb.append("null");
      } else {
        sb.append(this.userPermissions);
      }
      first = false;
    }
    if (isSetFileSizeSum()) {
      if (!first) sb.append(", ");
      sb.append("fileSizeSum:");
      sb.append(this.fileSizeSum);
      first = false;
    }
    if (isSetVersionCount()) {
      if (!first) sb.append(", ");
      sb.append("versionCount:");
      sb.append(this.versionCount);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultPermissions != null) {
      defaultPermissions.validate();
    }
    if (userPermissions != null) {
      userPermissions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageSummaryReadStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageSummaryReadStandardScheme getScheme() {
      return new ImageSummaryReadStandardScheme();
    }
  }

  private static class ImageSummaryReadStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageSummaryRead> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageSummaryRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMAGE_BASE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageBaseId = iprot.readString();
              struct.setImageBaseIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LATEST_VERSION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.latestVersionId = iprot.readString();
              struct.setLatestVersionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageName = iprot.readString();
              struct.setImageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osId = iprot.readI32();
              struct.setOsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VIRT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.virtId = iprot.readString();
              struct.setVirtIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CREATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.createTime = iprot.readI64();
              struct.setCreateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // UPDATE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.updateTime = iprot.readI64();
              struct.setUpdateTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // UPLOAD_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uploadTime = iprot.readI64();
              struct.setUploadTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // EXPIRE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.expireTime = iprot.readI64();
              struct.setExpireTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OWNER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ownerId = iprot.readString();
              struct.setOwnerIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // UPLOADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uploaderId = iprot.readString();
              struct.setUploaderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SHARE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareMode = org.openslx.bwlp.thrift.iface.ShareMode.findByValue(iprot.readI32());
              struct.setShareModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // FILE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSize = iprot.readI64();
              struct.setFileSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // IS_RESTRICTED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isRestricted = iprot.readBool();
              struct.setIsRestrictedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // IS_VALID
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isValid = iprot.readBool();
              struct.setIsValidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // IS_PROCESSED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isProcessed = iprot.readBool();
              struct.setIsProcessedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // IS_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTemplate = iprot.readBool();
              struct.setIsTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // DEFAULT_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultPermissions = new ImagePermissions();
              struct.defaultPermissions.read(iprot);
              struct.setDefaultPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // USER_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.userPermissions = new ImagePermissions();
              struct.userPermissions.read(iprot);
              struct.setUserPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // FILE_SIZE_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.fileSizeSum = iprot.readI64();
              struct.setFileSizeSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // VERSION_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.versionCount = iprot.readI32();
              struct.setVersionCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageSummaryRead struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imageBaseId != null) {
        oprot.writeFieldBegin(IMAGE_BASE_ID_FIELD_DESC);
        oprot.writeString(struct.imageBaseId);
        oprot.writeFieldEnd();
      }
      if (struct.latestVersionId != null) {
        oprot.writeFieldBegin(LATEST_VERSION_ID_FIELD_DESC);
        oprot.writeString(struct.latestVersionId);
        oprot.writeFieldEnd();
      }
      if (struct.imageName != null) {
        oprot.writeFieldBegin(IMAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.imageName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OS_ID_FIELD_DESC);
      oprot.writeI32(struct.osId);
      oprot.writeFieldEnd();
      if (struct.virtId != null) {
        oprot.writeFieldBegin(VIRT_ID_FIELD_DESC);
        oprot.writeString(struct.virtId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(CREATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.createTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UPDATE_TIME_FIELD_DESC);
      oprot.writeI64(struct.updateTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EXPIRE_TIME_FIELD_DESC);
      oprot.writeI64(struct.expireTime);
      oprot.writeFieldEnd();
      if (struct.ownerId != null) {
        oprot.writeFieldBegin(OWNER_ID_FIELD_DESC);
        oprot.writeString(struct.ownerId);
        oprot.writeFieldEnd();
      }
      if (struct.uploaderId != null) {
        oprot.writeFieldBegin(UPLOADER_ID_FIELD_DESC);
        oprot.writeString(struct.uploaderId);
        oprot.writeFieldEnd();
      }
      if (struct.shareMode != null) {
        oprot.writeFieldBegin(SHARE_MODE_FIELD_DESC);
        oprot.writeI32(struct.shareMode.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FILE_SIZE_FIELD_DESC);
      oprot.writeI64(struct.fileSize);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_RESTRICTED_FIELD_DESC);
      oprot.writeBool(struct.isRestricted);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_VALID_FIELD_DESC);
      oprot.writeBool(struct.isValid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_PROCESSED_FIELD_DESC);
      oprot.writeBool(struct.isProcessed);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(IS_TEMPLATE_FIELD_DESC);
      oprot.writeBool(struct.isTemplate);
      oprot.writeFieldEnd();
      if (struct.defaultPermissions != null) {
        oprot.writeFieldBegin(DEFAULT_PERMISSIONS_FIELD_DESC);
        struct.defaultPermissions.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.userPermissions != null) {
        if (struct.isSetUserPermissions()) {
          oprot.writeFieldBegin(USER_PERMISSIONS_FIELD_DESC);
          struct.userPermissions.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(UPLOAD_TIME_FIELD_DESC);
      oprot.writeI64(struct.uploadTime);
      oprot.writeFieldEnd();
      if (struct.isSetFileSizeSum()) {
        oprot.writeFieldBegin(FILE_SIZE_SUM_FIELD_DESC);
        oprot.writeI64(struct.fileSizeSum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionCount()) {
        oprot.writeFieldBegin(VERSION_COUNT_FIELD_DESC);
        oprot.writeI32(struct.versionCount);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageSummaryReadTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageSummaryReadTupleScheme getScheme() {
      return new ImageSummaryReadTupleScheme();
    }
  }

  private static class ImageSummaryReadTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageSummaryRead> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageSummaryRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImageBaseId()) {
        optionals.set(0);
      }
      if (struct.isSetLatestVersionId()) {
        optionals.set(1);
      }
      if (struct.isSetImageName()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetOsId()) {
        optionals.set(4);
      }
      if (struct.isSetVirtId()) {
        optionals.set(5);
      }
      if (struct.isSetCreateTime()) {
        optionals.set(6);
      }
      if (struct.isSetUpdateTime()) {
        optionals.set(7);
      }
      if (struct.isSetUploadTime()) {
        optionals.set(8);
      }
      if (struct.isSetExpireTime()) {
        optionals.set(9);
      }
      if (struct.isSetOwnerId()) {
        optionals.set(10);
      }
      if (struct.isSetUploaderId()) {
        optionals.set(11);
      }
      if (struct.isSetShareMode()) {
        optionals.set(12);
      }
      if (struct.isSetFileSize()) {
        optionals.set(13);
      }
      if (struct.isSetIsRestricted()) {
        optionals.set(14);
      }
      if (struct.isSetIsValid()) {
        optionals.set(15);
      }
      if (struct.isSetIsProcessed()) {
        optionals.set(16);
      }
      if (struct.isSetIsTemplate()) {
        optionals.set(17);
      }
      if (struct.isSetDefaultPermissions()) {
        optionals.set(18);
      }
      if (struct.isSetUserPermissions()) {
        optionals.set(19);
      }
      if (struct.isSetFileSizeSum()) {
        optionals.set(20);
      }
      if (struct.isSetVersionCount()) {
        optionals.set(21);
      }
      oprot.writeBitSet(optionals, 22);
      if (struct.isSetImageBaseId()) {
        oprot.writeString(struct.imageBaseId);
      }
      if (struct.isSetLatestVersionId()) {
        oprot.writeString(struct.latestVersionId);
      }
      if (struct.isSetImageName()) {
        oprot.writeString(struct.imageName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetOsId()) {
        oprot.writeI32(struct.osId);
      }
      if (struct.isSetVirtId()) {
        oprot.writeString(struct.virtId);
      }
      if (struct.isSetCreateTime()) {
        oprot.writeI64(struct.createTime);
      }
      if (struct.isSetUpdateTime()) {
        oprot.writeI64(struct.updateTime);
      }
      if (struct.isSetUploadTime()) {
        oprot.writeI64(struct.uploadTime);
      }
      if (struct.isSetExpireTime()) {
        oprot.writeI64(struct.expireTime);
      }
      if (struct.isSetOwnerId()) {
        oprot.writeString(struct.ownerId);
      }
      if (struct.isSetUploaderId()) {
        oprot.writeString(struct.uploaderId);
      }
      if (struct.isSetShareMode()) {
        oprot.writeI32(struct.shareMode.getValue());
      }
      if (struct.isSetFileSize()) {
        oprot.writeI64(struct.fileSize);
      }
      if (struct.isSetIsRestricted()) {
        oprot.writeBool(struct.isRestricted);
      }
      if (struct.isSetIsValid()) {
        oprot.writeBool(struct.isValid);
      }
      if (struct.isSetIsProcessed()) {
        oprot.writeBool(struct.isProcessed);
      }
      if (struct.isSetIsTemplate()) {
        oprot.writeBool(struct.isTemplate);
      }
      if (struct.isSetDefaultPermissions()) {
        struct.defaultPermissions.write(oprot);
      }
      if (struct.isSetUserPermissions()) {
        struct.userPermissions.write(oprot);
      }
      if (struct.isSetFileSizeSum()) {
        oprot.writeI64(struct.fileSizeSum);
      }
      if (struct.isSetVersionCount()) {
        oprot.writeI32(struct.versionCount);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageSummaryRead struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(22);
      if (incoming.get(0)) {
        struct.imageBaseId = iprot.readString();
        struct.setImageBaseIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.latestVersionId = iprot.readString();
        struct.setLatestVersionIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.imageName = iprot.readString();
        struct.setImageNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.osId = iprot.readI32();
        struct.setOsIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.virtId = iprot.readString();
        struct.setVirtIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.createTime = iprot.readI64();
        struct.setCreateTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.updateTime = iprot.readI64();
        struct.setUpdateTimeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uploadTime = iprot.readI64();
        struct.setUploadTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.expireTime = iprot.readI64();
        struct.setExpireTimeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ownerId = iprot.readString();
        struct.setOwnerIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.uploaderId = iprot.readString();
        struct.setUploaderIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.shareMode = org.openslx.bwlp.thrift.iface.ShareMode.findByValue(iprot.readI32());
        struct.setShareModeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.fileSize = iprot.readI64();
        struct.setFileSizeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.isRestricted = iprot.readBool();
        struct.setIsRestrictedIsSet(true);
      }
      if (incoming.get(15)) {
        struct.isValid = iprot.readBool();
        struct.setIsValidIsSet(true);
      }
      if (incoming.get(16)) {
        struct.isProcessed = iprot.readBool();
        struct.setIsProcessedIsSet(true);
      }
      if (incoming.get(17)) {
        struct.isTemplate = iprot.readBool();
        struct.setIsTemplateIsSet(true);
      }
      if (incoming.get(18)) {
        struct.defaultPermissions = new ImagePermissions();
        struct.defaultPermissions.read(iprot);
        struct.setDefaultPermissionsIsSet(true);
      }
      if (incoming.get(19)) {
        struct.userPermissions = new ImagePermissions();
        struct.userPermissions.read(iprot);
        struct.setUserPermissionsIsSet(true);
      }
      if (incoming.get(20)) {
        struct.fileSizeSum = iprot.readI64();
        struct.setFileSizeSumIsSet(true);
      }
      if (incoming.get(21)) {
        struct.versionCount = iprot.readI32();
        struct.setVersionCountIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

