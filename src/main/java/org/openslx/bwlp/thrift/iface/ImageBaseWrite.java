/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.bwlp.thrift.iface;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2021-12-17")
public class ImageBaseWrite implements org.apache.thrift.TBase<ImageBaseWrite, ImageBaseWrite._Fields>, java.io.Serializable, Cloneable, Comparable<ImageBaseWrite> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ImageBaseWrite");

  private static final org.apache.thrift.protocol.TField IMAGE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("imageName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OS_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("osId", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField VIRT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("virtId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_TEMPLATE_FIELD_DESC = new org.apache.thrift.protocol.TField("isTemplate", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField DEFAULT_PERMISSIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("defaultPermissions", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField SHARE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("shareMode", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField ADD_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("addTags", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField REM_TAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("remTags", org.apache.thrift.protocol.TType.LIST, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ImageBaseWriteStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ImageBaseWriteTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String imageName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String description; // required
  public int osId; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String virtId; // required
  public boolean isTemplate; // required
  public @org.apache.thrift.annotation.Nullable ImagePermissions defaultPermissions; // required
  /**
   * 
   * @see ShareMode
   */
  public @org.apache.thrift.annotation.Nullable ShareMode shareMode; // required
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> addTags; // optional
  public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> remTags; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMAGE_NAME((short)1, "imageName"),
    DESCRIPTION((short)2, "description"),
    OS_ID((short)3, "osId"),
    VIRT_ID((short)4, "virtId"),
    IS_TEMPLATE((short)5, "isTemplate"),
    DEFAULT_PERMISSIONS((short)6, "defaultPermissions"),
    /**
     * 
     * @see ShareMode
     */
    SHARE_MODE((short)7, "shareMode"),
    ADD_TAGS((short)8, "addTags"),
    REM_TAGS((short)9, "remTags");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMAGE_NAME
          return IMAGE_NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // OS_ID
          return OS_ID;
        case 4: // VIRT_ID
          return VIRT_ID;
        case 5: // IS_TEMPLATE
          return IS_TEMPLATE;
        case 6: // DEFAULT_PERMISSIONS
          return DEFAULT_PERMISSIONS;
        case 7: // SHARE_MODE
          return SHARE_MODE;
        case 8: // ADD_TAGS
          return ADD_TAGS;
        case 9: // REM_TAGS
          return REM_TAGS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OSID_ISSET_ID = 0;
  private static final int __ISTEMPLATE_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ADD_TAGS,_Fields.REM_TAGS};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMAGE_NAME, new org.apache.thrift.meta_data.FieldMetaData("imageName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OS_ID, new org.apache.thrift.meta_data.FieldMetaData("osId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.VIRT_ID, new org.apache.thrift.meta_data.FieldMetaData("virtId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_TEMPLATE, new org.apache.thrift.meta_data.FieldMetaData("isTemplate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DEFAULT_PERMISSIONS, new org.apache.thrift.meta_data.FieldMetaData("defaultPermissions", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ImagePermissions.class)));
    tmpMap.put(_Fields.SHARE_MODE, new org.apache.thrift.meta_data.FieldMetaData("shareMode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ShareMode.class)));
    tmpMap.put(_Fields.ADD_TAGS, new org.apache.thrift.meta_data.FieldMetaData("addTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REM_TAGS, new org.apache.thrift.meta_data.FieldMetaData("remTags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ImageBaseWrite.class, metaDataMap);
  }

  public ImageBaseWrite() {
  }

  public ImageBaseWrite(
    java.lang.String imageName,
    java.lang.String description,
    int osId,
    java.lang.String virtId,
    boolean isTemplate,
    ImagePermissions defaultPermissions,
    ShareMode shareMode)
  {
    this();
    this.imageName = imageName;
    this.description = description;
    this.osId = osId;
    setOsIdIsSet(true);
    this.virtId = virtId;
    this.isTemplate = isTemplate;
    setIsTemplateIsSet(true);
    this.defaultPermissions = defaultPermissions;
    this.shareMode = shareMode;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ImageBaseWrite(ImageBaseWrite other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImageName()) {
      this.imageName = other.imageName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.osId = other.osId;
    if (other.isSetVirtId()) {
      this.virtId = other.virtId;
    }
    this.isTemplate = other.isTemplate;
    if (other.isSetDefaultPermissions()) {
      this.defaultPermissions = new ImagePermissions(other.defaultPermissions);
    }
    if (other.isSetShareMode()) {
      this.shareMode = other.shareMode;
    }
    if (other.isSetAddTags()) {
      java.util.List<java.lang.String> __this__addTags = new java.util.ArrayList<java.lang.String>(other.addTags);
      this.addTags = __this__addTags;
    }
    if (other.isSetRemTags()) {
      java.util.List<java.lang.String> __this__remTags = new java.util.ArrayList<java.lang.String>(other.remTags);
      this.remTags = __this__remTags;
    }
  }

  public ImageBaseWrite deepCopy() {
    return new ImageBaseWrite(this);
  }

  @Override
  public void clear() {
    this.imageName = null;
    this.description = null;
    setOsIdIsSet(false);
    this.osId = 0;
    this.virtId = null;
    setIsTemplateIsSet(false);
    this.isTemplate = false;
    this.defaultPermissions = null;
    this.shareMode = null;
    this.addTags = null;
    this.remTags = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getImageName() {
    return this.imageName;
  }

  public ImageBaseWrite setImageName(@org.apache.thrift.annotation.Nullable java.lang.String imageName) {
    this.imageName = imageName;
    return this;
  }

  public void unsetImageName() {
    this.imageName = null;
  }

  /** Returns true if field imageName is set (has been assigned a value) and false otherwise */
  public boolean isSetImageName() {
    return this.imageName != null;
  }

  public void setImageNameIsSet(boolean value) {
    if (!value) {
      this.imageName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getDescription() {
    return this.description;
  }

  public ImageBaseWrite setDescription(@org.apache.thrift.annotation.Nullable java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getOsId() {
    return this.osId;
  }

  public ImageBaseWrite setOsId(int osId) {
    this.osId = osId;
    setOsIdIsSet(true);
    return this;
  }

  public void unsetOsId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  /** Returns true if field osId is set (has been assigned a value) and false otherwise */
  public boolean isSetOsId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OSID_ISSET_ID);
  }

  public void setOsIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OSID_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getVirtId() {
    return this.virtId;
  }

  public ImageBaseWrite setVirtId(@org.apache.thrift.annotation.Nullable java.lang.String virtId) {
    this.virtId = virtId;
    return this;
  }

  public void unsetVirtId() {
    this.virtId = null;
  }

  /** Returns true if field virtId is set (has been assigned a value) and false otherwise */
  public boolean isSetVirtId() {
    return this.virtId != null;
  }

  public void setVirtIdIsSet(boolean value) {
    if (!value) {
      this.virtId = null;
    }
  }

  public boolean isIsTemplate() {
    return this.isTemplate;
  }

  public ImageBaseWrite setIsTemplate(boolean isTemplate) {
    this.isTemplate = isTemplate;
    setIsTemplateIsSet(true);
    return this;
  }

  public void unsetIsTemplate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID);
  }

  /** Returns true if field isTemplate is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTemplate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID);
  }

  public void setIsTemplateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTEMPLATE_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public ImagePermissions getDefaultPermissions() {
    return this.defaultPermissions;
  }

  public ImageBaseWrite setDefaultPermissions(@org.apache.thrift.annotation.Nullable ImagePermissions defaultPermissions) {
    this.defaultPermissions = defaultPermissions;
    return this;
  }

  public void unsetDefaultPermissions() {
    this.defaultPermissions = null;
  }

  /** Returns true if field defaultPermissions is set (has been assigned a value) and false otherwise */
  public boolean isSetDefaultPermissions() {
    return this.defaultPermissions != null;
  }

  public void setDefaultPermissionsIsSet(boolean value) {
    if (!value) {
      this.defaultPermissions = null;
    }
  }

  /**
   * 
   * @see ShareMode
   */
  @org.apache.thrift.annotation.Nullable
  public ShareMode getShareMode() {
    return this.shareMode;
  }

  /**
   * 
   * @see ShareMode
   */
  public ImageBaseWrite setShareMode(@org.apache.thrift.annotation.Nullable ShareMode shareMode) {
    this.shareMode = shareMode;
    return this;
  }

  public void unsetShareMode() {
    this.shareMode = null;
  }

  /** Returns true if field shareMode is set (has been assigned a value) and false otherwise */
  public boolean isSetShareMode() {
    return this.shareMode != null;
  }

  public void setShareModeIsSet(boolean value) {
    if (!value) {
      this.shareMode = null;
    }
  }

  public int getAddTagsSize() {
    return (this.addTags == null) ? 0 : this.addTags.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getAddTagsIterator() {
    return (this.addTags == null) ? null : this.addTags.iterator();
  }

  public void addToAddTags(java.lang.String elem) {
    if (this.addTags == null) {
      this.addTags = new java.util.ArrayList<java.lang.String>();
    }
    this.addTags.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getAddTags() {
    return this.addTags;
  }

  public ImageBaseWrite setAddTags(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> addTags) {
    this.addTags = addTags;
    return this;
  }

  public void unsetAddTags() {
    this.addTags = null;
  }

  /** Returns true if field addTags is set (has been assigned a value) and false otherwise */
  public boolean isSetAddTags() {
    return this.addTags != null;
  }

  public void setAddTagsIsSet(boolean value) {
    if (!value) {
      this.addTags = null;
    }
  }

  public int getRemTagsSize() {
    return (this.remTags == null) ? 0 : this.remTags.size();
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.Iterator<java.lang.String> getRemTagsIterator() {
    return (this.remTags == null) ? null : this.remTags.iterator();
  }

  public void addToRemTags(java.lang.String elem) {
    if (this.remTags == null) {
      this.remTags = new java.util.ArrayList<java.lang.String>();
    }
    this.remTags.add(elem);
  }

  @org.apache.thrift.annotation.Nullable
  public java.util.List<java.lang.String> getRemTags() {
    return this.remTags;
  }

  public ImageBaseWrite setRemTags(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> remTags) {
    this.remTags = remTags;
    return this;
  }

  public void unsetRemTags() {
    this.remTags = null;
  }

  /** Returns true if field remTags is set (has been assigned a value) and false otherwise */
  public boolean isSetRemTags() {
    return this.remTags != null;
  }

  public void setRemTagsIsSet(boolean value) {
    if (!value) {
      this.remTags = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case IMAGE_NAME:
      if (value == null) {
        unsetImageName();
      } else {
        setImageName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case OS_ID:
      if (value == null) {
        unsetOsId();
      } else {
        setOsId((java.lang.Integer)value);
      }
      break;

    case VIRT_ID:
      if (value == null) {
        unsetVirtId();
      } else {
        setVirtId((java.lang.String)value);
      }
      break;

    case IS_TEMPLATE:
      if (value == null) {
        unsetIsTemplate();
      } else {
        setIsTemplate((java.lang.Boolean)value);
      }
      break;

    case DEFAULT_PERMISSIONS:
      if (value == null) {
        unsetDefaultPermissions();
      } else {
        setDefaultPermissions((ImagePermissions)value);
      }
      break;

    case SHARE_MODE:
      if (value == null) {
        unsetShareMode();
      } else {
        setShareMode((ShareMode)value);
      }
      break;

    case ADD_TAGS:
      if (value == null) {
        unsetAddTags();
      } else {
        setAddTags((java.util.List<java.lang.String>)value);
      }
      break;

    case REM_TAGS:
      if (value == null) {
        unsetRemTags();
      } else {
        setRemTags((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case IMAGE_NAME:
      return getImageName();

    case DESCRIPTION:
      return getDescription();

    case OS_ID:
      return getOsId();

    case VIRT_ID:
      return getVirtId();

    case IS_TEMPLATE:
      return isIsTemplate();

    case DEFAULT_PERMISSIONS:
      return getDefaultPermissions();

    case SHARE_MODE:
      return getShareMode();

    case ADD_TAGS:
      return getAddTags();

    case REM_TAGS:
      return getRemTags();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case IMAGE_NAME:
      return isSetImageName();
    case DESCRIPTION:
      return isSetDescription();
    case OS_ID:
      return isSetOsId();
    case VIRT_ID:
      return isSetVirtId();
    case IS_TEMPLATE:
      return isSetIsTemplate();
    case DEFAULT_PERMISSIONS:
      return isSetDefaultPermissions();
    case SHARE_MODE:
      return isSetShareMode();
    case ADD_TAGS:
      return isSetAddTags();
    case REM_TAGS:
      return isSetRemTags();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof ImageBaseWrite)
      return this.equals((ImageBaseWrite)that);
    return false;
  }

  public boolean equals(ImageBaseWrite that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_imageName = true && this.isSetImageName();
    boolean that_present_imageName = true && that.isSetImageName();
    if (this_present_imageName || that_present_imageName) {
      if (!(this_present_imageName && that_present_imageName))
        return false;
      if (!this.imageName.equals(that.imageName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_osId = true;
    boolean that_present_osId = true;
    if (this_present_osId || that_present_osId) {
      if (!(this_present_osId && that_present_osId))
        return false;
      if (this.osId != that.osId)
        return false;
    }

    boolean this_present_virtId = true && this.isSetVirtId();
    boolean that_present_virtId = true && that.isSetVirtId();
    if (this_present_virtId || that_present_virtId) {
      if (!(this_present_virtId && that_present_virtId))
        return false;
      if (!this.virtId.equals(that.virtId))
        return false;
    }

    boolean this_present_isTemplate = true;
    boolean that_present_isTemplate = true;
    if (this_present_isTemplate || that_present_isTemplate) {
      if (!(this_present_isTemplate && that_present_isTemplate))
        return false;
      if (this.isTemplate != that.isTemplate)
        return false;
    }

    boolean this_present_defaultPermissions = true && this.isSetDefaultPermissions();
    boolean that_present_defaultPermissions = true && that.isSetDefaultPermissions();
    if (this_present_defaultPermissions || that_present_defaultPermissions) {
      if (!(this_present_defaultPermissions && that_present_defaultPermissions))
        return false;
      if (!this.defaultPermissions.equals(that.defaultPermissions))
        return false;
    }

    boolean this_present_shareMode = true && this.isSetShareMode();
    boolean that_present_shareMode = true && that.isSetShareMode();
    if (this_present_shareMode || that_present_shareMode) {
      if (!(this_present_shareMode && that_present_shareMode))
        return false;
      if (!this.shareMode.equals(that.shareMode))
        return false;
    }

    boolean this_present_addTags = true && this.isSetAddTags();
    boolean that_present_addTags = true && that.isSetAddTags();
    if (this_present_addTags || that_present_addTags) {
      if (!(this_present_addTags && that_present_addTags))
        return false;
      if (!this.addTags.equals(that.addTags))
        return false;
    }

    boolean this_present_remTags = true && this.isSetRemTags();
    boolean that_present_remTags = true && that.isSetRemTags();
    if (this_present_remTags || that_present_remTags) {
      if (!(this_present_remTags && that_present_remTags))
        return false;
      if (!this.remTags.equals(that.remTags))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetImageName()) ? 131071 : 524287);
    if (isSetImageName())
      hashCode = hashCode * 8191 + imageName.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + osId;

    hashCode = hashCode * 8191 + ((isSetVirtId()) ? 131071 : 524287);
    if (isSetVirtId())
      hashCode = hashCode * 8191 + virtId.hashCode();

    hashCode = hashCode * 8191 + ((isTemplate) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetDefaultPermissions()) ? 131071 : 524287);
    if (isSetDefaultPermissions())
      hashCode = hashCode * 8191 + defaultPermissions.hashCode();

    hashCode = hashCode * 8191 + ((isSetShareMode()) ? 131071 : 524287);
    if (isSetShareMode())
      hashCode = hashCode * 8191 + shareMode.getValue();

    hashCode = hashCode * 8191 + ((isSetAddTags()) ? 131071 : 524287);
    if (isSetAddTags())
      hashCode = hashCode * 8191 + addTags.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemTags()) ? 131071 : 524287);
    if (isSetRemTags())
      hashCode = hashCode * 8191 + remTags.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(ImageBaseWrite other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetImageName(), other.isSetImageName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImageName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imageName, other.imageName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDescription(), other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetOsId(), other.isSetOsId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOsId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.osId, other.osId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetVirtId(), other.isSetVirtId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVirtId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.virtId, other.virtId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTemplate(), other.isSetIsTemplate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTemplate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTemplate, other.isTemplate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetDefaultPermissions(), other.isSetDefaultPermissions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDefaultPermissions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defaultPermissions, other.defaultPermissions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetShareMode(), other.isSetShareMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShareMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shareMode, other.shareMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetAddTags(), other.isSetAddTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAddTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addTags, other.addTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetRemTags(), other.isSetRemTags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemTags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remTags, other.remTags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("ImageBaseWrite(");
    boolean first = true;

    sb.append("imageName:");
    if (this.imageName == null) {
      sb.append("null");
    } else {
      sb.append(this.imageName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("osId:");
    sb.append(this.osId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("virtId:");
    if (this.virtId == null) {
      sb.append("null");
    } else {
      sb.append(this.virtId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTemplate:");
    sb.append(this.isTemplate);
    first = false;
    if (!first) sb.append(", ");
    sb.append("defaultPermissions:");
    if (this.defaultPermissions == null) {
      sb.append("null");
    } else {
      sb.append(this.defaultPermissions);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shareMode:");
    if (this.shareMode == null) {
      sb.append("null");
    } else {
      sb.append(this.shareMode);
    }
    first = false;
    if (isSetAddTags()) {
      if (!first) sb.append(", ");
      sb.append("addTags:");
      if (this.addTags == null) {
        sb.append("null");
      } else {
        sb.append(this.addTags);
      }
      first = false;
    }
    if (isSetRemTags()) {
      if (!first) sb.append(", ");
      sb.append("remTags:");
      if (this.remTags == null) {
        sb.append("null");
      } else {
        sb.append(this.remTags);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (defaultPermissions != null) {
      defaultPermissions.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ImageBaseWriteStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageBaseWriteStandardScheme getScheme() {
      return new ImageBaseWriteStandardScheme();
    }
  }

  private static class ImageBaseWriteStandardScheme extends org.apache.thrift.scheme.StandardScheme<ImageBaseWrite> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ImageBaseWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMAGE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imageName = iprot.readString();
              struct.setImageNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OS_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.osId = iprot.readI32();
              struct.setOsIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VIRT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.virtId = iprot.readString();
              struct.setVirtIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_TEMPLATE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTemplate = iprot.readBool();
              struct.setIsTemplateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DEFAULT_PERMISSIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.defaultPermissions = new ImagePermissions();
              struct.defaultPermissions.read(iprot);
              struct.setDefaultPermissionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SHARE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shareMode = org.openslx.bwlp.thrift.iface.ShareMode.findByValue(iprot.readI32());
              struct.setShareModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ADD_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list34 = iprot.readListBegin();
                struct.addTags = new java.util.ArrayList<java.lang.String>(_list34.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem35;
                for (int _i36 = 0; _i36 < _list34.size; ++_i36)
                {
                  _elem35 = iprot.readString();
                  struct.addTags.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setAddTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REM_TAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list37 = iprot.readListBegin();
                struct.remTags = new java.util.ArrayList<java.lang.String>(_list37.size);
                @org.apache.thrift.annotation.Nullable java.lang.String _elem38;
                for (int _i39 = 0; _i39 < _list37.size; ++_i39)
                {
                  _elem38 = iprot.readString();
                  struct.remTags.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setRemTagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ImageBaseWrite struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imageName != null) {
        oprot.writeFieldBegin(IMAGE_NAME_FIELD_DESC);
        oprot.writeString(struct.imageName);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OS_ID_FIELD_DESC);
      oprot.writeI32(struct.osId);
      oprot.writeFieldEnd();
      if (struct.virtId != null) {
        oprot.writeFieldBegin(VIRT_ID_FIELD_DESC);
        oprot.writeString(struct.virtId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TEMPLATE_FIELD_DESC);
      oprot.writeBool(struct.isTemplate);
      oprot.writeFieldEnd();
      if (struct.defaultPermissions != null) {
        oprot.writeFieldBegin(DEFAULT_PERMISSIONS_FIELD_DESC);
        struct.defaultPermissions.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.shareMode != null) {
        oprot.writeFieldBegin(SHARE_MODE_FIELD_DESC);
        oprot.writeI32(struct.shareMode.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.addTags != null) {
        if (struct.isSetAddTags()) {
          oprot.writeFieldBegin(ADD_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.addTags.size()));
            for (java.lang.String _iter40 : struct.addTags)
            {
              oprot.writeString(_iter40);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.remTags != null) {
        if (struct.isSetRemTags()) {
          oprot.writeFieldBegin(REM_TAGS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.remTags.size()));
            for (java.lang.String _iter41 : struct.remTags)
            {
              oprot.writeString(_iter41);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ImageBaseWriteTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public ImageBaseWriteTupleScheme getScheme() {
      return new ImageBaseWriteTupleScheme();
    }
  }

  private static class ImageBaseWriteTupleScheme extends org.apache.thrift.scheme.TupleScheme<ImageBaseWrite> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ImageBaseWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetImageName()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetOsId()) {
        optionals.set(2);
      }
      if (struct.isSetVirtId()) {
        optionals.set(3);
      }
      if (struct.isSetIsTemplate()) {
        optionals.set(4);
      }
      if (struct.isSetDefaultPermissions()) {
        optionals.set(5);
      }
      if (struct.isSetShareMode()) {
        optionals.set(6);
      }
      if (struct.isSetAddTags()) {
        optionals.set(7);
      }
      if (struct.isSetRemTags()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetImageName()) {
        oprot.writeString(struct.imageName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetOsId()) {
        oprot.writeI32(struct.osId);
      }
      if (struct.isSetVirtId()) {
        oprot.writeString(struct.virtId);
      }
      if (struct.isSetIsTemplate()) {
        oprot.writeBool(struct.isTemplate);
      }
      if (struct.isSetDefaultPermissions()) {
        struct.defaultPermissions.write(oprot);
      }
      if (struct.isSetShareMode()) {
        oprot.writeI32(struct.shareMode.getValue());
      }
      if (struct.isSetAddTags()) {
        {
          oprot.writeI32(struct.addTags.size());
          for (java.lang.String _iter42 : struct.addTags)
          {
            oprot.writeString(_iter42);
          }
        }
      }
      if (struct.isSetRemTags()) {
        {
          oprot.writeI32(struct.remTags.size());
          for (java.lang.String _iter43 : struct.remTags)
          {
            oprot.writeString(_iter43);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ImageBaseWrite struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.imageName = iprot.readString();
        struct.setImageNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        struct.osId = iprot.readI32();
        struct.setOsIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.virtId = iprot.readString();
        struct.setVirtIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isTemplate = iprot.readBool();
        struct.setIsTemplateIsSet(true);
      }
      if (incoming.get(5)) {
        struct.defaultPermissions = new ImagePermissions();
        struct.defaultPermissions.read(iprot);
        struct.setDefaultPermissionsIsSet(true);
      }
      if (incoming.get(6)) {
        struct.shareMode = org.openslx.bwlp.thrift.iface.ShareMode.findByValue(iprot.readI32());
        struct.setShareModeIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list44 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.addTags = new java.util.ArrayList<java.lang.String>(_list44.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem45;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46)
          {
            _elem45 = iprot.readString();
            struct.addTags.add(_elem45);
          }
        }
        struct.setAddTagsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list47 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
          struct.remTags = new java.util.ArrayList<java.lang.String>(_list47.size);
          @org.apache.thrift.annotation.Nullable java.lang.String _elem48;
          for (int _i49 = 0; _i49 < _list47.size; ++_i49)
          {
            _elem48 = iprot.readString();
            struct.remTags.add(_elem48);
          }
        }
        struct.setRemTagsIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

