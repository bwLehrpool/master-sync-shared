/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.openslx.sat.thrift.iface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Lecture implements org.apache.thrift.TBase<Lecture, Lecture._Fields>, java.io.Serializable, Cloneable, Comparable<Lecture> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Lecture");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LECTURENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("lecturename", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField IS_ACTIVE_FIELD_DESC = new org.apache.thrift.protocol.TField("isActive", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STARTTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("starttime", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ENDTIME_FIELD_DESC = new org.apache.thrift.protocol.TField("endtime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LASTUSED_FIELD_DESC = new org.apache.thrift.protocol.TField("lastused", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("desc", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IMAGENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("imagename", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LectureStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LectureTupleSchemeFactory());
  }

  public String id; // required
  public String lecturename; // required
  public String isActive; // required
  public String starttime; // required
  public String endtime; // required
  public String lastused; // required
  public String desc; // required
  public String imagename; // required
  public String username; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    LECTURENAME((short)2, "lecturename"),
    IS_ACTIVE((short)3, "isActive"),
    STARTTIME((short)4, "starttime"),
    ENDTIME((short)5, "endtime"),
    LASTUSED((short)6, "lastused"),
    DESC((short)7, "desc"),
    IMAGENAME((short)8, "imagename"),
    USERNAME((short)9, "username");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LECTURENAME
          return LECTURENAME;
        case 3: // IS_ACTIVE
          return IS_ACTIVE;
        case 4: // STARTTIME
          return STARTTIME;
        case 5: // ENDTIME
          return ENDTIME;
        case 6: // LASTUSED
          return LASTUSED;
        case 7: // DESC
          return DESC;
        case 8: // IMAGENAME
          return IMAGENAME;
        case 9: // USERNAME
          return USERNAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LECTURENAME, new org.apache.thrift.meta_data.FieldMetaData("lecturename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_ACTIVE, new org.apache.thrift.meta_data.FieldMetaData("isActive", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STARTTIME, new org.apache.thrift.meta_data.FieldMetaData("starttime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDTIME, new org.apache.thrift.meta_data.FieldMetaData("endtime", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LASTUSED, new org.apache.thrift.meta_data.FieldMetaData("lastused", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESC, new org.apache.thrift.meta_data.FieldMetaData("desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IMAGENAME, new org.apache.thrift.meta_data.FieldMetaData("imagename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Lecture.class, metaDataMap);
  }

  public Lecture() {
  }

  public Lecture(
    String id,
    String lecturename,
    String isActive,
    String starttime,
    String endtime,
    String lastused,
    String desc,
    String imagename,
    String username)
  {
    this();
    this.id = id;
    this.lecturename = lecturename;
    this.isActive = isActive;
    this.starttime = starttime;
    this.endtime = endtime;
    this.lastused = lastused;
    this.desc = desc;
    this.imagename = imagename;
    this.username = username;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Lecture(Lecture other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLecturename()) {
      this.lecturename = other.lecturename;
    }
    if (other.isSetIsActive()) {
      this.isActive = other.isActive;
    }
    if (other.isSetStarttime()) {
      this.starttime = other.starttime;
    }
    if (other.isSetEndtime()) {
      this.endtime = other.endtime;
    }
    if (other.isSetLastused()) {
      this.lastused = other.lastused;
    }
    if (other.isSetDesc()) {
      this.desc = other.desc;
    }
    if (other.isSetImagename()) {
      this.imagename = other.imagename;
    }
    if (other.isSetUsername()) {
      this.username = other.username;
    }
  }

  public Lecture deepCopy() {
    return new Lecture(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.lecturename = null;
    this.isActive = null;
    this.starttime = null;
    this.endtime = null;
    this.lastused = null;
    this.desc = null;
    this.imagename = null;
    this.username = null;
  }

  public String getId() {
    return this.id;
  }

  public Lecture setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getLecturename() {
    return this.lecturename;
  }

  public Lecture setLecturename(String lecturename) {
    this.lecturename = lecturename;
    return this;
  }

  public void unsetLecturename() {
    this.lecturename = null;
  }

  /** Returns true if field lecturename is set (has been assigned a value) and false otherwise */
  public boolean isSetLecturename() {
    return this.lecturename != null;
  }

  public void setLecturenameIsSet(boolean value) {
    if (!value) {
      this.lecturename = null;
    }
  }

  public String getIsActive() {
    return this.isActive;
  }

  public Lecture setIsActive(String isActive) {
    this.isActive = isActive;
    return this;
  }

  public void unsetIsActive() {
    this.isActive = null;
  }

  /** Returns true if field isActive is set (has been assigned a value) and false otherwise */
  public boolean isSetIsActive() {
    return this.isActive != null;
  }

  public void setIsActiveIsSet(boolean value) {
    if (!value) {
      this.isActive = null;
    }
  }

  public String getStarttime() {
    return this.starttime;
  }

  public Lecture setStarttime(String starttime) {
    this.starttime = starttime;
    return this;
  }

  public void unsetStarttime() {
    this.starttime = null;
  }

  /** Returns true if field starttime is set (has been assigned a value) and false otherwise */
  public boolean isSetStarttime() {
    return this.starttime != null;
  }

  public void setStarttimeIsSet(boolean value) {
    if (!value) {
      this.starttime = null;
    }
  }

  public String getEndtime() {
    return this.endtime;
  }

  public Lecture setEndtime(String endtime) {
    this.endtime = endtime;
    return this;
  }

  public void unsetEndtime() {
    this.endtime = null;
  }

  /** Returns true if field endtime is set (has been assigned a value) and false otherwise */
  public boolean isSetEndtime() {
    return this.endtime != null;
  }

  public void setEndtimeIsSet(boolean value) {
    if (!value) {
      this.endtime = null;
    }
  }

  public String getLastused() {
    return this.lastused;
  }

  public Lecture setLastused(String lastused) {
    this.lastused = lastused;
    return this;
  }

  public void unsetLastused() {
    this.lastused = null;
  }

  /** Returns true if field lastused is set (has been assigned a value) and false otherwise */
  public boolean isSetLastused() {
    return this.lastused != null;
  }

  public void setLastusedIsSet(boolean value) {
    if (!value) {
      this.lastused = null;
    }
  }

  public String getDesc() {
    return this.desc;
  }

  public Lecture setDesc(String desc) {
    this.desc = desc;
    return this;
  }

  public void unsetDesc() {
    this.desc = null;
  }

  /** Returns true if field desc is set (has been assigned a value) and false otherwise */
  public boolean isSetDesc() {
    return this.desc != null;
  }

  public void setDescIsSet(boolean value) {
    if (!value) {
      this.desc = null;
    }
  }

  public String getImagename() {
    return this.imagename;
  }

  public Lecture setImagename(String imagename) {
    this.imagename = imagename;
    return this;
  }

  public void unsetImagename() {
    this.imagename = null;
  }

  /** Returns true if field imagename is set (has been assigned a value) and false otherwise */
  public boolean isSetImagename() {
    return this.imagename != null;
  }

  public void setImagenameIsSet(boolean value) {
    if (!value) {
      this.imagename = null;
    }
  }

  public String getUsername() {
    return this.username;
  }

  public Lecture setUsername(String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case LECTURENAME:
      if (value == null) {
        unsetLecturename();
      } else {
        setLecturename((String)value);
      }
      break;

    case IS_ACTIVE:
      if (value == null) {
        unsetIsActive();
      } else {
        setIsActive((String)value);
      }
      break;

    case STARTTIME:
      if (value == null) {
        unsetStarttime();
      } else {
        setStarttime((String)value);
      }
      break;

    case ENDTIME:
      if (value == null) {
        unsetEndtime();
      } else {
        setEndtime((String)value);
      }
      break;

    case LASTUSED:
      if (value == null) {
        unsetLastused();
      } else {
        setLastused((String)value);
      }
      break;

    case DESC:
      if (value == null) {
        unsetDesc();
      } else {
        setDesc((String)value);
      }
      break;

    case IMAGENAME:
      if (value == null) {
        unsetImagename();
      } else {
        setImagename((String)value);
      }
      break;

    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LECTURENAME:
      return getLecturename();

    case IS_ACTIVE:
      return getIsActive();

    case STARTTIME:
      return getStarttime();

    case ENDTIME:
      return getEndtime();

    case LASTUSED:
      return getLastused();

    case DESC:
      return getDesc();

    case IMAGENAME:
      return getImagename();

    case USERNAME:
      return getUsername();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LECTURENAME:
      return isSetLecturename();
    case IS_ACTIVE:
      return isSetIsActive();
    case STARTTIME:
      return isSetStarttime();
    case ENDTIME:
      return isSetEndtime();
    case LASTUSED:
      return isSetLastused();
    case DESC:
      return isSetDesc();
    case IMAGENAME:
      return isSetImagename();
    case USERNAME:
      return isSetUsername();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Lecture)
      return this.equals((Lecture)that);
    return false;
  }

  public boolean equals(Lecture that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_lecturename = true && this.isSetLecturename();
    boolean that_present_lecturename = true && that.isSetLecturename();
    if (this_present_lecturename || that_present_lecturename) {
      if (!(this_present_lecturename && that_present_lecturename))
        return false;
      if (!this.lecturename.equals(that.lecturename))
        return false;
    }

    boolean this_present_isActive = true && this.isSetIsActive();
    boolean that_present_isActive = true && that.isSetIsActive();
    if (this_present_isActive || that_present_isActive) {
      if (!(this_present_isActive && that_present_isActive))
        return false;
      if (!this.isActive.equals(that.isActive))
        return false;
    }

    boolean this_present_starttime = true && this.isSetStarttime();
    boolean that_present_starttime = true && that.isSetStarttime();
    if (this_present_starttime || that_present_starttime) {
      if (!(this_present_starttime && that_present_starttime))
        return false;
      if (!this.starttime.equals(that.starttime))
        return false;
    }

    boolean this_present_endtime = true && this.isSetEndtime();
    boolean that_present_endtime = true && that.isSetEndtime();
    if (this_present_endtime || that_present_endtime) {
      if (!(this_present_endtime && that_present_endtime))
        return false;
      if (!this.endtime.equals(that.endtime))
        return false;
    }

    boolean this_present_lastused = true && this.isSetLastused();
    boolean that_present_lastused = true && that.isSetLastused();
    if (this_present_lastused || that_present_lastused) {
      if (!(this_present_lastused && that_present_lastused))
        return false;
      if (!this.lastused.equals(that.lastused))
        return false;
    }

    boolean this_present_desc = true && this.isSetDesc();
    boolean that_present_desc = true && that.isSetDesc();
    if (this_present_desc || that_present_desc) {
      if (!(this_present_desc && that_present_desc))
        return false;
      if (!this.desc.equals(that.desc))
        return false;
    }

    boolean this_present_imagename = true && this.isSetImagename();
    boolean that_present_imagename = true && that.isSetImagename();
    if (this_present_imagename || that_present_imagename) {
      if (!(this_present_imagename && that_present_imagename))
        return false;
      if (!this.imagename.equals(that.imagename))
        return false;
    }

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(Lecture other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLecturename()).compareTo(other.isSetLecturename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLecturename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lecturename, other.lecturename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIsActive()).compareTo(other.isSetIsActive());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsActive()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isActive, other.isActive);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStarttime()).compareTo(other.isSetStarttime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStarttime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.starttime, other.starttime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndtime()).compareTo(other.isSetEndtime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndtime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endtime, other.endtime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLastused()).compareTo(other.isSetLastused());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastused()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastused, other.lastused);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDesc()).compareTo(other.isSetDesc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDesc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.desc, other.desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImagename()).compareTo(other.isSetImagename());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImagename()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imagename, other.imagename);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUsername()).compareTo(other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Lecture(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lecturename:");
    if (this.lecturename == null) {
      sb.append("null");
    } else {
      sb.append(this.lecturename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isActive:");
    if (this.isActive == null) {
      sb.append("null");
    } else {
      sb.append(this.isActive);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("starttime:");
    if (this.starttime == null) {
      sb.append("null");
    } else {
      sb.append(this.starttime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endtime:");
    if (this.endtime == null) {
      sb.append("null");
    } else {
      sb.append(this.endtime);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastused:");
    if (this.lastused == null) {
      sb.append("null");
    } else {
      sb.append(this.lastused);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("desc:");
    if (this.desc == null) {
      sb.append("null");
    } else {
      sb.append(this.desc);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("imagename:");
    if (this.imagename == null) {
      sb.append("null");
    } else {
      sb.append(this.imagename);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LectureStandardSchemeFactory implements SchemeFactory {
    public LectureStandardScheme getScheme() {
      return new LectureStandardScheme();
    }
  }

  private static class LectureStandardScheme extends StandardScheme<Lecture> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Lecture struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LECTURENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lecturename = iprot.readString();
              struct.setLecturenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // IS_ACTIVE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.isActive = iprot.readString();
              struct.setIsActiveIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STARTTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.starttime = iprot.readString();
              struct.setStarttimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ENDTIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endtime = iprot.readString();
              struct.setEndtimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LASTUSED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastused = iprot.readString();
              struct.setLastusedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.desc = iprot.readString();
              struct.setDescIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IMAGENAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imagename = iprot.readString();
              struct.setImagenameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Lecture struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.lecturename != null) {
        oprot.writeFieldBegin(LECTURENAME_FIELD_DESC);
        oprot.writeString(struct.lecturename);
        oprot.writeFieldEnd();
      }
      if (struct.isActive != null) {
        oprot.writeFieldBegin(IS_ACTIVE_FIELD_DESC);
        oprot.writeString(struct.isActive);
        oprot.writeFieldEnd();
      }
      if (struct.starttime != null) {
        oprot.writeFieldBegin(STARTTIME_FIELD_DESC);
        oprot.writeString(struct.starttime);
        oprot.writeFieldEnd();
      }
      if (struct.endtime != null) {
        oprot.writeFieldBegin(ENDTIME_FIELD_DESC);
        oprot.writeString(struct.endtime);
        oprot.writeFieldEnd();
      }
      if (struct.lastused != null) {
        oprot.writeFieldBegin(LASTUSED_FIELD_DESC);
        oprot.writeString(struct.lastused);
        oprot.writeFieldEnd();
      }
      if (struct.desc != null) {
        oprot.writeFieldBegin(DESC_FIELD_DESC);
        oprot.writeString(struct.desc);
        oprot.writeFieldEnd();
      }
      if (struct.imagename != null) {
        oprot.writeFieldBegin(IMAGENAME_FIELD_DESC);
        oprot.writeString(struct.imagename);
        oprot.writeFieldEnd();
      }
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LectureTupleSchemeFactory implements SchemeFactory {
    public LectureTupleScheme getScheme() {
      return new LectureTupleScheme();
    }
  }

  private static class LectureTupleScheme extends TupleScheme<Lecture> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Lecture struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLecturename()) {
        optionals.set(1);
      }
      if (struct.isSetIsActive()) {
        optionals.set(2);
      }
      if (struct.isSetStarttime()) {
        optionals.set(3);
      }
      if (struct.isSetEndtime()) {
        optionals.set(4);
      }
      if (struct.isSetLastused()) {
        optionals.set(5);
      }
      if (struct.isSetDesc()) {
        optionals.set(6);
      }
      if (struct.isSetImagename()) {
        optionals.set(7);
      }
      if (struct.isSetUsername()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLecturename()) {
        oprot.writeString(struct.lecturename);
      }
      if (struct.isSetIsActive()) {
        oprot.writeString(struct.isActive);
      }
      if (struct.isSetStarttime()) {
        oprot.writeString(struct.starttime);
      }
      if (struct.isSetEndtime()) {
        oprot.writeString(struct.endtime);
      }
      if (struct.isSetLastused()) {
        oprot.writeString(struct.lastused);
      }
      if (struct.isSetDesc()) {
        oprot.writeString(struct.desc);
      }
      if (struct.isSetImagename()) {
        oprot.writeString(struct.imagename);
      }
      if (struct.isSetUsername()) {
        oprot.writeString(struct.username);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Lecture struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lecturename = iprot.readString();
        struct.setLecturenameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.isActive = iprot.readString();
        struct.setIsActiveIsSet(true);
      }
      if (incoming.get(3)) {
        struct.starttime = iprot.readString();
        struct.setStarttimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.endtime = iprot.readString();
        struct.setEndtimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.lastused = iprot.readString();
        struct.setLastusedIsSet(true);
      }
      if (incoming.get(6)) {
        struct.desc = iprot.readString();
        struct.setDescIsSet(true);
      }
      if (incoming.get(7)) {
        struct.imagename = iprot.readString();
        struct.setImagenameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.username = iprot.readString();
        struct.setUsernameIsSet(true);
      }
    }
  }

}

